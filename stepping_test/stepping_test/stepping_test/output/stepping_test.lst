FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 05 35 LJMP  _SPIM_1_ISR        (0157)     ljmp	_SPIM_1_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 05 4B LJMP  _SleepTimer_1_ISR  (0217)     ljmp	_SleepTimer_1_ISR
0067: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
0087: 5D D0    MOV   A,REG[0xD0]        
0089: 08       PUSH  A                  
008A: 62 D0 00 MOV   REG[0xD0],0x0      
008D: 55 FA 01 MOV   [0xFA],0x1         
0090: 4F       MOV   X,SP               
0091: 5B       MOV   A,X                
0092: 01 03    ADD   A,0x3              
0094: 53 F9    MOV   [0xF9],A           
0096: 55 F8 3A MOV   [0xF8],0x3A        
0099: 50 06    MOV   A,0x6              
009B: 00       SWI                      
009C: 71 10    OR    F,0x10             
009E: 51 FC    MOV   A,[0xFC]           
00A0: 29 40    OR    A,0x40             
00A2: 60 EA    MOV   REG[0xEA],A        
00A4: 70 EF    AND   F,0xEF             
00A6: 18       POP   A                  
00A7: 60 D0    MOV   REG[0xD0],A        
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
00A9: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00AC: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
00AF: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
00B1: 62 E0 0A MOV   REG[0xE0],0xA      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00B4: 70 EF    AND   F,0xEF             
00B6: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00B9: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00BC: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00BF: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00C2: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00C5: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00C8: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00CA: 4E       SWAP  SP,A               (0410)     swap  A, SP
00CB: 62 D3 07 MOV   REG[0xD3],0x7      
00CE: 62 D0 00 MOV   REG[0xD0],0x0      
00D1: 62 D5 00 MOV   REG[0xD5],0x0      
00D4: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D7: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00D9: 7C 04 C7 LCALL 0x04C7             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DC: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00DF: 50 03    MOV   A,0x3              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00E1: 57 BE    MOV   X,0xBE             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00E3: 08       PUSH  A                  (0486)     push  A
00E4: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00E5: 53 4F    MOV   [__r0],A           (0488)     mov   [__r0], A
00E7: 18       POP   A                  (0489)     pop   A
00E8: 75       INC   X                  (0490)     inc   X
00E9: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00EB: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00EC: 4B       SWAP  A,X                (0493)     swap  A, X
00ED: 51 4F    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00EF: 80 04    JMP   0x00F4             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00F1: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00F2: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00F4: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00F7: 08       PUSH  A                  (0521)     push  A
00F8: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00F9: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00FB: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00FC: A0 4B    JZ    0x0148             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00FE: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00FF: 75       INC   X                  (0527)     inc   X                            ; pXIData++
0100: 09 00    ADC   A,0x0              (0528)     adc   A, 0
0102: 08       PUSH  A                  (0529)     push  A
0103: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
0104: 53 4F    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
0106: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
0107: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
0108: 09 00    ADC   A,0x0              (0534)     adc   A, 0
010A: 08       PUSH  A                  (0535)     push  A
010B: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
010C: A0 1C    JZ    0x0129             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
010E: 53 4E    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
0110: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
0111: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0112: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0114: 08       PUSH  A                  (0549)     push  A
0115: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
0116: 3F 4F    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
0118: 47 4F FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
011B: B0 06    JNZ   0x0122             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
011D: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011F: 74       INC   A                  (0555)     inc   A
0120: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0122: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0123: 7A 4E    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0125: BF EB    JNZ   0x0111             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0127: 8F C9    JMP   0x00F1             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0129: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
012A: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
012B: 09 00    ADC   A,0x0              (0566)     adc   A, 0
012D: 08       PUSH  A                  (0567)     push  A
012E: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
012F: 53 4E    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
0131: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0133: 3F 4F    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0135: 47 4F FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0138: B0 08    JNZ   0x0141             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
013A: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
013C: 74       INC   A                  (0580)     inc   A
013D: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
013F: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
0141: 7A 4E    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0143: BF EF    JNZ   0x0133             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0145: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0146: 8F AA    JMP   0x00F1             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0148: 18       POP   A                  (0590)     pop   A                            ; balance stack
0149: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
014B: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
014E: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
0150: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0153: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0155: 62 E0 0B MOV   REG[0xE0],0xB      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0158: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
015B: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
015D: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0160: 7C 08 BA LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0163: 8F FF    JMP   0x0163             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0165: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0167: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
03C2: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_stepping_test_Bank1
                                        (0019) export LoadConfigTBL_stepping_test_Bank0
                                        (0020) export LoadConfigTBL_stepping_test_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_stepping_test_Bank0:
                                        (0023) ;  Instance name CS, User Module LED
                                        (0024) ;  Instance name LCD_1, User Module LCD
                                        (0025) ;  Instance name SPIM_1, User Module SPIM
                                        (0026) ;       Instance name SPIM_1, Block Name SPIM(DCB02)
                                        (0027) 	db		2bh, 00h		;SPIM_1_CONTROL_REG  (DCB02CR0)
                                        (0028) 	db		29h, 00h		;SPIM_1_TX_BUFFER_REG(DCB02DR1)
                                        (0029) 	db		2ah, 00h		;SPIM_1_RX_BUFFER_REG(DCB02DR2)
                                        (0030) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0031) ;  Global Register values Bank 0
                                        (0032) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0033) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0034) 	db		63h, 00h		; AnalogReferenceControl register (ARF_CR)
                                        (0035) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0036) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0037) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0038) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0039) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0040) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0041) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0042) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0043) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0044) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0045) 	db		b6h, 01h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0046) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0047) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0048) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0049) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0050) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0051) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0052) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0053) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0054) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0055) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0056) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0057) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0058) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0059) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0060) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0061) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0062) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0063) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0064) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0065) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0066) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0067) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0068) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0069) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0070) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0071) 	db		ffh
                                        (0072) LoadConfigTBL_stepping_test_Bank1:
                                        (0073) ;  Instance name CS, User Module LED
                                        (0074) ;  Instance name LCD_1, User Module LCD
                                        (0075) ;  Instance name SPIM_1, User Module SPIM
                                        (0076) ;       Instance name SPIM_1, Block Name SPIM(DCB02)
                                        (0077) 	db		28h, 16h		;SPIM_1_FUNCTION_REG (DCB02FN)
                                        (0078) 	db		29h, c7h		;SPIM_1_INPUT_REG    (DCB02IN)
                                        (0079) 	db		2ah, 75h		;SPIM_1_OUTPUT_REG   (DCB02OU)
                                        (0080) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0081) ;  Global Register values Bank 1
                                        (0082) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0083) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0084) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0085) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0086) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0087) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0088) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0089) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0090) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0091) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0092) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0093) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0094) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0095) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0096) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0097) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0098) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0099) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0100) 	db		ffh
                                        (0101) AREA psoc_config(rom, rel)
                                        (0102) LoadConfigTBL_stepping_test_Ordered:
                                        (0103) ;  Ordered Global Register values
                                        (0104) 	M8C_SetBank0
03C4: 62 00 00 MOV   REG[0x0],0x0       (0105) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03C7: 71 10    OR    F,0x10             
                                        (0106) 	M8C_SetBank1
03C9: 62 00 7F MOV   REG[0x0],0x7F      (0107) 	mov	reg[00h], 7fh		; Port_0_DriveMode_0 register (PRT0DM0)
03CC: 62 01 80 MOV   REG[0x1],0x80      (0108) 	mov	reg[01h], 80h		; Port_0_DriveMode_1 register (PRT0DM1)
03CF: 70 EF    AND   F,0xEF             
                                        (0109) 	M8C_SetBank0
03D1: 62 03 80 MOV   REG[0x3],0x80      (0110) 	mov	reg[03h], 80h		; Port_0_DriveMode_2 register (PRT0DM2)
03D4: 62 02 00 MOV   REG[0x2],0x0       (0111) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
03D7: 71 10    OR    F,0x10             
                                        (0112) 	M8C_SetBank1
03D9: 62 02 00 MOV   REG[0x2],0x0       (0113) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03DC: 62 03 00 MOV   REG[0x3],0x0       (0114) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
03DF: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
03E1: 62 01 00 MOV   REG[0x1],0x0       (0116) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
03E4: 62 04 00 MOV   REG[0x4],0x0       (0117) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
03E7: 71 10    OR    F,0x10             
                                        (0118) 	M8C_SetBank1
03E9: 62 04 00 MOV   REG[0x4],0x0       (0119) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
03EC: 62 05 FF MOV   REG[0x5],0xFF      (0120) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
03EF: 70 EF    AND   F,0xEF             
                                        (0121) 	M8C_SetBank0
03F1: 62 07 FC MOV   REG[0x7],0xFC      (0122) 	mov	reg[07h], fch		; Port_1_DriveMode_2 register (PRT1DM2)
03F4: 62 06 00 MOV   REG[0x6],0x0       (0123) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
03F7: 71 10    OR    F,0x10             
                                        (0124) 	M8C_SetBank1
03F9: 62 06 00 MOV   REG[0x6],0x0       (0125) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
03FC: 62 07 00 MOV   REG[0x7],0x0       (0126) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
03FF: 70 EF    AND   F,0xEF             
                                        (0127) 	M8C_SetBank0
0401: 62 05 00 MOV   REG[0x5],0x0       (0128) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0404: 62 08 00 MOV   REG[0x8],0x0       (0129) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0407: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
0409: 62 08 0E MOV   REG[0x8],0xE       (0131) 	mov	reg[08h], 0eh		; Port_2_DriveMode_0 register (PRT2DM0)
040C: 62 09 F1 MOV   REG[0x9],0xF1      (0132) 	mov	reg[09h], f1h		; Port_2_DriveMode_1 register (PRT2DM1)
040F: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
0411: 62 0B F0 MOV   REG[0xB],0xF0      (0134) 	mov	reg[0bh], f0h		; Port_2_DriveMode_2 register (PRT2DM2)
0414: 62 0A 07 MOV   REG[0xA],0x7       (0135) 	mov	reg[0ah], 07h		; Port_2_GlobalSelect register (PRT2GS)
0417: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
0419: 62 0A 00 MOV   REG[0xA],0x0       (0137) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
041C: 62 0B 00 MOV   REG[0xB],0x0       (0138) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
041F: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
0421: 62 09 00 MOV   REG[0x9],0x0       (0140) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0424: 62 0C 00 MOV   REG[0xC],0x0       (0141) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0427: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
0429: 62 0C 00 MOV   REG[0xC],0x0       (0143) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
042C: 62 0D 00 MOV   REG[0xD],0x0       (0144) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
042F: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
0431: 62 0F 00 MOV   REG[0xF],0x0       (0146) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0434: 62 0E 00 MOV   REG[0xE],0x0       (0147) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0437: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
0439: 62 0E 00 MOV   REG[0xE],0x0       (0149) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
043C: 62 0F 00 MOV   REG[0xF],0x0       (0150) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
043F: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
0441: 62 0D 00 MOV   REG[0xD],0x0       (0152) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0444: 62 10 00 MOV   REG[0x10],0x0      (0153) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0447: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
0449: 62 10 00 MOV   REG[0x10],0x0      (0155) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
044C: 62 11 00 MOV   REG[0x11],0x0      (0156) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
044F: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
0451: 62 13 00 MOV   REG[0x13],0x0      (0158) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0454: 62 12 00 MOV   REG[0x12],0x0      (0159) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0457: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
0459: 62 12 00 MOV   REG[0x12],0x0      (0161) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
045C: 62 13 00 MOV   REG[0x13],0x0      (0162) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
045F: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0461: 62 11 00 MOV   REG[0x11],0x0      (0164) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0464: 62 14 00 MOV   REG[0x14],0x0      (0165) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0467: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
0469: 62 14 00 MOV   REG[0x14],0x0      (0167) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
046C: 62 15 00 MOV   REG[0x15],0x0      (0168) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
046F: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0471: 62 17 00 MOV   REG[0x17],0x0      (0170) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0474: 62 16 00 MOV   REG[0x16],0x0      (0171) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0477: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
0479: 62 16 00 MOV   REG[0x16],0x0      (0173) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
047C: 62 17 00 MOV   REG[0x17],0x0      (0174) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
047F: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
0481: 62 15 00 MOV   REG[0x15],0x0      (0176) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0484: 62 18 00 MOV   REG[0x18],0x0      (0177) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0487: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
0489: 62 18 00 MOV   REG[0x18],0x0      (0179) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
048C: 62 19 00 MOV   REG[0x19],0x0      (0180) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
048F: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
0491: 62 1B 00 MOV   REG[0x1B],0x0      (0182) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0494: 62 1A 00 MOV   REG[0x1A],0x0      (0183) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0497: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
0499: 62 1A 00 MOV   REG[0x1A],0x0      (0185) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
049C: 62 1B 00 MOV   REG[0x1B],0x0      (0186) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
049F: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
04A1: 62 19 00 MOV   REG[0x19],0x0      (0188) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
04A4: 62 1C 00 MOV   REG[0x1C],0x0      (0189) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
04A7: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
04A9: 62 1C 00 MOV   REG[0x1C],0x0      (0191) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
04AC: 62 1D 00 MOV   REG[0x1D],0x0      (0192) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
04AF: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
04B1: 62 1F 00 MOV   REG[0x1F],0x0      (0194) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
04B4: 62 1E 00 MOV   REG[0x1E],0x0      (0195) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
04B7: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
04B9: 62 1E 00 MOV   REG[0x1E],0x0      (0197) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
04BC: 62 1F 00 MOV   REG[0x1F],0x0      (0198) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
04BF: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
04C1: 62 1D 00 MOV   REG[0x1D],0x0      (0200) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
04C4: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
04C6: 7F       RET                      (0202) 	ret
                                        (0203) 
                                        (0204) 
                                        (0205) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_stepping_test
                                        (0026) export _LoadConfig_stepping_test
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
04C7: 55 04 00 MOV   [0x4],0x0          (0067) 	mov		[Port_0_Data_SHADE], 0h
04CA: 55 06 7F MOV   [0x6],0x7F         (0068) 	mov		[Port_0_DriveMode_0_SHADE], 7fh
04CD: 55 07 80 MOV   [0x7],0x80         (0069) 	mov		[Port_0_DriveMode_1_SHADE], 80h
04D0: 55 05 00 MOV   [0x5],0x0          (0070) 	mov		[Port_2_Data_SHADE], 0h
                                        (0071) 
04D3: 7C 04 DA LCALL 0x04DA             (0072) 	lcall	LoadConfig_stepping_test
04D6: 7C 03 C2 LCALL 0x03C2             (0073) 	lcall	LoadConfigTBL_stepping_test_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
04D9: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration stepping_test
                                        (0081) ;
                                        (0082) ;    Load configuration registers for stepping_test.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_stepping_test:
                                        (0099)  LoadConfig_stepping_test:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
04DA: 10       PUSH  X                  (0102) 	push	x
04DB: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
04DD: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
04DF: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
04E0: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_stepping_test_Bank0
04E2: 57 E8    MOV   X,0xE8             (0108)     mov     X, <LoadConfigTBL_stepping_test_Bank0
04E4: 7C 04 F5 LCALL 0x04F5             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
04E7: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
04E9: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
04EA: 50 02    MOV   A,0x2              (0114)     mov     A, >LoadConfigTBL_stepping_test_Bank1
04EC: 57 3D    MOV   X,0x3D             (0115)     mov     X, <LoadConfigTBL_stepping_test_Bank1
04EE: 7C 04 F5 LCALL 0x04F5             (0116)     lcall   LoadConfig              ; Load the bank 1 values
04F1: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
04F3: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
04F4: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
04F5: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
04F7: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
04F8: 08       PUSH  A                  (0146)     push    A
04F9: 4F       MOV   X,SP               (0147)     mov     X, SP
04FA: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
04FD: D0 04    JNC   0x0502             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
04FF: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
0502: 18       POP   A                  (0152)     pop     A
0503: 20       POP   X                  (0153)     pop     X
0504: 70 EF    AND   F,0xEF             
0506: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0509: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
050A: 08       PUSH  A                  (0159)     push    A
050B: 28       ROMX                     (0160)     romx                            ; Load register address from table
050C: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
050E: A0 1F    JZ    0x052E             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0510: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0511: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
0514: A0 03    JZ    0x0518             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0516: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0518: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
051A: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
051B: 20       POP   X                  (0170)     pop     X
051C: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
051D: 09 00    ADC   A,0x0              (0172)     adc     A, 0
051F: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0520: 08       PUSH  A                  (0174)     push    A
0521: 28       ROMX                     (0175)     romx                            ; load config data from the table
0522: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0523: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
0525: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0527: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0528: 20       POP   X                  (0180)     pop     X
0529: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
052A: 09 00    ADC   A,0x0              (0182)     adc     A, 0
052C: 8F D7    JMP   0x0504             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
052E: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
0530: 70 3F    AND   F,0x3F             
0532: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0534: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_0_Data_SHADE:
                                        (0195) Port_0_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_0_DriveMode_0_SHADE:
                                        (0199) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_0_DriveMode_1_SHADE:
                                        (0201) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\spim_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2014/7/14 at 8:16:32
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM_1.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM_1.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_1_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_1_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_1_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
0535: 7D 07 5F LJMP  CS_GetState|CS_Invert|__UserModules_end|__SPIM_ISR|__text_start|__SPIM_ISR(0075)    ljmp __SPIM_ISR
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0538: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIM_1INT.asm
FILE: lib\spim_1.asm                    (0001) ;;*****************************************************************************
0539: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2014/7/14 at 8:16:32
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_1_EnableInt
                                        (0030) export  _SPIM_1_EnableInt
                                        (0031) export   SPIM_1_DisableInt
                                        (0032) export  _SPIM_1_DisableInt
                                        (0033) export   SPIM_1_Start
                                        (0034) export  _SPIM_1_Start
                                        (0035) export   SPIM_1_Stop
                                        (0036) export  _SPIM_1_Stop
                                        (0037) export   SPIM_1_SendTxData
                                        (0038) export  _SPIM_1_SendTxData
                                        (0039) export   SPIM_1_bReadRxData
                                        (0040) export  _SPIM_1_bReadRxData
                                        (0041) export   SPIM_1_bReadStatus
                                        (0042) export  _SPIM_1_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_1_ReadRxData
                                        (0047) export  _bSPIM_1_ReadRxData
                                        (0048) export   bSPIM_1_ReadStatus
                                        (0049) export  _bSPIM_1_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_1_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_1_EnableInt:
                                        (0087) _SPIM_1_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_1_INT_REG, SPIM_1_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
053C: 7F       RET                      (0091)    ret
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_1_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_1_DisableInt:
                                        (0120) _SPIM_1_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_1_INT_REG, SPIM_1_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_1_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_1_Start:
                                        (0160) _SPIM_1_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
053D: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
053F: 60 2B    MOV   REG[0x2B],A        (0164)    mov   REG[SPIM_1_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
0541: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_1_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_1_Stop:
                                        (0194) _SPIM_1_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
                                        (0197)    and   REG[SPIM_1_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_1_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_1_SendTxData:
                                        (0229) _SPIM_1_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
0542: 60 29    MOV   REG[0x29],A        (0232)    mov REG[SPIM_1_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
0544: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_1_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_1_bReadRxData:
                                        (0263) _SPIM_1_bReadRxData:
                                        (0264)  bSPIM_1_ReadRxData:
                                        (0265) _bSPIM_1_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
0545: 5D 2A    MOV   A,REG[0x2A]        (0267)    mov A, REG[SPIM_1_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
0547: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_1_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_1_bReadStatus:
                                        (0300) _SPIM_1_bReadStatus:
                                        (0301)  bSPIM_1_ReadStatus:
                                        (0302) _bSPIM_1_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
0548: 5D 2B    MOV   A,REG[0x2B]        (0304)    mov A,  REG[SPIM_1_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
054A: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM_1.asm
FILE: lib\sleeptimer_1int.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimer_1INT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2014/7/14 at 8:15:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer_1.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_1_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_1_fTick
                                        (0024) export _SleepTimer_1_fTick
                                        (0025) export  SleepTimer_1_bTimerValue
                                        (0026) export _SleepTimer_1_bTimerValue
                                        (0027) export  SleepTimer_1_bCountDown
                                        (0028) export _SleepTimer_1_bCountDown
                                        (0029) export  SleepTimer_1_TickCount
                                        (0030) export _SleepTimer_1_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_1_fTick:
                                        (0038) _SleepTimer_1_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_1_bTimerValue:
                                        (0041) _SleepTimer_1_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_1_bCountDown:
                                        (0044) _SleepTimer_1_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_1_TickCount:
                                        (0047) _SleepTimer_1_TickCount:    BLK  SleepTimer_1_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_1_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_1_ISR:
                                        (0090) 
054B: 2E 00 01 OR    [0x0],0x1          (0091)    or   [SleepTimer_1_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
054E: 47 02 FF TST   [0x2],0xFF         (0094)    tst  [SleepTimer_1_bCountDown],0xFF
0551: A0 03    JZ    0x0555             (0095)    jz   .DoTimer
0553: 7A 02    DEC   [0x2]              (0096)    dec  [SleepTimer_1_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
0555: 47 01 FF TST   [0x1],0xFF         (0099)    tst  [SleepTimer_1_bTimerValue],0xFF
0558: A0 03    JZ    0x055C             (0100)    jz   .IncBigCounter
055A: 7A 01    DEC   [0x1]              (0101)    dec  [SleepTimer_1_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_1_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_1_TickCount+3]
                                        (0106)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_1_TickCount+2]
                                        (0109)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_1_TICK_CNTR_SIZE & (0x04|0x02))
                                        (0113)    inc  [SleepTimer_1_TickCount+1]
                                        (0114)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
055C: 76 03    INC   [0x3]              (0117)    inc  [SleepTimer_1_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_1_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
055E: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimer_1INT.asm
                                        (0150) 
FILE: lib\sleeptimer_1.asm              (0001) ;;*****************************************************************************
055F: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer_1.asm
                                        (0004) ;;  Version: 1.0, Updated on 2014/7/14 at 8:15:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_1_EnableInt
                                        (0041) export _SleepTimer_1_EnableInt
                                        (0042) export  SleepTimer_1_DisableInt
                                        (0043) export _SleepTimer_1_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_1_Start
                                        (0046) export _SleepTimer_1_Start
                                        (0047) export  SleepTimer_1_Stop
                                        (0048) export _SleepTimer_1_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_1_TickWait
                                        (0051) export _SleepTimer_1_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_1_SyncWait
                                        (0054) export _SleepTimer_1_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_1_SetInterval
                                        (0057) export _SleepTimer_1_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_1_bGetTickCntr
                                        (0060) export _SleepTimer_1_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_1_SetTimer
                                        (0063) export _SleepTimer_1_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_1_bGetTimer
                                        (0066) export _SleepTimer_1_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_1_iGetTickCntr
                                        (0070) export _SleepTimer_1_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_1_lGetTickCntr
                                        (0075) export _SleepTimer_1_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_1_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_1_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_1_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_1_EnableInt:
                                        (0131) _SleepTimer_1_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
0562: 7F       RET                      (0135)    ret
0563: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_1_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_1_DisableInt:
                                        (0160) _SleepTimer_1_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_1_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_1_Start:
                                        (0195) _SleepTimer_1_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
0566: 50 00    MOV   A,0x0              (0198)    mov  A,0
0568: 53 00    MOV   [0x0],A            (0199)    mov  [SleepTimer_1_fTick],A
056A: 53 01    MOV   [0x1],A            (0200)    mov  [SleepTimer_1_bTimerValue],A
056C: 53 02    MOV   [0x2],A            (0201)    mov  [SleepTimer_1_bCountDown],A
056E: 53 03    MOV   [0x3],A            (0202)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0204)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0209)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
                                        (0210)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
0570: 7F       RET                      (0215)    ret
0571: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_1_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_1_Stop:
                                        (0240) _SleepTimer_1_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_1_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_1_SetInterval:
                                        (0267) _SleepTimer_1_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0269)    and  A,SleepTimer_1_CLOCK_MASK               ; Mask off invalid data
                                        (0270)    mov  X, SP
                                        (0271)    push A
                                        (0272)    M8C_SetBank1
                                        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
                                        (0274)    and  A,~SleepTimer_1_CLOCK_MASK   ; Zero out old timer value
                                        (0275)    or   A, [X]                           ; Set new timer values
                                        (0276)    mov  reg[OSC_CR0],A                   ; Write it
                                        (0277)    M8C_SetBank0
                                        (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_1_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_1_TickWait:
                                        (0312) _SleepTimer_1_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
0574: 55 00 00 MOV   [0x0],0x0          (0315)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
0577: 47 00 FF TST   [0x0],0xFF         (0318)    tst   [SleepTimer_1_fTick],0xFF          ; Check for tick 
057A: AF FC    JZ    0x0577             (0319)    jz    .WaitTick
057C: 55 00 00 MOV   [0x0],0x0          (0320)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
057F: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
0580: BF F6    JNZ   0x0577             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0582: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_1_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_1_SyncWait:
                                        (0363) _SleepTimer_1_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_1_bCountDown
                                        (0366)    swap  A,X
                                        (0367)    AND   A,SleepTimer_1_FORCE_RELOAD
                                        (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
                                        (0371)    tst   [SleepTimer_1_bCountDown],0xFF
                                        (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
                                        (0376)    swap  A,X
                                        (0377)    mov   [SleepTimer_1_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_1_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_1_bGetTickCntr:
                                        (0413) _SleepTimer_1_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0416)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_1_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_1_SetTimer:
                                        (0449) _SleepTimer_1_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0452)    mov   [SleepTimer_1_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_1_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_1_bGetTimer:
                                        (0485) _SleepTimer_1_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0488)    mov   A,[SleepTimer_1_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_1_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_1_iGetTickCntr:
                                        (0524) _SleepTimer_1_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0529)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_1_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_1_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_1_lGetTickCntr:
                                        (0566) _SleepTimer_1_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_1_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_1_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_1_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_1_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2014/7/14 at 8:14:13
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT0DR
                                        (0135) LCD_1_PortMode0:      equ    PRT0DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT0DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0583: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0584: 10       PUSH  X                  (0209)     push  X
0585: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0586: B0 04    JNZ   0x058B             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0588: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0589: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
058A: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
058B: 90 3D    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_WriteData|LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
058D: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
058E: 18       POP   A                  (0220)     pop   A
058F: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0590: DF F2    JNC   _SleepTimer_1_bGetTimer|_LCD_1_PrCString|_SleepTimer_1_SyncWait|_SleepTimer_1_SetTimer|LCD_1_PrCString|_SleepTimer_1_bGetTickCntr(0222)     jnc   .Loop_PrCString
0592: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0593: 8F EF    JMP   _SleepTimer_1_bGetTimer|_LCD_1_PrCString|_SleepTimer_1_SyncWait|_SleepTimer_1_SetTimer|LCD_1_PrCString|_SleepTimer_1_bGetTickCntr(0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
05A5: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
05A6: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
05A7: 67       ASR   A                  (0262)     asr   A
05A8: 67       ASR   A                  (0263)     asr   A
05A9: 67       ASR   A                  (0264)     asr   A
05AA: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
05AC: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
05AE: 90 1A    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_WriteData|LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
05B0: 18       POP   A                  (0268)     pop   A                            ; Restore value
05B1: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
05B3: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
05B5: 90 13    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_WriteData|LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
05B7: 7F       RET                      (0273)     ret
05B8: 70 BF    AND   F,0xBF             
05BA: 60 D3    MOV   REG[0xD3],A        
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0305)     swap  A,X
                                        (0306)     call  LCD_1_PrHexByte              ; Print MSB
                                        (0307)     mov   A,X                          ; Move LSB into position
                                        (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
05BC: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
05BE: A0 06    JZ    0x05C5             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
05C0: 90 08    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_WriteData|LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
05C2: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
05C3: 8F F8    JMP   0x05BC             (0351)     jmp   .Loop_PrString               ; Go get next character
05C5: 70 3F    AND   F,0x3F             
05C7: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
05C9: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
05CA: 90 65    CALL  0x0631             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
05CC: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
05CD: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
05CE: 67       ASR   A                  (0390)     asr   A
05CF: 67       ASR   A                  (0391)     asr   A
05D0: 67       ASR   A                  (0392)     asr   A
05D1: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
05D3: 90 3B    CALL  0x0610             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
05D5: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
05D6: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
05D8: 40       NOP                      (0397)     nop
05D9: 40       NOP                      (0398)     nop
05DA: 40       NOP                      (0399)     nop
05DB: 90 33    CALL  0x0610             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
05DD: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
05DE: 90 51    CALL  0x0631             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
05E0: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
05E1: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
05E2: 67       ASR   A                  (0436)     asr   A
05E3: 67       ASR   A                  (0437)     asr   A
05E4: 67       ASR   A                  (0438)     asr   A
05E5: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
05E7: 90 09    CALL  0x05F2             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
05E9: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
05EA: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
05EC: 40       NOP                      (0443)     nop
05ED: 40       NOP                      (0444)     nop
05EE: 40       NOP                      (0445)     nop
05EF: 90 01    CALL  0x05F2             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
05F1: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
05F2: 08       PUSH  A                  (0477)     push  A
05F3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_0_Data_SHADE           ; Set CUR_PP to LCD variable address
05F6: 26 04 80 AND   [0x4],0x80         (0479)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
05F9: 51 04    MOV   A,[0x4]            (0480)     mov   A,[Port_0_Data_SHADE]
05FB: 60 00    MOV   REG[0x0],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
05FD: 18       POP   A                  (0483)     pop   A
05FE: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0600: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0602: 2A 04    OR    A,[0x4]            (0486)     or    A,[Port_0_Data_SHADE]                  ; OR in bit 7 just
0604: 60 00    MOV   REG[0x0],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0606: 53 04    MOV   [0x4],A            (0488)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
0608: 40       NOP                      (0489)     nop
0609: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
060B: 53 04    MOV   [0x4],A            (0491)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
060D: 60 00    MOV   REG[0x0],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
060F: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0610: 08       PUSH  A                  (0523)     push  A
0611: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_0_Data_SHADE          ; Set CUR_PP to LCD variable address
0614: 26 04 80 AND   [0x4],0x80         (0525)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
0617: 2E 04 20 OR    [0x4],0x20         (0526)     or    [Port_0_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
061A: 51 04    MOV   A,[0x4]            (0527)     mov   A,[Port_0_Data_SHADE]
061C: 60 00    MOV   REG[0x0],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
061E: 18       POP   A                  (0530)     pop   A
061F: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
0621: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
0623: 2A 04    OR    A,[0x4]            (0533)     or    A,[Port_0_Data_SHADE]                       ; Keep shadow in sync
0625: 60 00    MOV   REG[0x0],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
0627: 53 04    MOV   [0x4],A            (0535)     mov   [Port_0_Data_SHADE],A                       ; Keep shadow in sync
0629: 40       NOP                      (0536)     NOP
062A: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
062C: 53 04    MOV   [0x4],A            (0538)     mov   [Port_0_Data_SHADE],A                       ; keep shadow in sync
062E: 60 00    MOV   REG[0x0],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0630: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0631: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0632: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                ; Set CUR_PP to LCD variable address
0635: 26 04 80 AND   [0x4],0x80         (0573)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
0638: 51 04    MOV   A,[0x4]            (0574)     mov   A,[Port_0_Data_SHADE]
063A: 60 00    MOV   REG[0x0],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
063C: 26 06 F0 AND   [0x6],0xF0         (0577)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
063F: 51 06    MOV   A,[0x6]            (0578)     mov   A,[Port_0_DriveMode_0_SHADE]
0641: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0643: 60 00    MOV   REG[0x0],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
0645: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0647: 2E 04 40 OR    [0x4],0x40         (0583)     or    [Port_0_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
064A: 51 04    MOV   A,[0x4]            (0584)     mov   A,[Port_0_Data_SHADE]
064C: 60 00    MOV   REG[0x0],A         (0585)     mov   reg[LCD_1_Port],A
064E: 40       NOP                      (0586)     NOP
                                        (0587) 
064F: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0650: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0652: 2E 04 50 OR    [0x4],0x50         (0592)     or    [Port_0_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
0655: 51 04    MOV   A,[0x4]            (0593)     mov   A,[Port_0_Data_SHADE]
0657: 60 00    MOV   REG[0x0],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
0659: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
065A: 40       NOP                      (0597)     nop
065B: 5D 00    MOV   A,REG[0x0]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
065D: 08       PUSH  A                  (0610)     push  A
065E: 26 04 C0 AND   [0x4],0xC0         (0611)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0661: 51 04    MOV   A,[0x4]            (0612)     mov   A,[Port_0_Data_SHADE]
0663: 60 00    MOV   REG[0x0],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
0665: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0666: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0667: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0668: 2E 04 50 OR    [0x4],0x50         (0619)     or    [Port_0_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
066B: 51 04    MOV   A,[0x4]            (0620)     mov   A,[Port_0_Data_SHADE]
066D: 60 00    MOV   REG[0x0],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
066F: 40       NOP                      (0623)     nop
0670: 40       NOP                      (0624)     nop
                                        (0625) 
0671: 26 04 C0 AND   [0x4],0xC0         (0626)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0674: 51 04    MOV   A,[0x4]            (0627)     mov   A,[Port_0_Data_SHADE]
0676: 60 00    MOV   REG[0x0],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0678: 18       POP   A                  (0630)     pop   A
0679: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
067B: A0 04    JZ    0x0680             (0633)     jz    .UNLOCK
067D: 79       DEC   X                  (0634)     dec   X
067E: BF D3    JNZ   0x0652             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0680: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0681: 2E 06 7F OR    [0x6],0x7F         (0639)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
0684: 51 06    MOV   A,[0x6]            (0640)     mov   A,[Port_0_DriveMode_0_SHADE]
0686: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0688: 60 00    MOV   REG[0x0],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
068A: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
068C: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
068D: 7F       RET                      (0646)     ret
068E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0691: 26 06 80 AND   [0x6],0x80         (0685)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
0694: 2E 06 7F OR    [0x6],0x7F         (0686)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
0697: 26 07 80 AND   [0x7],0x80         (0687)     and   [Port_0_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
069A: 51 06    MOV   A,[0x6]            (0689)     mov   A,[Port_0_DriveMode_0_SHADE]
069C: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
069E: 60 00    MOV   REG[0x0],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
06A0: 51 07    MOV   A,[0x7]            (0692)     mov   A,[Port_0_DriveMode_1_SHADE]
06A2: 60 01    MOV   REG[0x1],A         (0693)     mov   reg[LCD_1_PortMode1],A
06A4: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
06A6: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06A8: 90 67    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
06AA: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06AC: 90 63    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
06AE: 50 03    MOV   A,0x3              (0701)     mov   A,03h
06B0: 9F 40    CALL  0x05F2             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
06B2: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
06B4: 90 5B    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
06B6: 50 03    MOV   A,0x3              (0707)     mov   A,03h
06B8: 9F 38    CALL  0x05F2             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
06BA: 90 63    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
06BC: 90 61    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
06BE: 90 5F    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
06C0: 50 03    MOV   A,0x3              (0714)     mov   A,03h
06C2: 9F 2E    CALL  0x05F2             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
06C4: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06C6: 90 49    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
06C8: 50 02    MOV   A,0x2              (0720)     mov   A,02h
06CA: 9F 26    CALL  0x05F2             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
06CC: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06CE: 90 41    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
06D0: 50 08    MOV   A,0x8              (0726)     mov   A,08h
06D2: 9F 0A    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
06D4: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06D6: 90 39    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
06D8: 50 01    MOV   A,0x1              (0731)     mov   A,01h
06DA: 9F 02    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
06DC: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06DE: 90 31    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
06E0: 50 06    MOV   A,0x6              (0736)     mov   A,06h
06E2: 9E FA    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
06E4: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
06E6: 9E F6    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
06E8: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
06EA: 9E F2    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
06EC: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
06EE: 9E EE    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
06F0: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
06F2: 9E EA    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
06F4: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
06F6: 9E E6    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
06F8: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06FA: 90 15    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
06FC: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0701: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0703: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0704: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
0706: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0707: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0709: 20       POP   X                  (0795)     pop   X
                                        (0796) 
070A: 9E D2    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
070C: 70 3F    AND   F,0x3F             
070E: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0710: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0711: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0713: 78       DEC   A                  (0828)     dec   A
0714: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0716: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
071F: 08       PUSH  A                  (0871)     push  A
0720: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0722: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0724: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0726: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0728: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
072A: D0 06    JNC   0x0731             (0877)     jnc   .Delay50u_End
072C: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
072E: 78       DEC   A                  (0880)     dec   A                              ; [4]
072F: BF FE    JNZ   0x072E             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0731: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0732: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_1_Control                ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_1_WriteData              ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_1_Control                ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_1_WriteData              ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_1_Control                ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_1_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_1_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_1_DISP_ON
                                        (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\cs.asm                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   CS.asm
                                        (0004) ;;  Version: 1.40, Updated on 2014/7/14 at 8:14:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "CS.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _CS_Start
                                        (0027) export  CS_Start
                                        (0028) 
                                        (0029) export _CS_Stop
                                        (0030) export  CS_Stop
                                        (0031) 
                                        (0032) export _CS_On
                                        (0033) export  CS_On
                                        (0034) 
                                        (0035) export _CS_Off
                                        (0036) export  CS_Off
                                        (0037) 
                                        (0038) export _CS_Switch
                                        (0039) export  CS_Switch
                                        (0040) 
                                        (0041) export _CS_Invert
                                        (0042) export  CS_Invert
                                        (0043) 
                                        (0044) export _CS_GetState
                                        (0045) export  CS_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: CS_Start(void)
                                        (0054) ;  FUNCTION NAME: CS_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: CS_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _CS_On:
                                        (0079)  CS_On:
0741: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0743: 80 03    JMP   _CS_Switch         (0081)    jmp  CS_Switch 
                                        (0082) 
                                        (0083) _CS_Start:
                                        (0084)  CS_Start:
                                        (0085) _CS_Stop:
                                        (0086)  CS_Stop:
                                        (0087) _CS_Off:
                                        (0088)  CS_Off:
0745: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0747: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _CS_Switch:
                                        (0092)  CS_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
074A: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
074C: A0 06    JZ    0x0753             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_2_Data_SHADE],CS_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
074E: 26 05 F7 AND   [0x5],0xF7         (0104)    and  [Port_2_Data_SHADE],~CS_PinMask
                                        (0105) ENDIF
0751: 80 04    JMP   0x0756             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_2_Data_SHADE],~CS_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0753: 2E 05 08 OR    [0x5],0x8          (0112)    or   [Port_2_Data_SHADE],CS_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0756: 51 05    MOV   A,[0x5]            (0116)    mov  A,[Port_2_Data_SHADE]
0758: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[CS_PortDR],A
075A: 70 3F    AND   F,0x3F             
075C: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
075E: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: CS_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _CS_Invert:
                                        (0144)  CS_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
                                        (0149)    xor  [Port_2_Data_SHADE],CS_PinMask
                                        (0150)    mov  A,[Port_2_Data_SHADE]
                                        (0151)    mov  reg[CS_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: CS_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _CS_GetState:
                                        (0177)  CS_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
                                        (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
                                        (0188)    and   A,CS_PinMask                  ; Mask off the trash
                                        (0189)    jz    .End_LED_GS                   ; If zero, we're done
                                        (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0195)    ret
                                        (0196) .ENDSECTION
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\STEPPI~1\STEPPI~1\STEPPI~1\l6470.c
(0001) 
(0002) #include <m8c.h>
(0003) #include "PSoCAPI.h"
(0004) #include "L6470.h"
(0005) 
(0006) #pragma interrupt_handler _SPIM_ISR
(0007) void _SPIM_ISR(void)
(0008) {
CS_GetState|CS_Invert|__UserModules_end|__SPIM_ISR|__text_start|__SPIM_ISR:
    075F: 71 C0    OR    F,0xC0
    0761: 08       PUSH  A
    0762: 5D D0    MOV   A,REG[0xD0]
    0764: 08       PUSH  A
    0765: 5D D3    MOV   A,REG[0xD3]
    0767: 08       PUSH  A
    0768: 5D D4    MOV   A,REG[0xD4]
    076A: 08       PUSH  A
    076B: 5D D5    MOV   A,REG[0xD5]
    076D: 08       PUSH  A
    076E: 62 D0 00 MOV   REG[0xD0],0x0
    0771: 51 4F    MOV   A,[__r0]
    0773: 08       PUSH  A
    0774: 51 4E    MOV   A,[__r1]
    0776: 08       PUSH  A
    0777: 51 4D    MOV   A,[__r2]
    0779: 08       PUSH  A
    077A: 51 4C    MOV   A,[__r3]
    077C: 08       PUSH  A
    077D: 51 4B    MOV   A,[__r4]
    077F: 08       PUSH  A
    0780: 51 4A    MOV   A,[__r5]
    0782: 08       PUSH  A
    0783: 51 49    MOV   A,[__r6]
    0785: 08       PUSH  A
    0786: 51 48    MOV   A,[__r7]
    0788: 08       PUSH  A
    0789: 51 47    MOV   A,[__r8]
    078B: 08       PUSH  A
    078C: 51 46    MOV   A,[__r9]
    078E: 08       PUSH  A
    078F: 51 45    MOV   A,[__r10]
    0791: 08       PUSH  A
    0792: 51 44    MOV   A,[__r11]
    0794: 08       PUSH  A
    0795: 51 43    MOV   A,[__rX]
    0797: 08       PUSH  A
    0798: 51 42    MOV   A,[__rY]
    079A: 08       PUSH  A
    079B: 51 41    MOV   A,[__rZ]
    079D: 08       PUSH  A
(0009) 	CS_Off();
    079E: 10       PUSH  X
    079F: 7C 07 45 LCALL _CS_Off|_CS_Start|_CS_Stop|CS_Start|CS_Stop
    07A2: 20       POP   X
    07A3: 62 D0 00 MOV   REG[0xD0],0x0
    07A6: 18       POP   A
    07A7: 53 41    MOV   [__rZ],A
    07A9: 18       POP   A
    07AA: 53 42    MOV   [__rY],A
    07AC: 18       POP   A
    07AD: 53 43    MOV   [__rX],A
    07AF: 18       POP   A
    07B0: 53 44    MOV   [__r11],A
    07B2: 18       POP   A
    07B3: 53 45    MOV   [__r10],A
    07B5: 18       POP   A
    07B6: 53 46    MOV   [__r9],A
    07B8: 18       POP   A
    07B9: 53 47    MOV   [__r8],A
    07BB: 18       POP   A
    07BC: 53 48    MOV   [__r7],A
    07BE: 18       POP   A
    07BF: 53 49    MOV   [__r6],A
    07C1: 18       POP   A
    07C2: 53 4A    MOV   [__r5],A
    07C4: 18       POP   A
    07C5: 53 4B    MOV   [__r4],A
    07C7: 18       POP   A
    07C8: 53 4C    MOV   [__r3],A
    07CA: 18       POP   A
    07CB: 53 4D    MOV   [__r2],A
    07CD: 18       POP   A
    07CE: 53 4E    MOV   [__r1],A
    07D0: 18       POP   A
    07D1: 53 4F    MOV   [__r0],A
    07D3: 18       POP   A
    07D4: 60 D5    MOV   REG[0xD5],A
    07D6: 18       POP   A
    07D7: 60 D4    MOV   REG[0xD4],A
    07D9: 18       POP   A
    07DA: 60 D3    MOV   REG[0xD3],A
    07DC: 18       POP   A
    07DD: 60 D0    MOV   REG[0xD0],A
    07DF: 18       POP   A
    07E0: 7E       RETI  
(0010) }
(0011) 
(0012) BYTE SPI_transceiver(BYTE data)
(0013) {
_SPI_transceiver:
  data                 --> X-4
    07E1: 10       PUSH  X
    07E2: 4F       MOV   X,SP
(0014) 	while (!(SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE));
    07E3: 10       PUSH  X
    07E4: 7C 05 48 LCALL _SPIM_1_bReadStatus|_bSPIM_1_ReadStatus|bSPIM_1_ReadStatus
    07E7: 20       POP   X
    07E8: 62 D0 00 MOV   REG[0xD0],0x0
    07EB: 53 4F    MOV   [__r0],A
    07ED: 47 4F 20 TST   [__r0],0x20
    07F0: AF F2    JZ    0x07E3
(0015) 	CS_On();
    07F2: 10       PUSH  X
    07F3: 7C 07 41 LCALL _CS_On|_LCD_1_InitBG
    07F6: 20       POP   X
(0016) 	SPIM_1_SendTxData(data);
    07F7: 10       PUSH  X
    07F8: 52 FC    MOV   A,[X-4]
    07FA: 7C 05 42 LCALL SPIM_1_SendTxData|_SPIM_1_Stop|_SPIM_1_SendTxData
(0017) 	return SPIM_1_bReadRxData();
    07FD: 7C 05 45 LCALL _SPIM_1_bReadRxData|bSPIM_1_ReadRxData|_bSPIM_1_ReadRxData
    0800: 20       POP   X
    0801: 62 D0 00 MOV   REG[0xD0],0x0
    0804: 20       POP   X
    0805: 7F       RET   
(0018) }
(0019) 
(0020) void L6470_SetKVAL(enum L6470_KVAL_Reg kval, BYTE param)
(0021) {
_L6470_SetKVAL:
  param                --> X-5
  kval                 --> X-4
    0806: 10       PUSH  X
    0807: 4F       MOV   X,SP
(0022) 	SPI_transceiver(kval);
    0808: 52 FC    MOV   A,[X-4]
    080A: 08       PUSH  A
    080B: 9F D4    CALL  _SPI_transceiver
    080D: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 	SPI_transceiver(param);
    0810: 52 FB    MOV   A,[X-5]
    0812: 08       PUSH  A
    0813: 9F CC    CALL  _SPI_transceiver
    0815: 38 FE    ADD   SP,0xFE
    0817: 62 D0 00 MOV   REG[0xD0],0x0
    081A: 20       POP   X
    081B: 7F       RET   
(0024) }
(0025) 
(0026) void L6470_SetStepMode()
(0027) {}
_L6470_SetStepMode:
    081C: 7F       RET   
(0028) 
(0029) void L6470_Run(LONG speed)
(0030) {
_L6470_Run:
  speed                --> X-7
    081D: 10       PUSH  X
    081E: 4F       MOV   X,SP
(0031) 	if (speed < 0)
    081F: 52 FC    MOV   A,[X-4]
    0821: 11 00    SUB   A,0x0
    0823: 52 FB    MOV   A,[X-5]
    0825: 19 00    SBB   A,0x0
    0827: 52 FA    MOV   A,[X-6]
    0829: 19 00    SBB   A,0x0
    082B: 52 F9    MOV   A,[X-7]
    082D: 31 80    XOR   A,0x80
    082F: 19 80    SBB   A,0x80
    0831: D0 30    JNC   0x0862
(0032) 	{
(0033) 		SPI_transceiver(0x51);
    0833: 50 51    MOV   A,0x51
    0835: 08       PUSH  A
    0836: 9F A9    CALL  _SPI_transceiver
    0838: 38 FF    ADD   SP,0xFF
    083A: 62 D0 00 MOV   REG[0xD0],0x0
(0034) 		speed *= -1;
    083D: 52 F9    MOV   A,[X-7]
    083F: 08       PUSH  A
    0840: 52 FA    MOV   A,[X-6]
    0842: 08       PUSH  A
    0843: 52 FB    MOV   A,[X-5]
    0845: 08       PUSH  A
    0846: 52 FC    MOV   A,[X-4]
    0848: 08       PUSH  A
    0849: 50 FF    MOV   A,0xFF
    084B: 08       PUSH  A
    084C: 08       PUSH  A
    084D: 08       PUSH  A
    084E: 08       PUSH  A
    084F: 7C 1B 99 LCALL 0x1B99
    0852: 38 FC    ADD   SP,0xFC
    0854: 18       POP   A
    0855: 54 FC    MOV   [X-4],A
    0857: 18       POP   A
    0858: 54 FB    MOV   [X-5],A
    085A: 18       POP   A
    085B: 54 FA    MOV   [X-6],A
    085D: 18       POP   A
    085E: 54 F9    MOV   [X-7],A
(0035) 	}
    0860: 80 0B    JMP   0x086C
(0036) 	else
(0037) 		SPI_transceiver(0x50);
    0862: 50 50    MOV   A,0x50
    0864: 08       PUSH  A
    0865: 9F 7A    CALL  _SPI_transceiver
    0867: 38 FF    ADD   SP,0xFF
    0869: 62 D0 00 MOV   REG[0xD0],0x0
(0038) 	
(0039) 	SPI_transceiver((speed >> 16) & 0x0f);
    086C: 62 D0 00 MOV   REG[0xD0],0x0
    086F: 52 F9    MOV   A,[X-7]
    0871: 53 4F    MOV   [__r0],A
    0873: 52 FA    MOV   A,[X-6]
    0875: 53 4E    MOV   [__r1],A
    0877: 52 FB    MOV   A,[X-5]
    0879: 53 4D    MOV   [__r2],A
    087B: 52 FC    MOV   A,[X-4]
    087D: 53 4C    MOV   [__r3],A
    087F: 50 10    MOV   A,0x10
    0881: 7C 32 6D LCALL 0x326D
    0884: 26 4C 0F AND   [__r3],0xF
    0887: 51 4C    MOV   A,[__r3]
    0889: 08       PUSH  A
    088A: 9F 55    CALL  _SPI_transceiver
    088C: 38 FF    ADD   SP,0xFF
    088E: 62 D0 00 MOV   REG[0xD0],0x0
(0040) 	SPI_transceiver((speed >> 8) & 0xff);
    0891: 52 F9    MOV   A,[X-7]
    0893: 53 4F    MOV   [__r0],A
    0895: 52 FA    MOV   A,[X-6]
    0897: 53 4E    MOV   [__r1],A
    0899: 52 FB    MOV   A,[X-5]
    089B: 53 4D    MOV   [__r2],A
    089D: 52 FC    MOV   A,[X-4]
    089F: 53 4C    MOV   [__r3],A
    08A1: 50 08    MOV   A,0x8
    08A3: 7C 32 6D LCALL 0x326D
    08A6: 51 4C    MOV   A,[__r3]
    08A8: 08       PUSH  A
    08A9: 9F 36    CALL  _SPI_transceiver
    08AB: 62 D0 00 MOV   REG[0xD0],0x0
(0041) 	SPI_transceiver(speed & 0xff);
    08AE: 52 FC    MOV   A,[X-4]
    08B0: 08       PUSH  A
    08B1: 9F 2E    CALL  _SPI_transceiver
    08B3: 38 FE    ADD   SP,0xFE
    08B5: 62 D0 00 MOV   REG[0xD0],0x0
    08B8: 20       POP   X
    08B9: 7F       RET   
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\STEPPI~1\STEPPI~1\STEPPI~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdio.h>
(0008) #include "L6470.h"
(0009) 
(0010) void LCD_print(char *str);
(0011) void LCD_cprint(const char *str);
(0012) 
(0013) void main(void)
(0014) {
_main:
  str                  --> X+5
  i                    --> X+4
  j                    --> X+0
    08BA: 10       PUSH  X
    08BB: 4F       MOV   X,SP
    08BC: 38 16    ADD   SP,0x16
(0015) 	BYTE i = 0xff;
    08BE: 56 04 FF MOV   [X+4],0xFF
(0016) 	LONG j;
(0017) 	M8C_EnableGInt;
    08C1: 71 01    OR    F,0x1
(0018) 	
(0019) 	CS_Start();
    08C3: 10       PUSH  X
    08C4: 7C 07 45 LCALL _CS_Off|_CS_Start|_CS_Stop|CS_Start|CS_Stop
(0020) 	CS_Off();
    08C7: 7C 07 45 LCALL _CS_Off|_CS_Start|_CS_Stop|CS_Start|CS_Stop
(0021) 	
(0022) 	SPIM_1_EnableInt();
    08CA: 7C 05 39 LCALL _SPIM_1_EnableInt
(0023) 	SPIM_1_Start(SPIM_1_SPIM_MODE_0 | SPIM_1_SPIM_MSB_FIRST);
    08CD: 50 00    MOV   A,0x0
    08CF: 7C 05 3D LCALL _SPIM_1_Start|_SPIM_1_DisableInt|SPIM_1_Start
(0024) 	SPIM_1_SendTxData(0);
    08D2: 50 00    MOV   A,0x0
    08D4: 7C 05 42 LCALL SPIM_1_SendTxData|_SPIM_1_Stop|_SPIM_1_SendTxData
(0025) 	
(0026) 	SleepTimer_1_EnableInt();
    08D7: 7C 05 5F LCALL _SleepTimer_1_EnableInt
(0027) 	SleepTimer_1_Start();
    08DA: 7C 05 63 LCALL _SleepTimer_1_DisableInt|_SleepTimer_1_Start|SleepTimer_1_Start
(0028) 	
(0029) 	LCD_1_Start();
    08DD: 7C 06 8E LCALL LCD_1_Start|LCD_1_Init|_LCD_1_Init|_LCD_1_Start
    08E0: 20       POP   X
(0030) 	LCD_cprint("PSoC Start");
    08E1: 50 01    MOV   A,0x1
    08E3: 08       PUSH  A
    08E4: 50 CB    MOV   A,0xCB
    08E6: 08       PUSH  A
    08E7: 91 B1    CALL  _LCD_cprint
(0031) 
(0032) 	LCD_cprint("Send Command");
    08E9: 50 01    MOV   A,0x1
    08EB: 08       PUSH  A
    08EC: 50 BE    MOV   A,0xBE
    08EE: 08       PUSH  A
    08EF: 91 A9    CALL  _LCD_cprint
    08F1: 38 FC    ADD   SP,0xFC
(0033) 	L6470_SetKVAL(L6470_KVAL_RUN, 0xff);
    08F3: 50 FF    MOV   A,0xFF
    08F5: 08       PUSH  A
    08F6: 50 0A    MOV   A,0xA
    08F8: 08       PUSH  A
    08F9: 7C 08 06 LCALL _L6470_SetKVAL
(0034) 	L6470_SetKVAL(L6470_KVAL_ACC, 0xff);
    08FC: 50 FF    MOV   A,0xFF
    08FE: 08       PUSH  A
    08FF: 50 0B    MOV   A,0xB
    0901: 08       PUSH  A
    0902: 7C 08 06 LCALL _L6470_SetKVAL
    0905: 38 FC    ADD   SP,0xFC
(0035) 	L6470_SetKVAL(L6470_KVAL_DEC, 0xff);
    0907: 50 FF    MOV   A,0xFF
    0909: 08       PUSH  A
    090A: 50 0C    MOV   A,0xC
    090C: 08       PUSH  A
    090D: 7C 08 06 LCALL _L6470_SetKVAL
(0036) 	L6470_SetKVAL(L6470_KVAL_HOLD, 0xff);
    0910: 50 FF    MOV   A,0xFF
    0912: 08       PUSH  A
    0913: 50 09    MOV   A,0x9
    0915: 08       PUSH  A
    0916: 7C 08 06 LCALL _L6470_SetKVAL
    0919: 38 FC    ADD   SP,0xFC
(0037) 	SPI_transceiver(0xa8);
    091B: 50 A8    MOV   A,0xA8
    091D: 08       PUSH  A
    091E: 7C 07 E1 LCALL _SPI_transceiver
    0921: 62 D0 00 MOV   REG[0xD0],0x0
(0038) 	i = 0x00;
    0924: 56 04 00 MOV   [X+4],0x0
(0039) 	L6470_Run(20000);
    0927: 50 00    MOV   A,0x0
    0929: 08       PUSH  A
    092A: 08       PUSH  A
    092B: 50 4E    MOV   A,0x4E
    092D: 08       PUSH  A
    092E: 50 20    MOV   A,0x20
    0930: 08       PUSH  A
    0931: 7C 08 1D LCALL _L6470_Run
    0934: 38 FB    ADD   SP,0xFB
(0040) 	i = 128;
    0936: 56 04 80 MOV   [X+4],0x80
(0041) 	SleepTimer_1_TickWait(i);
    0939: 10       PUSH  X
    093A: 52 04    MOV   A,[X+4]
    093C: 7C 05 71 LCALL _SleepTimer_1_SetInterval|_SleepTimer_1_TickWait|SleepTimer_1_TickWait|_SleepTimer_1_Stop
    093F: 20       POP   X
(0042) 	L6470_Run(30000);
    0940: 50 00    MOV   A,0x0
    0942: 08       PUSH  A
    0943: 08       PUSH  A
    0944: 50 75    MOV   A,0x75
    0946: 08       PUSH  A
    0947: 50 30    MOV   A,0x30
    0949: 08       PUSH  A
    094A: 7C 08 1D LCALL _L6470_Run
    094D: 38 FC    ADD   SP,0xFC
(0043) 	SleepTimer_1_TickWait(i);
    094F: 10       PUSH  X
    0950: 52 04    MOV   A,[X+4]
    0952: 7C 05 71 LCALL _SleepTimer_1_SetInterval|_SleepTimer_1_TickWait|SleepTimer_1_TickWait|_SleepTimer_1_Stop
    0955: 20       POP   X
(0044) 	L6470_Run(35000);
    0956: 50 00    MOV   A,0x0
    0958: 08       PUSH  A
    0959: 08       PUSH  A
    095A: 50 88    MOV   A,0x88
    095C: 08       PUSH  A
    095D: 50 B8    MOV   A,0xB8
    095F: 08       PUSH  A
    0960: 7C 08 1D LCALL _L6470_Run
    0963: 38 FC    ADD   SP,0xFC
(0045) 	SleepTimer_1_TickWait(i);
    0965: 10       PUSH  X
    0966: 52 04    MOV   A,[X+4]
    0968: 7C 05 71 LCALL _SleepTimer_1_SetInterval|_SleepTimer_1_TickWait|SleepTimer_1_TickWait|_SleepTimer_1_Stop
    096B: 20       POP   X
(0046) 	L6470_Run(40000);
    096C: 50 00    MOV   A,0x0
    096E: 08       PUSH  A
    096F: 08       PUSH  A
    0970: 50 9C    MOV   A,0x9C
    0972: 08       PUSH  A
    0973: 50 40    MOV   A,0x40
    0975: 08       PUSH  A
    0976: 7C 08 1D LCALL _L6470_Run
    0979: 38 FC    ADD   SP,0xFC
(0047) 	SleepTimer_1_TickWait(i);
    097B: 10       PUSH  X
    097C: 52 04    MOV   A,[X+4]
    097E: 7C 05 71 LCALL _SleepTimer_1_SetInterval|_SleepTimer_1_TickWait|SleepTimer_1_TickWait|_SleepTimer_1_Stop
    0981: 20       POP   X
(0048) 	j = 40000;
    0982: 56 00 00 MOV   [X+0],0x0
    0985: 56 01 00 MOV   [X+1],0x0
    0988: 56 02 9C MOV   [X+2],0x9C
    098B: 56 03 40 MOV   [X+3],0x40
(0049) 	i = 16;
    098E: 56 04 10 MOV   [X+4],0x10
    0991: 80 86    JMP   0x0A18
(0050) 	while (1)
(0051) 	{
(0052) 		char str[17] = {0};
    0993: 62 D0 00 MOV   REG[0xD0],0x0
    0996: 55 4E A0 MOV   [__r1],0xA0
    0999: 55 4F 01 MOV   [__r0],0x1
    099C: 5A 4C    MOV   [__r3],X
    099E: 06 4C 05 ADD   [__r3],0x5
    09A1: 62 D5 07 MOV   REG[0xD5],0x7
    09A4: 10       PUSH  X
    09A5: 55 43 00 MOV   [__rX],0x0
    09A8: 51 4F    MOV   A,[__r0]
    09AA: 58 4E    MOV   X,[__r1]
    09AC: 08       PUSH  A
    09AD: 28       ROMX  
    09AE: 62 D0 00 MOV   REG[0xD0],0x0
    09B1: 3F 4C    MVI   [__r3],A
    09B3: 18       POP   A
    09B4: 75       INC   X
    09B5: 09 00    ADC   A,0x0
    09B7: 76 43    INC   [__rX]
    09B9: 3C 43 11 CMP   [__rX],0x11
    09BC: BF EF    JNZ   0x09AC
    09BE: 20       POP   X
(0053) 		L6470_Run(j);
    09BF: 52 00    MOV   A,[X+0]
    09C1: 08       PUSH  A
    09C2: 52 01    MOV   A,[X+1]
    09C4: 08       PUSH  A
    09C5: 52 02    MOV   A,[X+2]
    09C7: 08       PUSH  A
    09C8: 52 03    MOV   A,[X+3]
    09CA: 08       PUSH  A
    09CB: 7C 08 1D LCALL _L6470_Run
    09CE: 38 FC    ADD   SP,0xFC
(0054) 		csprintf(str, "%ld", j);
    09D0: 52 00    MOV   A,[X+0]
    09D2: 08       PUSH  A
    09D3: 52 01    MOV   A,[X+1]
    09D5: 08       PUSH  A
    09D6: 52 02    MOV   A,[X+2]
    09D8: 08       PUSH  A
    09D9: 52 03    MOV   A,[X+3]
    09DB: 08       PUSH  A
    09DC: 50 01    MOV   A,0x1
    09DE: 08       PUSH  A
    09DF: 50 BA    MOV   A,0xBA
    09E1: 08       PUSH  A
    09E2: 62 D0 00 MOV   REG[0xD0],0x0
    09E5: 5A 4E    MOV   [__r1],X
    09E7: 06 4E 05 ADD   [__r1],0x5
    09EA: 50 07    MOV   A,0x7
    09EC: 08       PUSH  A
    09ED: 51 4E    MOV   A,[__r1]
    09EF: 08       PUSH  A
    09F0: 7C 30 75 LCALL _csprintf
(0055) 		LCD_print(str);
    09F3: 62 D0 00 MOV   REG[0xD0],0x0
    09F6: 5A 4E    MOV   [__r1],X
    09F8: 06 4E 05 ADD   [__r1],0x5
    09FB: 50 07    MOV   A,0x7
    09FD: 08       PUSH  A
    09FE: 51 4E    MOV   A,[__r1]
    0A00: 08       PUSH  A
    0A01: 90 1E    CALL  _LCD_print
    0A03: 38 F6    ADD   SP,0xF6
(0056) 		SleepTimer_1_TickWait(i);
    0A05: 10       PUSH  X
    0A06: 52 04    MOV   A,[X+4]
    0A08: 7C 05 71 LCALL _SleepTimer_1_SetInterval|_SleepTimer_1_TickWait|SleepTimer_1_TickWait|_SleepTimer_1_Stop
    0A0B: 20       POP   X
(0057) 		j += 1;
    0A0C: 07 03 01 ADD   [X+3],0x1
    0A0F: 0F 02 00 ADC   [X+2],0x0
    0A12: 0F 01 00 ADC   [X+1],0x0
    0A15: 0F 00 00 ADC   [X+0],0x0
(0058) 	}
    0A18: 8F 7A    JMP   0x0993
(0059) 	
(0060) 	LCD_cprint("Complete");
(0061) 	while (1);
    0A1A: 8F FF    JMP   0x0A1A
    0A1C: 38 EA    ADD   SP,0xEA
    0A1E: 20       POP   X
    0A1F: 8F FF    JMP   0x0A1F
(0062) }
(0063) 
(0064) 
(0065) char lcdStr[17] = {0};
(0066) 
(0067) void LCD_print(char *str)
(0068) {
_LCD_print:
  i                    --> X+0
  str                  --> X-5
    0A21: 10       PUSH  X
    0A22: 4F       MOV   X,SP
    0A23: 38 01    ADD   SP,0x1
(0069) 	BYTE i;
(0070) 	LCD_1_Control(LCD_1_DISP_CLEAR_HOME);
    0A25: 10       PUSH  X
    0A26: 50 01    MOV   A,0x1
    0A28: 7C 05 DE LCALL _LCD_1_Control
(0071) 	LCD_1_Delay50uTimes(10);
    0A2B: 50 0A    MOV   A,0xA
    0A2D: 7C 07 11 LCALL _LCD_1_Delay50uTimes
    0A30: 20       POP   X
(0072) 	LCD_1_PrString(str);
    0A31: 10       PUSH  X
    0A32: 52 FB    MOV   A,[X-5]
    0A34: 08       PUSH  A
    0A35: 52 FC    MOV   A,[X-4]
    0A37: 5C       MOV   X,A
    0A38: 18       POP   A
    0A39: 7C 05 B8 LCALL _LCD_1_PrString|_LCD_1_PrHexInt
(0073) 	LCD_1_Position(1, 0);
    0A3C: 57 00    MOV   X,0x0
    0A3E: 50 01    MOV   A,0x1
    0A40: 7C 07 01 LCALL _LCD_1_Position
(0074) 	LCD_1_PrString(lcdStr);
    0A43: 50 00    MOV   A,0x0
    0A45: 08       PUSH  A
    0A46: 50 21    MOV   A,0x21
    0A48: 5C       MOV   X,A
    0A49: 18       POP   A
    0A4A: 7C 05 B8 LCALL _LCD_1_PrString|_LCD_1_PrHexInt
    0A4D: 20       POP   X
(0075) 	for (i = 0; i < sizeof(lcdStr); i++)
    0A4E: 56 00 00 MOV   [X+0],0x0
    0A51: 80 3F    JMP   0x0A91
(0076) 	{
(0077) 		lcdStr[i] = str[i];
    0A53: 62 D0 00 MOV   REG[0xD0],0x0
    0A56: 52 00    MOV   A,[X+0]
    0A58: 53 4E    MOV   [__r1],A
    0A5A: 55 4F 00 MOV   [__r0],0x0
    0A5D: 7C 31 79 LCALL 0x3179
    0A60: 60 D4    MOV   REG[0xD4],A
    0A62: 3E 4E    MVI   A,[__r1]
    0A64: 53 4F    MOV   [__r0],A
    0A66: 52 00    MOV   A,[X+0]
    0A68: 53 4C    MOV   [__r3],A
    0A6A: 55 4D 00 MOV   [__r2],0x0
    0A6D: 06 4C 21 ADD   [__r3],0x21
    0A70: 0E 4D 00 ADC   [__r2],0x0
    0A73: 51 4D    MOV   A,[__r2]
    0A75: 60 D5    MOV   REG[0xD5],A
    0A77: 51 4F    MOV   A,[__r0]
    0A79: 3F 4C    MVI   [__r3],A
(0078) 		if (str[i] == 0)
    0A7B: 52 00    MOV   A,[X+0]
    0A7D: 53 4E    MOV   [__r1],A
    0A7F: 55 4F 00 MOV   [__r0],0x0
    0A82: 7C 31 79 LCALL 0x3179
    0A85: 60 D4    MOV   REG[0xD4],A
    0A87: 3E 4E    MVI   A,[__r1]
    0A89: 39 00    CMP   A,0x0
    0A8B: B0 03    JNZ   0x0A8F
(0079) 			break;
    0A8D: 80 08    JMP   0x0A96
(0080) 	}
    0A8F: 77 00    INC   [X+0]
    0A91: 3D 00 11 CMP   [X+0],0x11
    0A94: CF BE    JC    0x0A53
    0A96: 38 FF    ADD   SP,0xFF
    0A98: 20       POP   X
    0A99: 7F       RET   
(0081) }
(0082) 
(0083) void LCD_cprint(const char *str)
(0084) {
_LCD_cprint:
  i                    --> X+0
  str                  --> X-5
    0A9A: 10       PUSH  X
    0A9B: 4F       MOV   X,SP
    0A9C: 38 01    ADD   SP,0x1
(0085) 	BYTE i;
(0086) 	LCD_1_Control(LCD_1_DISP_CLEAR_HOME);
    0A9E: 10       PUSH  X
    0A9F: 50 01    MOV   A,0x1
    0AA1: 7C 05 DE LCALL _LCD_1_Control
(0087) 	LCD_1_Delay50uTimes(10);
    0AA4: 50 0A    MOV   A,0xA
    0AA6: 7C 07 11 LCALL _LCD_1_Delay50uTimes
    0AA9: 20       POP   X
(0088) 	LCD_1_PrCString(str);
    0AAA: 10       PUSH  X
    0AAB: 52 FB    MOV   A,[X-5]
    0AAD: 08       PUSH  A
    0AAE: 52 FC    MOV   A,[X-4]
    0AB0: 5C       MOV   X,A
    0AB1: 18       POP   A
    0AB2: 7C 05 83 LCALL _SleepTimer_1_bGetTimer|_LCD_1_PrCString|_SleepTimer_1_SyncWait|_SleepTimer_1_SetTimer|LCD_1_PrCString|_SleepTimer_1_bGetTickCntr
(0089) 	LCD_1_Position(1, 0);
    0AB5: 57 00    MOV   X,0x0
    0AB7: 50 01    MOV   A,0x1
    0AB9: 7C 07 01 LCALL _LCD_1_Position
(0090) 	LCD_1_PrString(lcdStr);
    0ABC: 50 00    MOV   A,0x0
    0ABE: 08       PUSH  A
    0ABF: 50 21    MOV   A,0x21
    0AC1: 5C       MOV   X,A
    0AC2: 18       POP   A
    0AC3: 7C 05 B8 LCALL _LCD_1_PrString|_LCD_1_PrHexInt
    0AC6: 20       POP   X
(0091) 	for (i = 0; i < sizeof(lcdStr); i++)
    0AC7: 56 00 00 MOV   [X+0],0x0
    0ACA: 80 41    JMP   0x0B0C
(0092) 	{
(0093) 		lcdStr[i] = str[i];
    0ACC: 62 D0 00 MOV   REG[0xD0],0x0
    0ACF: 52 00    MOV   A,[X+0]
    0AD1: 53 4E    MOV   [__r1],A
    0AD3: 55 4F 00 MOV   [__r0],0x0
    0AD6: 7C 31 79 LCALL 0x3179
    0AD9: 10       PUSH  X
    0ADA: 58 4E    MOV   X,[__r1]
    0ADC: 28       ROMX  
    0ADD: 20       POP   X
    0ADE: 53 4F    MOV   [__r0],A
    0AE0: 52 00    MOV   A,[X+0]
    0AE2: 53 4C    MOV   [__r3],A
    0AE4: 55 4D 00 MOV   [__r2],0x0
    0AE7: 06 4C 21 ADD   [__r3],0x21
    0AEA: 0E 4D 00 ADC   [__r2],0x0
    0AED: 51 4D    MOV   A,[__r2]
    0AEF: 60 D5    MOV   REG[0xD5],A
    0AF1: 51 4F    MOV   A,[__r0]
    0AF3: 3F 4C    MVI   [__r3],A
(0094) 		if (str[i] == 0)
    0AF5: 52 00    MOV   A,[X+0]
    0AF7: 53 4E    MOV   [__r1],A
    0AF9: 55 4F 00 MOV   [__r0],0x0
    0AFC: 7C 31 79 LCALL 0x3179
    0AFF: 10       PUSH  X
    0B00: 58 4E    MOV   X,[__r1]
    0B02: 28       ROMX  
    0B03: 20       POP   X
    0B04: 39 00    CMP   A,0x0
    0B06: B0 03    JNZ   0x0B0A
(0095) 			break;
    0B08: 80 08    JMP   0x0B11
(0096) 	}
    0B0A: 77 00    INC   [X+0]
    0B0C: 3D 00 11 CMP   [X+0],0x11
(0097) }
    0B0F: CF BC    JC    0x0ACC
    0B11: 38 FF    ADD   SP,0xFF
    0B13: 20       POP   X
    0B14: 7F       RET   
__cprint:
    0B15: 10       PUSH  X
    0B16: 4F       MOV   X,SP
    0B17: 38 21    ADD   SP,0x21
    0B19: 56 09 00 MOV   [X+9],0x0
    0B1C: 56 08 00 MOV   [X+8],0x0
    0B1F: 7D 15 AE LJMP  0x15AE
    0B22: 7C 30 FC LCALL 0x30FC
    0B25: 39 25    CMP   A,0x25
    0B27: A0 1C    JZ    0x0B44
    0B29: 7C 31 0B LCALL 0x310B
    0B2C: 10       PUSH  X
    0B2D: 08       PUSH  A
    0B2E: 52 FC    MOV   A,[X-4]
    0B30: 53 4E    MOV   [__r1],A
    0B32: 52 FB    MOV   A,[X-5]
    0B34: 58 4E    MOV   X,[__r1]
    0B36: 7C 1C 69 LCALL __plcall
    0B39: 38 FF    ADD   SP,0xFF
    0B3B: 20       POP   X
    0B3C: 77 09    INC   [X+9]
    0B3E: 0F 08 00 ADC   [X+8],0x0
    0B41: 7D 15 A9 LJMP  0x15A9
    0B44: 56 05 00 MOV   [X+5],0x0
    0B47: 56 04 00 MOV   [X+4],0x0
    0B4A: 56 0B FF MOV   [X+11],0xFF
    0B4D: 56 0A FF MOV   [X+10],0xFF
    0B50: 56 03 00 MOV   [X+3],0x0
    0B53: 56 02 00 MOV   [X+2],0x0
    0B56: 56 10 08 MOV   [X+16],0x8
    0B59: 56 0F 00 MOV   [X+15],0x0
    0B5C: 56 0E 20 MOV   [X+14],0x20
    0B5F: 77 FA    INC   [X-6]
    0B61: 0F F9 00 ADC   [X-7],0x0
    0B64: 56 01 00 MOV   [X+1],0x0
    0B67: 56 00 00 MOV   [X+0],0x0
    0B6A: 7C 30 FC LCALL 0x30FC
    0B6D: 54 1A    MOV   [X+26],A
    0B6F: 56 19 00 MOV   [X+25],0x0
    0B72: 3D 19 00 CMP   [X+25],0x0
    0B75: B0 06    JNZ   0x0B7C
    0B77: 3D 1A 20 CMP   [X+26],0x20
    0B7A: A0 49    JZ    0x0BC4
    0B7C: 3D 19 00 CMP   [X+25],0x0
    0B7F: B0 06    JNZ   0x0B86
    0B81: 3D 1A 23 CMP   [X+26],0x23
    0B84: A0 2D    JZ    0x0BB2
    0B86: 52 1A    MOV   A,[X+26]
    0B88: 11 20    SUB   A,0x20
    0B8A: 52 19    MOV   A,[X+25]
    0B8C: 31 80    XOR   A,0x80
    0B8E: 19 80    SBB   A,0x80
    0B90: C0 40    JC    0x0BD1
    0B92: 3D 19 00 CMP   [X+25],0x0
    0B95: B0 06    JNZ   0x0B9C
    0B97: 3D 1A 2B CMP   [X+26],0x2B
    0B9A: A0 21    JZ    0x0BBC
    0B9C: 3D 19 00 CMP   [X+25],0x0
    0B9F: B0 06    JNZ   0x0BA6
    0BA1: 3D 1A 2D CMP   [X+26],0x2D
    0BA4: A0 12    JZ    0x0BB7
    0BA6: 3D 19 00 CMP   [X+25],0x0
    0BA9: B0 06    JNZ   0x0BB0
    0BAB: 3D 1A 30 CMP   [X+26],0x30
    0BAE: A0 1D    JZ    0x0BCC
    0BB0: 80 20    JMP   0x0BD1
    0BB2: 2F 03 01 OR    [X+3],0x1
    0BB5: 80 21    JMP   0x0BD7
    0BB7: 2F 03 04 OR    [X+3],0x4
    0BBA: 80 1C    JMP   0x0BD7
    0BBC: 2F 03 08 OR    [X+3],0x8
    0BBF: 56 0E 2B MOV   [X+14],0x2B
    0BC2: 80 14    JMP   0x0BD7
    0BC4: 2F 03 08 OR    [X+3],0x8
    0BC7: 56 0E 20 MOV   [X+14],0x20
    0BCA: 80 0C    JMP   0x0BD7
    0BCC: 2F 03 10 OR    [X+3],0x10
    0BCF: 80 07    JMP   0x0BD7
    0BD1: 56 01 01 MOV   [X+1],0x1
    0BD4: 56 00 00 MOV   [X+0],0x0
    0BD7: 3D 00 00 CMP   [X+0],0x0
    0BDA: B0 06    JNZ   0x0BE1
    0BDC: 3D 01 00 CMP   [X+1],0x0
    0BDF: A0 03    JZ    0x0BE3
    0BE1: 80 08    JMP   0x0BEA
    0BE3: 77 FA    INC   [X-6]
    0BE5: 0F F9 00 ADC   [X-7],0x0
    0BE8: 8F 81    JMP   0x0B6A
    0BEA: 7C 30 FC LCALL 0x30FC
    0BED: 53 4E    MOV   [__r1],A
    0BEF: 50 00    MOV   A,0x0
    0BF1: 08       PUSH  A
    0BF2: 51 4E    MOV   A,[__r1]
    0BF4: 08       PUSH  A
    0BF5: 7C 24 CD LCALL _isdigit
    0BF8: 38 FE    ADD   SP,0xFE
    0BFA: 62 D0 00 MOV   REG[0xD0],0x0
    0BFD: 3C 4F 00 CMP   [__r0],0x0
    0C00: B0 06    JNZ   0x0C07
    0C02: 3C 4E 00 CMP   [__r1],0x0
    0C05: A0 3D    JZ    0x0C43
    0C07: 52 F9    MOV   A,[X-7]
    0C09: 08       PUSH  A
    0C0A: 52 FA    MOV   A,[X-6]
    0C0C: 08       PUSH  A
    0C0D: 7C 15 C4 LCALL 0x15C4
    0C10: 38 FE    ADD   SP,0xFE
    0C12: 62 D0 00 MOV   REG[0xD0],0x0
    0C15: 51 4E    MOV   A,[__r1]
    0C17: 54 05    MOV   [X+5],A
    0C19: 51 4F    MOV   A,[__r0]
    0C1B: 54 04    MOV   [X+4],A
    0C1D: 80 06    JMP   0x0C24
    0C1F: 77 FA    INC   [X-6]
    0C21: 0F F9 00 ADC   [X-7],0x0
    0C24: 7C 30 FC LCALL 0x30FC
    0C27: 53 4E    MOV   [__r1],A
    0C29: 50 00    MOV   A,0x0
    0C2B: 08       PUSH  A
    0C2C: 51 4E    MOV   A,[__r1]
    0C2E: 08       PUSH  A
    0C2F: 7C 24 CD LCALL _isdigit
    0C32: 38 FE    ADD   SP,0xFE
    0C34: 62 D0 00 MOV   REG[0xD0],0x0
    0C37: 3C 4F 00 CMP   [__r0],0x0
    0C3A: BF E4    JNZ   0x0C1F
    0C3C: 3C 4E 00 CMP   [__r1],0x0
    0C3F: BF DF    JNZ   0x0C1F
    0C41: 80 1C    JMP   0x0C5E
    0C43: 7C 30 FC LCALL 0x30FC
    0C46: 39 2A    CMP   A,0x2A
    0C48: B0 15    JNZ   0x0C5E
    0C4A: 07 F8 FE ADD   [X-8],0xFE
    0C4D: 0F F7 FF ADC   [X-9],0xFF
    0C50: 7C 31 99 LCALL 0x3199
    0C53: 54 04    MOV   [X+4],A
    0C55: 3E 4E    MVI   A,[__r1]
    0C57: 54 05    MOV   [X+5],A
    0C59: 77 FA    INC   [X-6]
    0C5B: 0F F9 00 ADC   [X-7],0x0
    0C5E: 7C 30 FC LCALL 0x30FC
    0C61: 39 2E    CMP   A,0x2E
    0C63: B0 72    JNZ   0x0CD6
    0C65: 77 FA    INC   [X-6]
    0C67: 0F F9 00 ADC   [X-7],0x0
    0C6A: 7C 31 0B LCALL 0x310B
    0C6D: 53 4E    MOV   [__r1],A
    0C6F: 50 00    MOV   A,0x0
    0C71: 08       PUSH  A
    0C72: 51 4E    MOV   A,[__r1]
    0C74: 08       PUSH  A
    0C75: 7C 24 CD LCALL _isdigit
    0C78: 38 FE    ADD   SP,0xFE
    0C7A: 62 D0 00 MOV   REG[0xD0],0x0
    0C7D: 3C 4F 00 CMP   [__r0],0x0
    0C80: B0 06    JNZ   0x0C87
    0C82: 3C 4E 00 CMP   [__r1],0x0
    0C85: A0 35    JZ    0x0CBB
    0C87: 52 F9    MOV   A,[X-7]
    0C89: 08       PUSH  A
    0C8A: 52 FA    MOV   A,[X-6]
    0C8C: 08       PUSH  A
    0C8D: 7C 15 C4 LCALL 0x15C4
    0C90: 38 FE    ADD   SP,0xFE
    0C92: 7C 32 F4 LCALL 0x32F4
    0C95: 80 06    JMP   0x0C9C
    0C97: 77 FA    INC   [X-6]
    0C99: 0F F9 00 ADC   [X-7],0x0
    0C9C: 7C 30 FC LCALL 0x30FC
    0C9F: 53 4E    MOV   [__r1],A
    0CA1: 50 00    MOV   A,0x0
    0CA3: 08       PUSH  A
    0CA4: 51 4E    MOV   A,[__r1]
    0CA6: 08       PUSH  A
    0CA7: 7C 24 CD LCALL _isdigit
    0CAA: 38 FE    ADD   SP,0xFE
    0CAC: 62 D0 00 MOV   REG[0xD0],0x0
    0CAF: 3C 4F 00 CMP   [__r0],0x0
    0CB2: BF E4    JNZ   0x0C97
    0CB4: 3C 4E 00 CMP   [__r1],0x0
    0CB7: BF DF    JNZ   0x0C97
    0CB9: 80 1C    JMP   0x0CD6
    0CBB: 7C 30 FC LCALL 0x30FC
    0CBE: 39 2A    CMP   A,0x2A
    0CC0: B0 15    JNZ   0x0CD6
    0CC2: 07 F8 FE ADD   [X-8],0xFE
    0CC5: 0F F7 FF ADC   [X-9],0xFF
    0CC8: 7C 31 99 LCALL 0x3199
    0CCB: 54 0A    MOV   [X+10],A
    0CCD: 3E 4E    MVI   A,[__r1]
    0CCF: 54 0B    MOV   [X+11],A
    0CD1: 77 FA    INC   [X-6]
    0CD3: 0F F9 00 ADC   [X-7],0x0
    0CD6: 7C 30 FC LCALL 0x30FC
    0CD9: 39 6C    CMP   A,0x6C
    0CDB: B0 09    JNZ   0x0CE5
    0CDD: 77 FA    INC   [X-6]
    0CDF: 0F F9 00 ADC   [X-7],0x0
    0CE2: 2F 03 02 OR    [X+3],0x2
    0CE5: 7C 30 FC LCALL 0x30FC
    0CE8: 54 1A    MOV   [X+26],A
    0CEA: 56 19 00 MOV   [X+25],0x0
    0CED: 52 1A    MOV   A,[X+26]
    0CEF: 11 53    SUB   A,0x53
    0CF1: 53 42    MOV   [__rY],A
    0CF3: 52 19    MOV   A,[X+25]
    0CF5: 31 80    XOR   A,0x80
    0CF7: 19 80    SBB   A,0x80
    0CF9: 2A 42    OR    A,[__rY]
    0CFB: A3 DB    JZ    0x10D7
    0CFD: D0 1D    JNC   0x0D1B
    0CFF: 3D 19 00 CMP   [X+25],0x0
    0D02: B0 09    JNZ   0x0D0C
    0D04: 3D 1A 45 CMP   [X+26],0x45
    0D07: B0 04    JNZ   0x0D0C
    0D09: 7D 15 03 LJMP  0x1503
    0D0C: 3D 19 00 CMP   [X+25],0x0
    0D0F: B0 09    JNZ   0x0D19
    0D11: 3D 1A 47 CMP   [X+26],0x47
    0D14: B0 04    JNZ   0x0D19
    0D16: 7D 15 1B LJMP  0x151B
    0D19: 80 8F    JMP   0x0DA9
    0D1B: 52 1A    MOV   A,[X+26]
    0D1D: 11 58    SUB   A,0x58
    0D1F: 62 D0 00 MOV   REG[0xD0],0x0
    0D22: 53 42    MOV   [__rY],A
    0D24: 52 19    MOV   A,[X+25]
    0D26: 31 80    XOR   A,0x80
    0D28: 19 80    SBB   A,0x80
    0D2A: C0 7E    JC    0x0DA9
    0D2C: 2A 42    OR    A,[__rY]
    0D2E: A1 03    JZ    0x0E32
    0D30: 3D 19 00 CMP   [X+25],0x0
    0D33: B0 06    JNZ   0x0D3A
    0D35: 3D 1A 63 CMP   [X+26],0x63
    0D38: A3 4F    JZ    0x1088
    0D3A: 3D 19 00 CMP   [X+25],0x0
    0D3D: B0 06    JNZ   0x0D44
    0D3F: 3D 1A 64 CMP   [X+26],0x64
    0D42: A0 81    JZ    0x0DC4
    0D44: 3D 19 00 CMP   [X+25],0x0
    0D47: B0 09    JNZ   0x0D51
    0D49: 3D 1A 65 CMP   [X+26],0x65
    0D4C: B0 04    JNZ   0x0D51
    0D4E: 7D 14 FB LJMP  0x14FB
    0D51: 3D 19 00 CMP   [X+25],0x0
    0D54: B0 09    JNZ   0x0D5E
    0D56: 3D 1A 66 CMP   [X+26],0x66
    0D59: B0 04    JNZ   0x0D5E
    0D5B: 7D 15 0B LJMP  0x150B
    0D5E: 3D 19 00 CMP   [X+25],0x0
    0D61: B0 09    JNZ   0x0D6B
    0D63: 3D 1A 67 CMP   [X+26],0x67
    0D66: B0 04    JNZ   0x0D6B
    0D68: 7D 15 13 LJMP  0x1513
    0D6B: 3D 19 00 CMP   [X+25],0x0
    0D6E: B0 06    JNZ   0x0D75
    0D70: 3D 1A 69 CMP   [X+26],0x69
    0D73: A0 50    JZ    0x0DC4
    0D75: 3D 19 00 CMP   [X+25],0x0
    0D78: B0 06    JNZ   0x0D7F
    0D7A: 3D 1A 6F CMP   [X+26],0x6F
    0D7D: A0 B4    JZ    0x0E32
    0D7F: 3D 19 00 CMP   [X+25],0x0
    0D82: B0 06    JNZ   0x0D89
    0D84: 3D 1A 70 CMP   [X+26],0x70
    0D87: A0 AA    JZ    0x0E32
    0D89: 3D 19 00 CMP   [X+25],0x0
    0D8C: B0 06    JNZ   0x0D93
    0D8E: 3D 1A 73 CMP   [X+26],0x73
    0D91: A5 4E    JZ    0x12E0
    0D93: 3D 19 00 CMP   [X+25],0x0
    0D96: B0 06    JNZ   0x0D9D
    0D98: 3D 1A 75 CMP   [X+26],0x75
    0D9B: A0 96    JZ    0x0E32
    0D9D: 3D 19 00 CMP   [X+25],0x0
    0DA0: B0 06    JNZ   0x0DA7
    0DA2: 3D 1A 78 CMP   [X+26],0x78
    0DA5: A0 8C    JZ    0x0E32
    0DA7: 80 01    JMP   0x0DA9
    0DA9: 7C 30 FC LCALL 0x30FC
    0DAC: 10       PUSH  X
    0DAD: 08       PUSH  A
    0DAE: 52 FC    MOV   A,[X-4]
    0DB0: 53 4E    MOV   [__r1],A
    0DB2: 52 FB    MOV   A,[X-5]
    0DB4: 58 4E    MOV   X,[__r1]
    0DB6: 7C 1C 69 LCALL __plcall
    0DB9: 38 FF    ADD   SP,0xFF
    0DBB: 20       POP   X
    0DBC: 77 09    INC   [X+9]
    0DBE: 0F 08 00 ADC   [X+8],0x0
    0DC1: 7D 15 A9 LJMP  0x15A9
    0DC4: 62 D0 00 MOV   REG[0xD0],0x0
    0DC7: 52 03    MOV   A,[X+3]
    0DC9: 21 02    AND   A,0x2
    0DCB: 53 4E    MOV   [__r1],A
    0DCD: 52 02    MOV   A,[X+2]
    0DCF: 21 00    AND   A,0x0
    0DD1: 39 00    CMP   A,0x0
    0DD3: B0 06    JNZ   0x0DDA
    0DD5: 3C 4E 00 CMP   [__r1],0x0
    0DD8: A0 34    JZ    0x0E0D
    0DDA: 07 F8 FC ADD   [X-8],0xFC
    0DDD: 7C 31 3B LCALL 0x313B
    0DE0: 54 15    MOV   [X+21],A
    0DE2: 3E 4E    MVI   A,[__r1]
    0DE4: 54 16    MOV   [X+22],A
    0DE6: 3E 4E    MVI   A,[__r1]
    0DE8: 54 17    MOV   [X+23],A
    0DEA: 3E 4E    MVI   A,[__r1]
    0DEC: 54 18    MOV   [X+24],A
    0DEE: 50 00    MOV   A,0x0
    0DF0: 08       PUSH  A
    0DF1: 50 0A    MOV   A,0xA
    0DF3: 08       PUSH  A
    0DF4: 52 15    MOV   A,[X+21]
    0DF6: 08       PUSH  A
    0DF7: 52 16    MOV   A,[X+22]
    0DF9: 08       PUSH  A
    0DFA: 52 17    MOV   A,[X+23]
    0DFC: 08       PUSH  A
    0DFD: 52 18    MOV   A,[X+24]
    0DFF: 08       PUSH  A
    0E00: 52 0F    MOV   A,[X+15]
    0E02: 08       PUSH  A
    0E03: 52 10    MOV   A,[X+16]
    0E05: 08       PUSH  A
    0E06: 7C 1D 9C LCALL _ltoa
    0E09: 38 F8    ADD   SP,0xF8
    0E0B: 82 2A    JMP   0x1036
    0E0D: 07 F8 FE ADD   [X-8],0xFE
    0E10: 7C 31 3B LCALL 0x313B
    0E13: 54 11    MOV   [X+17],A
    0E15: 3E 4E    MVI   A,[__r1]
    0E17: 54 12    MOV   [X+18],A
    0E19: 50 00    MOV   A,0x0
    0E1B: 08       PUSH  A
    0E1C: 50 0A    MOV   A,0xA
    0E1E: 08       PUSH  A
    0E1F: 52 11    MOV   A,[X+17]
    0E21: 08       PUSH  A
    0E22: 52 12    MOV   A,[X+18]
    0E24: 08       PUSH  A
    0E25: 52 0F    MOV   A,[X+15]
    0E27: 08       PUSH  A
    0E28: 52 10    MOV   A,[X+16]
    0E2A: 08       PUSH  A
    0E2B: 7C 1C 75 LCALL _itoa
    0E2E: 38 FA    ADD   SP,0xFA
    0E30: 82 05    JMP   0x1036
    0E32: 62 D0 00 MOV   REG[0xD0],0x0
    0E35: 52 03    MOV   A,[X+3]
    0E37: 21 02    AND   A,0x2
    0E39: 53 4E    MOV   [__r1],A
    0E3B: 52 02    MOV   A,[X+2]
    0E3D: 21 00    AND   A,0x0
    0E3F: 39 00    CMP   A,0x0
    0E41: B0 06    JNZ   0x0E48
    0E43: 3C 4E 00 CMP   [__r1],0x0
    0E46: A0 39    JZ    0x0E80
    0E48: 07 F8 FC ADD   [X-8],0xFC
    0E4B: 7C 31 3B LCALL 0x313B
    0E4E: 53 4B    MOV   [__r4],A
    0E50: 3E 4E    MVI   A,[__r1]
    0E52: 53 4A    MOV   [__r5],A
    0E54: 3E 4E    MVI   A,[__r1]
    0E56: 53 49    MOV   [__r6],A
    0E58: 3E 4E    MVI   A,[__r1]
    0E5A: 53 48    MOV   [__r7],A
    0E5C: 51 4B    MOV   A,[__r4]
    0E5E: 08       PUSH  A
    0E5F: 51 4A    MOV   A,[__r5]
    0E61: 08       PUSH  A
    0E62: 51 49    MOV   A,[__r6]
    0E64: 08       PUSH  A
    0E65: 51 48    MOV   A,[__r7]
    0E67: 53 4C    MOV   [__r3],A
    0E69: 18       POP   A
    0E6A: 53 4D    MOV   [__r2],A
    0E6C: 18       POP   A
    0E6D: 53 4E    MOV   [__r1],A
    0E6F: 18       POP   A
    0E70: 54 15    MOV   [X+21],A
    0E72: 51 4E    MOV   A,[__r1]
    0E74: 54 16    MOV   [X+22],A
    0E76: 51 4D    MOV   A,[__r2]
    0E78: 54 17    MOV   [X+23],A
    0E7A: 51 4C    MOV   A,[__r3]
    0E7C: 54 18    MOV   [X+24],A
    0E7E: 80 11    JMP   0x0E90
    0E80: 07 F8 FE ADD   [X-8],0xFE
    0E83: 7C 31 3B LCALL 0x313B
    0E86: 53 4F    MOV   [__r0],A
    0E88: 3E 4E    MVI   A,[__r1]
    0E8A: 54 12    MOV   [X+18],A
    0E8C: 51 4F    MOV   A,[__r0]
    0E8E: 54 11    MOV   [X+17],A
    0E90: 7C 30 FC LCALL 0x30FC
    0E93: 39 75    CMP   A,0x75
    0E95: B0 4C    JNZ   0x0EE2
    0E97: 52 03    MOV   A,[X+3]
    0E99: 21 02    AND   A,0x2
    0E9B: 53 4E    MOV   [__r1],A
    0E9D: 52 02    MOV   A,[X+2]
    0E9F: 21 00    AND   A,0x0
    0EA1: 39 00    CMP   A,0x0
    0EA3: B0 06    JNZ   0x0EAA
    0EA5: 3C 4E 00 CMP   [__r1],0x0
    0EA8: A0 20    JZ    0x0EC9
    0EAA: 50 00    MOV   A,0x0
    0EAC: 08       PUSH  A
    0EAD: 50 0A    MOV   A,0xA
    0EAF: 08       PUSH  A
    0EB0: 52 15    MOV   A,[X+21]
    0EB2: 08       PUSH  A
    0EB3: 52 16    MOV   A,[X+22]
    0EB5: 08       PUSH  A
    0EB6: 52 17    MOV   A,[X+23]
    0EB8: 08       PUSH  A
    0EB9: 52 18    MOV   A,[X+24]
    0EBB: 08       PUSH  A
    0EBC: 52 0F    MOV   A,[X+15]
    0EBE: 08       PUSH  A
    0EBF: 52 10    MOV   A,[X+16]
    0EC1: 08       PUSH  A
    0EC2: 7C 1F 53 LCALL _ultoa
    0EC5: 38 F8    ADD   SP,0xF8
    0EC7: 81 6E    JMP   0x1036
    0EC9: 50 00    MOV   A,0x0
    0ECB: 08       PUSH  A
    0ECC: 50 0A    MOV   A,0xA
    0ECE: 08       PUSH  A
    0ECF: 52 11    MOV   A,[X+17]
    0ED1: 08       PUSH  A
    0ED2: 52 12    MOV   A,[X+18]
    0ED4: 08       PUSH  A
    0ED5: 52 0F    MOV   A,[X+15]
    0ED7: 08       PUSH  A
    0ED8: 52 10    MOV   A,[X+16]
    0EDA: 08       PUSH  A
    0EDB: 7C 20 90 LCALL _utoa
    0EDE: 38 FA    ADD   SP,0xFA
    0EE0: 81 55    JMP   0x1036
    0EE2: 7C 30 FC LCALL 0x30FC
    0EE5: 39 6F    CMP   A,0x6F
    0EE7: B0 70    JNZ   0x0F58
    0EE9: 52 03    MOV   A,[X+3]
    0EEB: 21 01    AND   A,0x1
    0EED: 53 4E    MOV   [__r1],A
    0EEF: 52 02    MOV   A,[X+2]
    0EF1: 21 00    AND   A,0x0
    0EF3: 39 00    CMP   A,0x0
    0EF5: B0 06    JNZ   0x0EFC
    0EF7: 3C 4E 00 CMP   [__r1],0x0
    0EFA: A0 0F    JZ    0x0F0A
    0EFC: 62 D0 00 MOV   REG[0xD0],0x0
    0EFF: 7C 31 84 LCALL 0x3184
    0F02: 51 4F    MOV   A,[__r0]
    0F04: 60 D5    MOV   REG[0xD5],A
    0F06: 50 30    MOV   A,0x30
    0F08: 3F 4E    MVI   [__r1],A
    0F0A: 62 D0 00 MOV   REG[0xD0],0x0
    0F0D: 52 03    MOV   A,[X+3]
    0F0F: 21 02    AND   A,0x2
    0F11: 53 4E    MOV   [__r1],A
    0F13: 52 02    MOV   A,[X+2]
    0F15: 21 00    AND   A,0x0
    0F17: 39 00    CMP   A,0x0
    0F19: B0 06    JNZ   0x0F20
    0F1B: 3C 4E 00 CMP   [__r1],0x0
    0F1E: A0 20    JZ    0x0F3F
    0F20: 50 00    MOV   A,0x0
    0F22: 08       PUSH  A
    0F23: 50 08    MOV   A,0x8
    0F25: 08       PUSH  A
    0F26: 52 15    MOV   A,[X+21]
    0F28: 08       PUSH  A
    0F29: 52 16    MOV   A,[X+22]
    0F2B: 08       PUSH  A
    0F2C: 52 17    MOV   A,[X+23]
    0F2E: 08       PUSH  A
    0F2F: 52 18    MOV   A,[X+24]
    0F31: 08       PUSH  A
    0F32: 52 0F    MOV   A,[X+15]
    0F34: 08       PUSH  A
    0F35: 52 10    MOV   A,[X+16]
    0F37: 08       PUSH  A
    0F38: 7C 1F 53 LCALL _ultoa
    0F3B: 38 F8    ADD   SP,0xF8
    0F3D: 80 F8    JMP   0x1036
    0F3F: 50 00    MOV   A,0x0
    0F41: 08       PUSH  A
    0F42: 50 08    MOV   A,0x8
    0F44: 08       PUSH  A
    0F45: 52 11    MOV   A,[X+17]
    0F47: 08       PUSH  A
    0F48: 52 12    MOV   A,[X+18]
    0F4A: 08       PUSH  A
    0F4B: 52 0F    MOV   A,[X+15]
    0F4D: 08       PUSH  A
    0F4E: 52 10    MOV   A,[X+16]
    0F50: 08       PUSH  A
    0F51: 7C 20 90 LCALL _utoa
    0F54: 38 FA    ADD   SP,0xFA
    0F56: 80 DF    JMP   0x1036
    0F58: 7C 30 FC LCALL 0x30FC
    0F5B: 39 70    CMP   A,0x70
    0F5D: B0 19    JNZ   0x0F77
    0F5F: 7C 31 84 LCALL 0x3184
    0F62: 51 4F    MOV   A,[__r0]
    0F64: 60 D5    MOV   REG[0xD5],A
    0F66: 50 30    MOV   A,0x30
    0F68: 3F 4E    MVI   [__r1],A
    0F6A: 7C 31 84 LCALL 0x3184
    0F6D: 51 4F    MOV   A,[__r0]
    0F6F: 60 D5    MOV   REG[0xD5],A
    0F71: 50 78    MOV   A,0x78
    0F73: 3F 4E    MVI   [__r1],A
    0F75: 80 36    JMP   0x0FAC
    0F77: 62 D0 00 MOV   REG[0xD0],0x0
    0F7A: 52 03    MOV   A,[X+3]
    0F7C: 21 01    AND   A,0x1
    0F7E: 53 4E    MOV   [__r1],A
    0F80: 52 02    MOV   A,[X+2]
    0F82: 21 00    AND   A,0x0
    0F84: 39 00    CMP   A,0x0
    0F86: B0 06    JNZ   0x0F8D
    0F88: 3C 4E 00 CMP   [__r1],0x0
    0F8B: A0 20    JZ    0x0FAC
    0F8D: 62 D0 00 MOV   REG[0xD0],0x0
    0F90: 7C 31 84 LCALL 0x3184
    0F93: 51 4F    MOV   A,[__r0]
    0F95: 60 D5    MOV   REG[0xD5],A
    0F97: 50 30    MOV   A,0x30
    0F99: 3F 4E    MVI   [__r1],A
    0F9B: 7C 31 84 LCALL 0x3184
    0F9E: 52 FA    MOV   A,[X-6]
    0FA0: 53 4C    MOV   [__r3],A
    0FA2: 52 F9    MOV   A,[X-7]
    0FA4: 10       PUSH  X
    0FA5: 58 4C    MOV   X,[__r3]
    0FA7: 28       ROMX  
    0FA8: 20       POP   X
    0FA9: 7C 31 30 LCALL 0x3130
    0FAC: 62 D0 00 MOV   REG[0xD0],0x0
    0FAF: 52 03    MOV   A,[X+3]
    0FB1: 21 02    AND   A,0x2
    0FB3: 53 4E    MOV   [__r1],A
    0FB5: 52 02    MOV   A,[X+2]
    0FB7: 21 00    AND   A,0x0
    0FB9: 39 00    CMP   A,0x0
    0FBB: B0 06    JNZ   0x0FC2
    0FBD: 3C 4E 00 CMP   [__r1],0x0
    0FC0: A0 20    JZ    0x0FE1
    0FC2: 50 00    MOV   A,0x0
    0FC4: 08       PUSH  A
    0FC5: 50 10    MOV   A,0x10
    0FC7: 08       PUSH  A
    0FC8: 52 15    MOV   A,[X+21]
    0FCA: 08       PUSH  A
    0FCB: 52 16    MOV   A,[X+22]
    0FCD: 08       PUSH  A
    0FCE: 52 17    MOV   A,[X+23]
    0FD0: 08       PUSH  A
    0FD1: 52 18    MOV   A,[X+24]
    0FD3: 08       PUSH  A
    0FD4: 52 0F    MOV   A,[X+15]
    0FD6: 08       PUSH  A
    0FD7: 52 10    MOV   A,[X+16]
    0FD9: 08       PUSH  A
    0FDA: 7C 1F 53 LCALL _ultoa
    0FDD: 38 F8    ADD   SP,0xF8
    0FDF: 80 18    JMP   0x0FF8
    0FE1: 50 00    MOV   A,0x0
    0FE3: 08       PUSH  A
    0FE4: 50 10    MOV   A,0x10
    0FE6: 08       PUSH  A
    0FE7: 52 11    MOV   A,[X+17]
    0FE9: 08       PUSH  A
    0FEA: 52 12    MOV   A,[X+18]
    0FEC: 08       PUSH  A
    0FED: 52 0F    MOV   A,[X+15]
    0FEF: 08       PUSH  A
    0FF0: 52 10    MOV   A,[X+16]
    0FF2: 08       PUSH  A
    0FF3: 7C 20 90 LCALL _utoa
    0FF6: 38 FA    ADD   SP,0xFA
    0FF8: 7C 30 FC LCALL 0x30FC
    0FFB: 39 58    CMP   A,0x58
    0FFD: B0 38    JNZ   0x1036
    0FFF: 56 07 08 MOV   [X+7],0x8
    1002: 56 06 00 MOV   [X+6],0x0
    1005: 80 29    JMP   0x102F
    1007: 7C 31 E4 LCALL 0x31E4
    100A: 53 4E    MOV   [__r1],A
    100C: 50 00    MOV   A,0x0
    100E: 08       PUSH  A
    100F: 51 4E    MOV   A,[__r1]
    1011: 08       PUSH  A
    1012: 7C 25 1B LCALL _toupper
    1015: 38 FE    ADD   SP,0xFE
    1017: 62 D0 00 MOV   REG[0xD0],0x0
    101A: 51 4E    MOV   A,[__r1]
    101C: 53 4F    MOV   [__r0],A
    101E: 52 07    MOV   A,[X+7]
    1020: 53 4C    MOV   [__r3],A
    1022: 52 06    MOV   A,[X+6]
    1024: 60 D5    MOV   REG[0xD5],A
    1026: 51 4F    MOV   A,[__r0]
    1028: 3F 4C    MVI   [__r3],A
    102A: 77 07    INC   [X+7]
    102C: 0F 06 00 ADC   [X+6],0x0
    102F: 7C 31 E4 LCALL 0x31E4
    1032: 39 00    CMP   A,0x0
    1034: BF D2    JNZ   0x1007
    1036: 56 07 08 MOV   [X+7],0x8
    1039: 56 06 00 MOV   [X+6],0x0
    103C: 3D 0A FF CMP   [X+10],0xFF
    103F: B0 0C    JNZ   0x104C
    1041: 3D 0B FF CMP   [X+11],0xFF
    1044: B0 07    JNZ   0x104C
    1046: 56 0B 00 MOV   [X+11],0x0
    1049: 56 0A 00 MOV   [X+10],0x0
    104C: 3D 0A 00 CMP   [X+10],0x0
    104F: B0 06    JNZ   0x1056
    1051: 3D 0B 00 CMP   [X+11],0x0
    1054: A2 A9    JZ    0x12FE
    1056: 50 00    MOV   A,0x0
    1058: 08       PUSH  A
    1059: 50 08    MOV   A,0x8
    105B: 08       PUSH  A
    105C: 7C 1C 1F LCALL _strlenLMM
    105F: 38 FE    ADD   SP,0xFE
    1061: 62 D0 00 MOV   REG[0xD0],0x0
    1064: 51 4E    MOV   A,[__r1]
    1066: 54 12    MOV   [X+18],A
    1068: 51 4F    MOV   A,[__r0]
    106A: 54 11    MOV   [X+17],A
    106C: 52 0B    MOV   A,[X+11]
    106E: 13 12    SUB   A,[X+18]
    1070: 52 11    MOV   A,[X+17]
    1072: 31 80    XOR   A,0x80
    1074: 53 43    MOV   [__rX],A
    1076: 52 0A    MOV   A,[X+10]
    1078: 31 80    XOR   A,0x80
    107A: 1A 43    SBB   A,[__rX]
    107C: D2 81    JNC   0x12FE
    107E: 52 12    MOV   A,[X+18]
    1080: 54 0B    MOV   [X+11],A
    1082: 52 11    MOV   A,[X+17]
    1084: 54 0A    MOV   [X+10],A
    1086: 82 77    JMP   0x12FE
    1088: 07 F8 FE ADD   [X-8],0xFE
    108B: 7C 31 3B LCALL 0x313B
    108E: 3E 4E    MVI   A,[__r1]
    1090: 54 13    MOV   [X+19],A
    1092: 50 01    MOV   A,0x1
    1094: 13 05    SUB   A,[X+5]
    1096: 52 04    MOV   A,[X+4]
    1098: 31 80    XOR   A,0x80
    109A: 53 43    MOV   [__rX],A
    109C: 50 80    MOV   A,0x80
    109E: 1A 43    SBB   A,[__rX]
    10A0: D0 1A    JNC   0x10BB
    10A2: 52 05    MOV   A,[X+5]
    10A4: 54 0B    MOV   [X+11],A
    10A6: 52 04    MOV   A,[X+4]
    10A8: 54 0A    MOV   [X+10],A
    10AA: 56 14 00 MOV   [X+20],0x0
    10AD: 5A 4E    MOV   [__r1],X
    10AF: 06 4E 13 ADD   [__r1],0x13
    10B2: 51 4E    MOV   A,[__r1]
    10B4: 54 07    MOV   [X+7],A
    10B6: 56 06 07 MOV   [X+6],0x7
    10B9: 82 44    JMP   0x12FE
    10BB: 10       PUSH  X
    10BC: 52 13    MOV   A,[X+19]
    10BE: 08       PUSH  A
    10BF: 62 D0 00 MOV   REG[0xD0],0x0
    10C2: 52 FC    MOV   A,[X-4]
    10C4: 53 4E    MOV   [__r1],A
    10C6: 52 FB    MOV   A,[X-5]
    10C8: 58 4E    MOV   X,[__r1]
    10CA: 7C 1C 69 LCALL __plcall
    10CD: 38 FF    ADD   SP,0xFF
    10CF: 20       POP   X
    10D0: 77 09    INC   [X+9]
    10D2: 0F 08 00 ADC   [X+8],0x0
    10D5: 84 D3    JMP   0x15A9
    10D7: 07 F8 FE ADD   [X-8],0xFE
    10DA: 7C 31 3B LCALL 0x313B
    10DD: 54 0C    MOV   [X+12],A
    10DF: 3E 4E    MVI   A,[__r1]
    10E1: 54 0D    MOV   [X+13],A
    10E3: 3D 0A FF CMP   [X+10],0xFF
    10E6: B0 0C    JNZ   0x10F3
    10E8: 3D 0B FF CMP   [X+11],0xFF
    10EB: B0 07    JNZ   0x10F3
    10ED: 56 0B 00 MOV   [X+11],0x0
    10F0: 56 0A 00 MOV   [X+10],0x0
    10F3: 3D 04 00 CMP   [X+4],0x0
    10F6: B0 06    JNZ   0x10FD
    10F8: 3D 05 00 CMP   [X+5],0x0
    10FB: A0 23    JZ    0x111F
    10FD: 52 0C    MOV   A,[X+12]
    10FF: 08       PUSH  A
    1100: 52 0D    MOV   A,[X+13]
    1102: 08       PUSH  A
    1103: 7C 1C 45 LCALL _cstrlenLMM
    1106: 38 FE    ADD   SP,0xFE
    1108: 62 D0 00 MOV   REG[0xD0],0x0
    110B: 52 05    MOV   A,[X+5]
    110D: 12 4E    SUB   A,[__r1]
    110F: 53 4E    MOV   [__r1],A
    1111: 52 04    MOV   A,[X+4]
    1113: 1A 4F    SBB   A,[__r0]
    1115: 53 4F    MOV   [__r0],A
    1117: 51 4E    MOV   A,[__r1]
    1119: 54 05    MOV   [X+5],A
    111B: 51 4F    MOV   A,[__r0]
    111D: 54 04    MOV   [X+4],A
    111F: 3D 0A 00 CMP   [X+10],0x0
    1122: B0 14    JNZ   0x1137
    1124: 3D 0B 00 CMP   [X+11],0x0
    1127: B0 0F    JNZ   0x1137
    1129: 52 0C    MOV   A,[X+12]
    112B: 08       PUSH  A
    112C: 52 0D    MOV   A,[X+13]
    112E: 08       PUSH  A
    112F: 7C 1C 45 LCALL _cstrlenLMM
    1132: 38 FE    ADD   SP,0xFE
    1134: 7C 32 F4 LCALL 0x32F4
    1137: 3D 04 00 CMP   [X+4],0x0
    113A: B0 06    JNZ   0x1141
    113C: 3D 05 00 CMP   [X+5],0x0
    113F: A0 1C    JZ    0x115C
    1141: 62 D0 00 MOV   REG[0xD0],0x0
    1144: 52 03    MOV   A,[X+3]
    1146: 21 08    AND   A,0x8
    1148: 53 4E    MOV   [__r1],A
    114A: 52 02    MOV   A,[X+2]
    114C: 21 00    AND   A,0x0
    114E: 39 00    CMP   A,0x0
    1150: B0 06    JNZ   0x1157
    1152: 3C 4E 00 CMP   [__r1],0x0
    1155: A0 06    JZ    0x115C
    1157: 7B 05    DEC   [X+5]
    1159: 1F 04 00 SBB   [X+4],0x0
    115C: 62 D0 00 MOV   REG[0xD0],0x0
    115F: 52 03    MOV   A,[X+3]
    1161: 21 10    AND   A,0x10
    1163: 53 4E    MOV   [__r1],A
    1165: 52 02    MOV   A,[X+2]
    1167: 21 00    AND   A,0x0
    1169: 39 00    CMP   A,0x0
    116B: B0 06    JNZ   0x1172
    116D: 3C 4E 00 CMP   [__r1],0x0
    1170: A0 75    JZ    0x11E6
    1172: 62 D0 00 MOV   REG[0xD0],0x0
    1175: 52 03    MOV   A,[X+3]
    1177: 21 08    AND   A,0x8
    1179: 53 4E    MOV   [__r1],A
    117B: 52 02    MOV   A,[X+2]
    117D: 21 00    AND   A,0x0
    117F: 39 00    CMP   A,0x0
    1181: B0 06    JNZ   0x1188
    1183: 3C 4E 00 CMP   [__r1],0x0
    1186: A0 1B    JZ    0x11A2
    1188: 10       PUSH  X
    1189: 52 0E    MOV   A,[X+14]
    118B: 08       PUSH  A
    118C: 62 D0 00 MOV   REG[0xD0],0x0
    118F: 52 FC    MOV   A,[X-4]
    1191: 53 4E    MOV   [__r1],A
    1193: 52 FB    MOV   A,[X-5]
    1195: 58 4E    MOV   X,[__r1]
    1197: 7C 1C 69 LCALL __plcall
    119A: 38 FF    ADD   SP,0xFF
    119C: 20       POP   X
    119D: 77 09    INC   [X+9]
    119F: 0F 08 00 ADC   [X+8],0x0
    11A2: 62 D0 00 MOV   REG[0xD0],0x0
    11A5: 52 03    MOV   A,[X+3]
    11A7: 21 04    AND   A,0x4
    11A9: 53 4E    MOV   [__r1],A
    11AB: 52 02    MOV   A,[X+2]
    11AD: 21 00    AND   A,0x0
    11AF: 39 00    CMP   A,0x0
    11B1: B0 C5    JNZ   0x1277
    11B3: 3C 4E 00 CMP   [__r1],0x0
    11B6: B0 C0    JNZ   0x1277
    11B8: 80 20    JMP   0x11D9
    11BA: 10       PUSH  X
    11BB: 50 30    MOV   A,0x30
    11BD: 08       PUSH  A
    11BE: 62 D0 00 MOV   REG[0xD0],0x0
    11C1: 52 FC    MOV   A,[X-4]
    11C3: 53 4E    MOV   [__r1],A
    11C5: 52 FB    MOV   A,[X-5]
    11C7: 58 4E    MOV   X,[__r1]
    11C9: 7C 1C 69 LCALL __plcall
    11CC: 38 FF    ADD   SP,0xFF
    11CE: 20       POP   X
    11CF: 77 09    INC   [X+9]
    11D1: 0F 08 00 ADC   [X+8],0x0
    11D4: 7B 05    DEC   [X+5]
    11D6: 1F 04 00 SBB   [X+4],0x0
    11D9: 50 00    MOV   A,0x0
    11DB: 13 05    SUB   A,[X+5]
    11DD: 52 04    MOV   A,[X+4]
    11DF: 7C 31 5D LCALL 0x315D
    11E2: CF D7    JC    0x11BA
    11E4: 80 92    JMP   0x1277
    11E6: 62 D0 00 MOV   REG[0xD0],0x0
    11E9: 52 03    MOV   A,[X+3]
    11EB: 21 04    AND   A,0x4
    11ED: 53 4E    MOV   [__r1],A
    11EF: 52 02    MOV   A,[X+2]
    11F1: 21 00    AND   A,0x0
    11F3: 39 00    CMP   A,0x0
    11F5: B0 32    JNZ   0x1228
    11F7: 3C 4E 00 CMP   [__r1],0x0
    11FA: B0 2D    JNZ   0x1228
    11FC: 80 20    JMP   0x121D
    11FE: 10       PUSH  X
    11FF: 50 20    MOV   A,0x20
    1201: 08       PUSH  A
    1202: 62 D0 00 MOV   REG[0xD0],0x0
    1205: 52 FC    MOV   A,[X-4]
    1207: 53 4E    MOV   [__r1],A
    1209: 52 FB    MOV   A,[X-5]
    120B: 58 4E    MOV   X,[__r1]
    120D: 7C 1C 69 LCALL __plcall
    1210: 38 FF    ADD   SP,0xFF
    1212: 20       POP   X
    1213: 77 09    INC   [X+9]
    1215: 0F 08 00 ADC   [X+8],0x0
    1218: 7B 05    DEC   [X+5]
    121A: 1F 04 00 SBB   [X+4],0x0
    121D: 50 00    MOV   A,0x0
    121F: 13 05    SUB   A,[X+5]
    1221: 52 04    MOV   A,[X+4]
    1223: 7C 31 5D LCALL 0x315D
    1226: CF D7    JC    0x11FE
    1228: 62 D0 00 MOV   REG[0xD0],0x0
    122B: 52 03    MOV   A,[X+3]
    122D: 21 08    AND   A,0x8
    122F: 53 4E    MOV   [__r1],A
    1231: 52 02    MOV   A,[X+2]
    1233: 21 00    AND   A,0x0
    1235: 39 00    CMP   A,0x0
    1237: B0 06    JNZ   0x123E
    1239: 3C 4E 00 CMP   [__r1],0x0
    123C: A0 3A    JZ    0x1277
    123E: 10       PUSH  X
    123F: 52 0E    MOV   A,[X+14]
    1241: 08       PUSH  A
    1242: 62 D0 00 MOV   REG[0xD0],0x0
    1245: 52 FC    MOV   A,[X-4]
    1247: 53 4E    MOV   [__r1],A
    1249: 52 FB    MOV   A,[X-5]
    124B: 58 4E    MOV   X,[__r1]
    124D: 7C 1C 69 LCALL __plcall
    1250: 38 FF    ADD   SP,0xFF
    1252: 20       POP   X
    1253: 77 09    INC   [X+9]
    1255: 0F 08 00 ADC   [X+8],0x0
    1258: 80 1E    JMP   0x1277
    125A: 7C 33 33 LCALL 0x3333
    125D: 10       PUSH  X
    125E: 08       PUSH  A
    125F: 52 FC    MOV   A,[X-4]
    1261: 53 4E    MOV   [__r1],A
    1263: 52 FB    MOV   A,[X-5]
    1265: 58 4E    MOV   X,[__r1]
    1267: 7C 1C 69 LCALL __plcall
    126A: 38 FF    ADD   SP,0xFF
    126C: 20       POP   X
    126D: 77 09    INC   [X+9]
    126F: 0F 08 00 ADC   [X+8],0x0
    1272: 77 0D    INC   [X+13]
    1274: 0F 0C 00 ADC   [X+12],0x0
    1277: 7C 33 33 LCALL 0x3333
    127A: 39 00    CMP   A,0x0
    127C: A0 1F    JZ    0x129C
    127E: 52 0B    MOV   A,[X+11]
    1280: 53 4E    MOV   [__r1],A
    1282: 52 0A    MOV   A,[X+10]
    1284: 53 4F    MOV   [__r0],A
    1286: 51 4E    MOV   A,[__r1]
    1288: 11 01    SUB   A,0x1
    128A: 54 0B    MOV   [X+11],A
    128C: 51 4F    MOV   A,[__r0]
    128E: 19 00    SBB   A,0x0
    1290: 54 0A    MOV   [X+10],A
    1292: 3C 4F 00 CMP   [__r0],0x0
    1295: BF C4    JNZ   0x125A
    1297: 3C 4E 00 CMP   [__r1],0x0
    129A: BF BF    JNZ   0x125A
    129C: 62 D0 00 MOV   REG[0xD0],0x0
    129F: 52 03    MOV   A,[X+3]
    12A1: 21 04    AND   A,0x4
    12A3: 53 4E    MOV   [__r1],A
    12A5: 52 02    MOV   A,[X+2]
    12A7: 21 00    AND   A,0x0
    12A9: 39 00    CMP   A,0x0
    12AB: B0 06    JNZ   0x12B2
    12AD: 3C 4E 00 CMP   [__r1],0x0
    12B0: A2 F8    JZ    0x15A9
    12B2: 80 20    JMP   0x12D3
    12B4: 10       PUSH  X
    12B5: 50 20    MOV   A,0x20
    12B7: 08       PUSH  A
    12B8: 62 D0 00 MOV   REG[0xD0],0x0
    12BB: 52 FC    MOV   A,[X-4]
    12BD: 53 4E    MOV   [__r1],A
    12BF: 52 FB    MOV   A,[X-5]
    12C1: 58 4E    MOV   X,[__r1]
    12C3: 7C 1C 69 LCALL __plcall
    12C6: 38 FF    ADD   SP,0xFF
    12C8: 20       POP   X
    12C9: 77 09    INC   [X+9]
    12CB: 0F 08 00 ADC   [X+8],0x0
    12CE: 7B 05    DEC   [X+5]
    12D0: 1F 04 00 SBB   [X+4],0x0
    12D3: 50 00    MOV   A,0x0
    12D5: 13 05    SUB   A,[X+5]
    12D7: 52 04    MOV   A,[X+4]
    12D9: 7C 31 5D LCALL 0x315D
    12DC: CF D7    JC    0x12B4
    12DE: 82 CA    JMP   0x15A9
    12E0: 07 F8 FE ADD   [X-8],0xFE
    12E3: 7C 31 3B LCALL 0x313B
    12E6: 54 06    MOV   [X+6],A
    12E8: 3E 4E    MVI   A,[__r1]
    12EA: 54 07    MOV   [X+7],A
    12EC: 3D 06 00 CMP   [X+6],0x0
    12EF: B0 0E    JNZ   0x12FE
    12F1: 3D 07 00 CMP   [X+7],0x0
    12F4: B0 09    JNZ   0x12FE
    12F6: 56 0D D6 MOV   [X+13],0xD6
    12F9: 56 0C 01 MOV   [X+12],0x1
    12FC: 8D E6    JMP   0x10E3
    12FE: 3D 0A FF CMP   [X+10],0xFF
    1301: B0 0C    JNZ   0x130E
    1303: 3D 0B FF CMP   [X+11],0xFF
    1306: B0 07    JNZ   0x130E
    1308: 56 0B 00 MOV   [X+11],0x0
    130B: 56 0A 00 MOV   [X+10],0x0
    130E: 3D 04 00 CMP   [X+4],0x0
    1311: B0 06    JNZ   0x1318
    1313: 3D 05 00 CMP   [X+5],0x0
    1316: A0 23    JZ    0x133A
    1318: 52 06    MOV   A,[X+6]
    131A: 08       PUSH  A
    131B: 52 07    MOV   A,[X+7]
    131D: 08       PUSH  A
    131E: 7C 1C 1F LCALL _strlenLMM
    1321: 38 FE    ADD   SP,0xFE
    1323: 62 D0 00 MOV   REG[0xD0],0x0
    1326: 52 05    MOV   A,[X+5]
    1328: 12 4E    SUB   A,[__r1]
    132A: 53 4E    MOV   [__r1],A
    132C: 52 04    MOV   A,[X+4]
    132E: 1A 4F    SBB   A,[__r0]
    1330: 53 4F    MOV   [__r0],A
    1332: 51 4E    MOV   A,[__r1]
    1334: 54 05    MOV   [X+5],A
    1336: 51 4F    MOV   A,[__r0]
    1338: 54 04    MOV   [X+4],A
    133A: 3D 0A 00 CMP   [X+10],0x0
    133D: B0 14    JNZ   0x1352
    133F: 3D 0B 00 CMP   [X+11],0x0
    1342: B0 0F    JNZ   0x1352
    1344: 52 06    MOV   A,[X+6]
    1346: 08       PUSH  A
    1347: 52 07    MOV   A,[X+7]
    1349: 08       PUSH  A
    134A: 7C 1C 1F LCALL _strlenLMM
    134D: 38 FE    ADD   SP,0xFE
    134F: 7C 32 F4 LCALL 0x32F4
    1352: 3D 04 00 CMP   [X+4],0x0
    1355: B0 06    JNZ   0x135C
    1357: 3D 05 00 CMP   [X+5],0x0
    135A: A0 1C    JZ    0x1377
    135C: 62 D0 00 MOV   REG[0xD0],0x0
    135F: 52 03    MOV   A,[X+3]
    1361: 21 08    AND   A,0x8
    1363: 53 4E    MOV   [__r1],A
    1365: 52 02    MOV   A,[X+2]
    1367: 21 00    AND   A,0x0
    1369: 39 00    CMP   A,0x0
    136B: B0 06    JNZ   0x1372
    136D: 3C 4E 00 CMP   [__r1],0x0
    1370: A0 06    JZ    0x1377
    1372: 7B 05    DEC   [X+5]
    1374: 1F 04 00 SBB   [X+4],0x0
    1377: 62 D0 00 MOV   REG[0xD0],0x0
    137A: 52 03    MOV   A,[X+3]
    137C: 21 10    AND   A,0x10
    137E: 53 4E    MOV   [__r1],A
    1380: 52 02    MOV   A,[X+2]
    1382: 21 00    AND   A,0x0
    1384: 39 00    CMP   A,0x0
    1386: B0 06    JNZ   0x138D
    1388: 3C 4E 00 CMP   [__r1],0x0
    138B: A0 75    JZ    0x1401
    138D: 62 D0 00 MOV   REG[0xD0],0x0
    1390: 52 03    MOV   A,[X+3]
    1392: 21 08    AND   A,0x8
    1394: 53 4E    MOV   [__r1],A
    1396: 52 02    MOV   A,[X+2]
    1398: 21 00    AND   A,0x0
    139A: 39 00    CMP   A,0x0
    139C: B0 06    JNZ   0x13A3
    139E: 3C 4E 00 CMP   [__r1],0x0
    13A1: A0 1B    JZ    0x13BD
    13A3: 10       PUSH  X
    13A4: 52 0E    MOV   A,[X+14]
    13A6: 08       PUSH  A
    13A7: 62 D0 00 MOV   REG[0xD0],0x0
    13AA: 52 FC    MOV   A,[X-4]
    13AC: 53 4E    MOV   [__r1],A
    13AE: 52 FB    MOV   A,[X-5]
    13B0: 58 4E    MOV   X,[__r1]
    13B2: 7C 1C 69 LCALL __plcall
    13B5: 38 FF    ADD   SP,0xFF
    13B7: 20       POP   X
    13B8: 77 09    INC   [X+9]
    13BA: 0F 08 00 ADC   [X+8],0x0
    13BD: 62 D0 00 MOV   REG[0xD0],0x0
    13C0: 52 03    MOV   A,[X+3]
    13C2: 21 04    AND   A,0x4
    13C4: 53 4E    MOV   [__r1],A
    13C6: 52 02    MOV   A,[X+2]
    13C8: 21 00    AND   A,0x0
    13CA: 39 00    CMP   A,0x0
    13CC: B0 C5    JNZ   0x1492
    13CE: 3C 4E 00 CMP   [__r1],0x0
    13D1: B0 C0    JNZ   0x1492
    13D3: 80 20    JMP   0x13F4
    13D5: 10       PUSH  X
    13D6: 50 30    MOV   A,0x30
    13D8: 08       PUSH  A
    13D9: 62 D0 00 MOV   REG[0xD0],0x0
    13DC: 52 FC    MOV   A,[X-4]
    13DE: 53 4E    MOV   [__r1],A
    13E0: 52 FB    MOV   A,[X-5]
    13E2: 58 4E    MOV   X,[__r1]
    13E4: 7C 1C 69 LCALL __plcall
    13E7: 38 FF    ADD   SP,0xFF
    13E9: 20       POP   X
    13EA: 77 09    INC   [X+9]
    13EC: 0F 08 00 ADC   [X+8],0x0
    13EF: 7B 05    DEC   [X+5]
    13F1: 1F 04 00 SBB   [X+4],0x0
    13F4: 50 00    MOV   A,0x0
    13F6: 13 05    SUB   A,[X+5]
    13F8: 52 04    MOV   A,[X+4]
    13FA: 7C 31 5D LCALL 0x315D
    13FD: CF D7    JC    0x13D5
    13FF: 80 92    JMP   0x1492
    1401: 62 D0 00 MOV   REG[0xD0],0x0
    1404: 52 03    MOV   A,[X+3]
    1406: 21 04    AND   A,0x4
    1408: 53 4E    MOV   [__r1],A
    140A: 52 02    MOV   A,[X+2]
    140C: 21 00    AND   A,0x0
    140E: 39 00    CMP   A,0x0
    1410: B0 32    JNZ   0x1443
    1412: 3C 4E 00 CMP   [__r1],0x0
    1415: B0 2D    JNZ   0x1443
    1417: 80 20    JMP   0x1438
    1419: 10       PUSH  X
    141A: 50 20    MOV   A,0x20
    141C: 08       PUSH  A
    141D: 62 D0 00 MOV   REG[0xD0],0x0
    1420: 52 FC    MOV   A,[X-4]
    1422: 53 4E    MOV   [__r1],A
    1424: 52 FB    MOV   A,[X-5]
    1426: 58 4E    MOV   X,[__r1]
    1428: 7C 1C 69 LCALL __plcall
    142B: 38 FF    ADD   SP,0xFF
    142D: 20       POP   X
    142E: 77 09    INC   [X+9]
    1430: 0F 08 00 ADC   [X+8],0x0
    1433: 7B 05    DEC   [X+5]
    1435: 1F 04 00 SBB   [X+4],0x0
    1438: 50 00    MOV   A,0x0
    143A: 13 05    SUB   A,[X+5]
    143C: 52 04    MOV   A,[X+4]
    143E: 7C 31 5D LCALL 0x315D
    1441: CF D7    JC    0x1419
    1443: 62 D0 00 MOV   REG[0xD0],0x0
    1446: 52 03    MOV   A,[X+3]
    1448: 21 08    AND   A,0x8
    144A: 53 4E    MOV   [__r1],A
    144C: 52 02    MOV   A,[X+2]
    144E: 21 00    AND   A,0x0
    1450: 39 00    CMP   A,0x0
    1452: B0 06    JNZ   0x1459
    1454: 3C 4E 00 CMP   [__r1],0x0
    1457: A0 3A    JZ    0x1492
    1459: 10       PUSH  X
    145A: 52 0E    MOV   A,[X+14]
    145C: 08       PUSH  A
    145D: 62 D0 00 MOV   REG[0xD0],0x0
    1460: 52 FC    MOV   A,[X-4]
    1462: 53 4E    MOV   [__r1],A
    1464: 52 FB    MOV   A,[X-5]
    1466: 58 4E    MOV   X,[__r1]
    1468: 7C 1C 69 LCALL __plcall
    146B: 38 FF    ADD   SP,0xFF
    146D: 20       POP   X
    146E: 77 09    INC   [X+9]
    1470: 0F 08 00 ADC   [X+8],0x0
    1473: 80 1E    JMP   0x1492
    1475: 7C 31 E4 LCALL 0x31E4
    1478: 10       PUSH  X
    1479: 08       PUSH  A
    147A: 52 FC    MOV   A,[X-4]
    147C: 53 4E    MOV   [__r1],A
    147E: 52 FB    MOV   A,[X-5]
    1480: 58 4E    MOV   X,[__r1]
    1482: 7C 1C 69 LCALL __plcall
    1485: 38 FF    ADD   SP,0xFF
    1487: 20       POP   X
    1488: 77 09    INC   [X+9]
    148A: 0F 08 00 ADC   [X+8],0x0
    148D: 77 07    INC   [X+7]
    148F: 0F 06 00 ADC   [X+6],0x0
    1492: 7C 31 E4 LCALL 0x31E4
    1495: 39 00    CMP   A,0x0
    1497: A0 1F    JZ    0x14B7
    1499: 52 0B    MOV   A,[X+11]
    149B: 53 4E    MOV   [__r1],A
    149D: 52 0A    MOV   A,[X+10]
    149F: 53 4F    MOV   [__r0],A
    14A1: 51 4E    MOV   A,[__r1]
    14A3: 11 01    SUB   A,0x1
    14A5: 54 0B    MOV   [X+11],A
    14A7: 51 4F    MOV   A,[__r0]
    14A9: 19 00    SBB   A,0x0
    14AB: 54 0A    MOV   [X+10],A
    14AD: 3C 4F 00 CMP   [__r0],0x0
    14B0: BF C4    JNZ   0x1475
    14B2: 3C 4E 00 CMP   [__r1],0x0
    14B5: BF BF    JNZ   0x1475
    14B7: 62 D0 00 MOV   REG[0xD0],0x0
    14BA: 52 03    MOV   A,[X+3]
    14BC: 21 04    AND   A,0x4
    14BE: 53 4E    MOV   [__r1],A
    14C0: 52 02    MOV   A,[X+2]
    14C2: 21 00    AND   A,0x0
    14C4: 39 00    CMP   A,0x0
    14C6: B0 06    JNZ   0x14CD
    14C8: 3C 4E 00 CMP   [__r1],0x0
    14CB: A0 DD    JZ    0x15A9
    14CD: 80 20    JMP   0x14EE
    14CF: 10       PUSH  X
    14D0: 50 20    MOV   A,0x20
    14D2: 08       PUSH  A
    14D3: 62 D0 00 MOV   REG[0xD0],0x0
    14D6: 52 FC    MOV   A,[X-4]
    14D8: 53 4E    MOV   [__r1],A
    14DA: 52 FB    MOV   A,[X-5]
    14DC: 58 4E    MOV   X,[__r1]
    14DE: 7C 1C 69 LCALL __plcall
    14E1: 38 FF    ADD   SP,0xFF
    14E3: 20       POP   X
    14E4: 77 09    INC   [X+9]
    14E6: 0F 08 00 ADC   [X+8],0x0
    14E9: 7B 05    DEC   [X+5]
    14EB: 1F 04 00 SBB   [X+4],0x0
    14EE: 50 00    MOV   A,0x0
    14F0: 13 05    SUB   A,[X+5]
    14F2: 52 04    MOV   A,[X+4]
    14F4: 7C 31 5D LCALL 0x315D
    14F7: CF D7    JC    0x14CF
    14F9: 80 AF    JMP   0x15A9
    14FB: 56 1C 01 MOV   [X+28],0x1
    14FE: 56 1B 00 MOV   [X+27],0x0
    1501: 80 1F    JMP   0x1521
    1503: 56 1C 02 MOV   [X+28],0x2
    1506: 56 1B 00 MOV   [X+27],0x0
    1509: 80 17    JMP   0x1521
    150B: 56 1C 00 MOV   [X+28],0x0
    150E: 56 1B 00 MOV   [X+27],0x0
    1511: 80 0F    JMP   0x1521
    1513: 56 1C 03 MOV   [X+28],0x3
    1516: 56 1B 00 MOV   [X+27],0x0
    1519: 80 07    JMP   0x1521
    151B: 56 1C 04 MOV   [X+28],0x4
    151E: 56 1B 00 MOV   [X+27],0x0
    1521: 07 F8 FC ADD   [X-8],0xFC
    1524: 7C 31 3B LCALL 0x313B
    1527: 54 1D    MOV   [X+29],A
    1529: 3E 4E    MVI   A,[__r1]
    152B: 54 1E    MOV   [X+30],A
    152D: 3E 4E    MVI   A,[__r1]
    152F: 54 1F    MOV   [X+31],A
    1531: 3E 4E    MVI   A,[__r1]
    1533: 54 20    MOV   [X+32],A
    1535: 3D 0A FF CMP   [X+10],0xFF
    1538: B0 0C    JNZ   0x1545
    153A: 3D 0B FF CMP   [X+11],0xFF
    153D: B0 07    JNZ   0x1545
    153F: 56 0B 06 MOV   [X+11],0x6
    1542: 56 0A 00 MOV   [X+10],0x0
    1545: 52 0A    MOV   A,[X+10]
    1547: 08       PUSH  A
    1548: 52 0B    MOV   A,[X+11]
    154A: 08       PUSH  A
    154B: 52 04    MOV   A,[X+4]
    154D: 08       PUSH  A
    154E: 52 05    MOV   A,[X+5]
    1550: 08       PUSH  A
    1551: 52 02    MOV   A,[X+2]
    1553: 08       PUSH  A
    1554: 52 03    MOV   A,[X+3]
    1556: 08       PUSH  A
    1557: 52 1D    MOV   A,[X+29]
    1559: 08       PUSH  A
    155A: 52 1E    MOV   A,[X+30]
    155C: 08       PUSH  A
    155D: 52 1F    MOV   A,[X+31]
    155F: 08       PUSH  A
    1560: 52 20    MOV   A,[X+32]
    1562: 08       PUSH  A
    1563: 52 1B    MOV   A,[X+27]
    1565: 08       PUSH  A
    1566: 52 1C    MOV   A,[X+28]
    1568: 08       PUSH  A
    1569: 50 00    MOV   A,0x0
    156B: 08       PUSH  A
    156C: 50 08    MOV   A,0x8
    156E: 08       PUSH  A
    156F: 7C 25 86 LCALL __FormatFP_1
    1572: 38 F2    ADD   SP,0xF2
    1574: 62 D0 00 MOV   REG[0xD0],0x0
    1577: 51 4E    MOV   A,[__r1]
    1579: 54 07    MOV   [X+7],A
    157B: 51 4F    MOV   A,[__r0]
    157D: 54 06    MOV   [X+6],A
    157F: 80 22    JMP   0x15A2
    1581: 62 D0 00 MOV   REG[0xD0],0x0
    1584: 7C 32 A5 LCALL 0x32A5
    1587: 51 4F    MOV   A,[__r0]
    1589: 60 D4    MOV   REG[0xD4],A
    158B: 3E 4E    MVI   A,[__r1]
    158D: 10       PUSH  X
    158E: 08       PUSH  A
    158F: 52 FC    MOV   A,[X-4]
    1591: 53 4E    MOV   [__r1],A
    1593: 52 FB    MOV   A,[X-5]
    1595: 58 4E    MOV   X,[__r1]
    1597: 7C 1C 69 LCALL __plcall
    159A: 38 FF    ADD   SP,0xFF
    159C: 20       POP   X
    159D: 77 09    INC   [X+9]
    159F: 0F 08 00 ADC   [X+8],0x0
    15A2: 7C 31 E4 LCALL 0x31E4
    15A5: 39 00    CMP   A,0x0
    15A7: BF D9    JNZ   0x1581
    15A9: 77 FA    INC   [X-6]
    15AB: 0F F9 00 ADC   [X-7],0x0
    15AE: 7C 30 FC LCALL 0x30FC
    15B1: 39 00    CMP   A,0x0
    15B3: A0 04    JZ    0x15B8
    15B5: 7D 0B 22 LJMP  0x0B22
    15B8: 52 09    MOV   A,[X+9]
    15BA: 53 4E    MOV   [__r1],A
    15BC: 52 08    MOV   A,[X+8]
    15BE: 53 4F    MOV   [__r0],A
    15C0: 38 DF    ADD   SP,0xDF
    15C2: 20       POP   X
    15C3: 7F       RET   
    15C4: 10       PUSH  X
    15C5: 4F       MOV   X,SP
    15C6: 38 04    ADD   SP,0x4
    15C8: 80 06    JMP   0x15CF
    15CA: 77 FC    INC   [X-4]
    15CC: 0F FB 00 ADC   [X-5],0x0
    15CF: 7C 32 1E LCALL 0x321E
    15D2: 53 4E    MOV   [__r1],A
    15D4: 50 00    MOV   A,0x0
    15D6: 08       PUSH  A
    15D7: 51 4E    MOV   A,[__r1]
    15D9: 08       PUSH  A
    15DA: 7C 25 01 LCALL _isspace
    15DD: 38 FE    ADD   SP,0xFE
    15DF: 62 D0 00 MOV   REG[0xD0],0x0
    15E2: 3C 4F 00 CMP   [__r0],0x0
    15E5: BF E4    JNZ   0x15CA
    15E7: 3C 4E 00 CMP   [__r1],0x0
    15EA: BF DF    JNZ   0x15CA
    15EC: 56 03 00 MOV   [X+3],0x0
    15EF: 56 02 00 MOV   [X+2],0x0
    15F2: 52 FC    MOV   A,[X-4]
    15F4: 53 4E    MOV   [__r1],A
    15F6: 52 FB    MOV   A,[X-5]
    15F8: 10       PUSH  X
    15F9: 58 4E    MOV   X,[__r1]
    15FB: 28       ROMX  
    15FC: 20       POP   X
    15FD: 39 2D    CMP   A,0x2D
    15FF: B0 0E    JNZ   0x160E
    1601: 56 03 01 MOV   [X+3],0x1
    1604: 56 02 00 MOV   [X+2],0x0
    1607: 77 FC    INC   [X-4]
    1609: 0F FB 00 ADC   [X-5],0x0
    160C: 80 0D    JMP   0x161A
    160E: 7C 32 1E LCALL 0x321E
    1611: 39 2B    CMP   A,0x2B
    1613: B0 06    JNZ   0x161A
    1615: 77 FC    INC   [X-4]
    1617: 0F FB 00 ADC   [X-5],0x0
    161A: 56 01 00 MOV   [X+1],0x0
    161D: 56 00 00 MOV   [X+0],0x0
    1620: 80 6D    JMP   0x168E
    1622: 7C 31 F2 LCALL 0x31F2
    1625: 51 4E    MOV   A,[__r1]
    1627: 01 01    ADD   A,0x1
    1629: 54 FC    MOV   [X-4],A
    162B: 51 4F    MOV   A,[__r0]
    162D: 09 00    ADC   A,0x0
    162F: 54 FB    MOV   [X-5],A
    1631: 52 01    MOV   A,[X+1]
    1633: 53 4C    MOV   [__r3],A
    1635: 52 00    MOV   A,[X+0]
    1637: 53 4D    MOV   [__r2],A
    1639: 55 4A 0A MOV   [__r5],0xA
    163C: 55 4B 00 MOV   [__r4],0x0
    163F: 55 43 00 MOV   [__rX],0x0
    1642: 55 42 00 MOV   [__rY],0x0
    1645: 3C 4B 00 CMP   [__r4],0x0
    1648: B0 06    JNZ   0x164F
    164A: 3C 4A 00 CMP   [__r5],0x0
    164D: A0 1A    JZ    0x1668
    164F: 70 FB    AND   F,0xFB
    1651: 6E 4B    RRC   [__r4]
    1653: 6E 4A    RRC   [__r5]
    1655: D0 0C    JNC   0x1662
    1657: 62 D0 00 MOV   REG[0xD0],0x0
    165A: 51 4C    MOV   A,[__r3]
    165C: 04 43    ADD   [__rX],A
    165E: 51 4D    MOV   A,[__r2]
    1660: 0C 42    ADC   [__rY],A
    1662: 65 4C    ASL   [__r3]
    1664: 6B 4D    RLC   [__r2]
    1666: 8F DE    JMP   0x1645
    1668: 5F 4C 43 MOV   [__r3],[__rX]
    166B: 5F 4D 42 MOV   [__r2],[__rY]
    166E: 62 D0 00 MOV   REG[0xD0],0x0
    1671: 51 4F    MOV   A,[__r0]
    1673: 7C 32 BA LCALL 0x32BA
    1676: 51 4C    MOV   A,[__r3]
    1678: 02 4E    ADD   A,[__r1]
    167A: 53 4E    MOV   [__r1],A
    167C: 51 4D    MOV   A,[__r2]
    167E: 0A 4F    ADC   A,[__r0]
    1680: 53 4F    MOV   [__r0],A
    1682: 51 4E    MOV   A,[__r1]
    1684: 11 30    SUB   A,0x30
    1686: 54 01    MOV   [X+1],A
    1688: 51 4F    MOV   A,[__r0]
    168A: 19 00    SBB   A,0x0
    168C: 54 00    MOV   [X+0],A
    168E: 7C 32 1E LCALL 0x321E
    1691: 53 4E    MOV   [__r1],A
    1693: 50 00    MOV   A,0x0
    1695: 08       PUSH  A
    1696: 51 4E    MOV   A,[__r1]
    1698: 08       PUSH  A
    1699: 7C 24 CD LCALL _isdigit
    169C: 38 FE    ADD   SP,0xFE
    169E: 62 D0 00 MOV   REG[0xD0],0x0
    16A1: 3C 4F 00 CMP   [__r0],0x0
    16A4: BF 7D    JNZ   0x1622
    16A6: 3C 4E 00 CMP   [__r1],0x0
    16A9: BF 78    JNZ   0x1622
    16AB: 3D 02 00 CMP   [X+2],0x0
    16AE: B0 06    JNZ   0x16B5
    16B0: 3D 03 00 CMP   [X+3],0x0
    16B3: A0 14    JZ    0x16C8
    16B5: 62 D0 00 MOV   REG[0xD0],0x0
    16B8: 52 01    MOV   A,[X+1]
    16BA: 73       CPL   A
    16BB: 11 FF    SUB   A,0xFF
    16BD: 53 4E    MOV   [__r1],A
    16BF: 52 00    MOV   A,[X+0]
    16C1: 73       CPL   A
    16C2: 19 FF    SBB   A,0xFF
    16C4: 53 4F    MOV   [__r0],A
    16C6: 80 04    JMP   0x16CB
    16C8: 7C 30 F0 LCALL 0x30F0
    16CB: 38 FC    ADD   SP,0xFC
    16CD: 20       POP   X
    16CE: 7F       RET   
_strlenLMM:
    1C1F: 62 D0 00 MOV   REG[0xD0],0x0
    1C22: 10       PUSH  X
    1C23: 4F       MOV   X,SP
    1C24: 52 FB    MOV   A,[X-5]
    1C26: 60 D4    MOV   REG[0xD4],A
    1C28: 80 03    JMP   0x1C2C
_strlen:
    1C2A: 10       PUSH  X
    1C2B: 4F       MOV   X,SP
    1C2C: 55 4E 00 MOV   [__r1],0x0
    1C2F: 55 4F 00 MOV   [__r0],0x0
    1C32: 52 FC    MOV   A,[X-4]
    1C34: 53 4D    MOV   [__r2],A
    1C36: 3E 4D    MVI   A,[__r2]
    1C38: 39 00    CMP   A,0x0
    1C3A: A0 08    JZ    0x1C43
    1C3C: 76 4E    INC   [__r1]
    1C3E: 0E 4F 00 ADC   [__r0],0x0
    1C41: 8F F4    JMP   0x1C36
    1C43: 20       POP   X
    1C44: 7F       RET   
_cstrlenLMM:
    1C45: 62 D0 00 MOV   REG[0xD0],0x0
_cstrlen:
    1C48: 10       PUSH  X
    1C49: 4F       MOV   X,SP
    1C4A: 55 4E 00 MOV   [__r1],0x0
    1C4D: 55 4F 00 MOV   [__r0],0x0
    1C50: 10       PUSH  X
    1C51: 52 FB    MOV   A,[X-5]
    1C53: 59 FC    MOV   X,[X-4]
    1C55: 28       ROMX  
    1C56: 20       POP   X
    1C57: 39 00    CMP   A,0x0
    1C59: A0 0D    JZ    0x1C67
    1C5B: 76 4E    INC   [__r1]
    1C5D: 0E 4F 00 ADC   [__r0],0x0
    1C60: 77 FC    INC   [X-4]
    1C62: 0F FB 00 ADC   [X-5],0x0
    1C65: 8F EA    JMP   0x1C50
    1C67: 20       POP   X
    1C68: 7F       RET   
__plcall:
    1C69: 53 43    MOV   [__rX],A
    1C6B: 28       ROMX  
    1C6C: 08       PUSH  A
    1C6D: 51 43    MOV   A,[__rX]
    1C6F: 75       INC   X
    1C70: 09 00    ADC   A,0x0
    1C72: 28       ROMX  
    1C73: 08       PUSH  A
    1C74: 7F       RET   
_itoa:
    1C75: 10       PUSH  X
    1C76: 4F       MOV   X,SP
    1C77: 38 09    ADD   SP,0x9
    1C79: 52 FA    MOV   A,[X-6]
    1C7B: 54 03    MOV   [X+3],A
    1C7D: 52 F9    MOV   A,[X-7]
    1C7F: 54 02    MOV   [X+2],A
    1C81: 3D F9 00 CMP   [X-7],0x0
    1C84: B0 0B    JNZ   0x1C90
    1C86: 3D FA 00 CMP   [X-6],0x0
    1C89: B0 06    JNZ   0x1C90
    1C8B: 7C 31 BC LCALL 0x31BC
    1C8E: 81 09    JMP   0x1D98
    1C90: 52 FA    MOV   A,[X-6]
    1C92: 11 00    SUB   A,0x0
    1C94: 52 F9    MOV   A,[X-7]
    1C96: 31 80    XOR   A,0x80
    1C98: 19 80    SBB   A,0x80
    1C9A: D0 1E    JNC   0x1CB9
    1C9C: 3D F7 00 CMP   [X-9],0x0
    1C9F: B0 19    JNZ   0x1CB9
    1CA1: 3D F8 0A CMP   [X-8],0xA
    1CA4: B0 14    JNZ   0x1CB9
    1CA6: 56 06 01 MOV   [X+6],0x1
    1CA9: 62 D0 00 MOV   REG[0xD0],0x0
    1CAC: 52 03    MOV   A,[X+3]
    1CAE: 73       CPL   A
    1CAF: 53 4E    MOV   [__r1],A
    1CB1: 52 02    MOV   A,[X+2]
    1CB3: 73       CPL   A
    1CB4: 7C 32 7C LCALL 0x327C
    1CB7: 80 04    JMP   0x1CBC
    1CB9: 56 06 00 MOV   [X+6],0x0
    1CBC: 52 FC    MOV   A,[X-4]
    1CBE: 54 01    MOV   [X+1],A
    1CC0: 52 FB    MOV   A,[X-5]
    1CC2: 54 00    MOV   [X+0],A
    1CC4: 62 D0 00 MOV   REG[0xD0],0x0
    1CC7: 52 F7    MOV   A,[X-9]
    1CC9: 08       PUSH  A
    1CCA: 52 F8    MOV   A,[X-8]
    1CCC: 08       PUSH  A
    1CCD: 52 02    MOV   A,[X+2]
    1CCF: 08       PUSH  A
    1CD0: 52 03    MOV   A,[X+3]
    1CD2: 08       PUSH  A
    1CD3: 7C 16 CF LCALL 0x16CF
    1CD6: 38 FE    ADD   SP,0xFE
    1CD8: 18       POP   A
    1CD9: 53 4E    MOV   [__r1],A
    1CDB: 18       POP   A
    1CDC: 53 4F    MOV   [__r0],A
    1CDE: 51 4E    MOV   A,[__r1]
    1CE0: 54 08    MOV   [X+8],A
    1CE2: 51 4F    MOV   A,[__r0]
    1CE4: 54 07    MOV   [X+7],A
    1CE6: 50 09    MOV   A,0x9
    1CE8: 13 08    SUB   A,[X+8]
    1CEA: 52 07    MOV   A,[X+7]
    1CEC: 31 80    XOR   A,0x80
    1CEE: 53 43    MOV   [__rX],A
    1CF0: 50 80    MOV   A,0x80
    1CF2: 1A 43    SBB   A,[__rX]
    1CF4: C0 0D    JC    0x1D02
    1CF6: 7C 30 C3 LCALL <created procedures>
    1CF9: 52 08    MOV   A,[X+8]
    1CFB: 01 30    ADD   A,0x30
    1CFD: 7C 31 30 LCALL 0x3130
    1D00: 80 0B    JMP   0x1D0C
    1D02: 7C 30 C3 LCALL <created procedures>
    1D05: 52 08    MOV   A,[X+8]
    1D07: 01 57    ADD   A,0x57
    1D09: 7C 31 30 LCALL 0x3130
    1D0C: 52 F7    MOV   A,[X-9]
    1D0E: 08       PUSH  A
    1D0F: 52 F8    MOV   A,[X-8]
    1D11: 08       PUSH  A
    1D12: 52 02    MOV   A,[X+2]
    1D14: 08       PUSH  A
    1D15: 52 03    MOV   A,[X+3]
    1D17: 08       PUSH  A
    1D18: 62 D0 00 MOV   REG[0xD0],0x0
    1D1B: 7C 16 CF LCALL 0x16CF
    1D1E: 18       POP   A
    1D1F: 54 03    MOV   [X+3],A
    1D21: 18       POP   A
    1D22: 54 02    MOV   [X+2],A
    1D24: 38 FE    ADD   SP,0xFE
    1D26: 3D 02 00 CMP   [X+2],0x0
    1D29: BF 9A    JNZ   0x1CC4
    1D2B: 3D 03 00 CMP   [X+3],0x0
    1D2E: BF 95    JNZ   0x1CC4
    1D30: 3D 06 00 CMP   [X+6],0x0
    1D33: A0 0C    JZ    0x1D40
    1D35: 7C 30 C3 LCALL <created procedures>
    1D38: 51 4F    MOV   A,[__r0]
    1D3A: 60 D5    MOV   REG[0xD5],A
    1D3C: 50 2D    MOV   A,0x2D
    1D3E: 3F 4E    MVI   [__r1],A
    1D40: 7C 30 F0 LCALL 0x30F0
    1D43: 7C 31 4C LCALL 0x314C
    1D46: 50 00    MOV   A,0x0
    1D48: 3F 4E    MVI   [__r1],A
    1D4A: 52 FC    MOV   A,[X-4]
    1D4C: 54 05    MOV   [X+5],A
    1D4E: 52 FB    MOV   A,[X-5]
    1D50: 54 04    MOV   [X+4],A
    1D52: 80 38    JMP   0x1D8B
    1D54: 62 D0 00 MOV   REG[0xD0],0x0
    1D57: 52 05    MOV   A,[X+5]
    1D59: 53 4E    MOV   [__r1],A
    1D5B: 52 04    MOV   A,[X+4]
    1D5D: 60 D4    MOV   REG[0xD4],A
    1D5F: 3E 4E    MVI   A,[__r1]
    1D61: 54 06    MOV   [X+6],A
    1D63: 52 05    MOV   A,[X+5]
    1D65: 53 4E    MOV   [__r1],A
    1D67: 52 04    MOV   A,[X+4]
    1D69: 53 4F    MOV   [__r0],A
    1D6B: 51 4E    MOV   A,[__r1]
    1D6D: 01 01    ADD   A,0x1
    1D6F: 54 05    MOV   [X+5],A
    1D71: 51 4F    MOV   A,[__r0]
    1D73: 09 00    ADC   A,0x0
    1D75: 54 04    MOV   [X+4],A
    1D77: 52 01    MOV   A,[X+1]
    1D79: 53 4C    MOV   [__r3],A
    1D7B: 52 00    MOV   A,[X+0]
    1D7D: 60 D4    MOV   REG[0xD4],A
    1D7F: 3E 4C    MVI   A,[__r3]
    1D81: 7C 31 30 LCALL 0x3130
    1D84: 7C 31 17 LCALL 0x3117
    1D87: 52 06    MOV   A,[X+6]
    1D89: 3F 4E    MVI   [__r1],A
    1D8B: 52 05    MOV   A,[X+5]
    1D8D: 13 01    SUB   A,[X+1]
    1D8F: 52 04    MOV   A,[X+4]
    1D91: 1B 00    SBB   A,[X+0]
    1D93: CF C0    JC    0x1D54
    1D95: 7C 31 F2 LCALL 0x31F2
    1D98: 38 F7    ADD   SP,0xF7
    1D9A: 20       POP   X
    1D9B: 7F       RET   
_ltoa:
    1D9C: 10       PUSH  X
    1D9D: 4F       MOV   X,SP
    1D9E: 38 0B    ADD   SP,0xB
    1DA0: 52 F7    MOV   A,[X-9]
    1DA2: 54 02    MOV   [X+2],A
    1DA4: 52 F8    MOV   A,[X-8]
    1DA6: 54 03    MOV   [X+3],A
    1DA8: 52 F9    MOV   A,[X-7]
    1DAA: 54 04    MOV   [X+4],A
    1DAC: 52 FA    MOV   A,[X-6]
    1DAE: 54 05    MOV   [X+5],A
    1DB0: 3D F7 00 CMP   [X-9],0x0
    1DB3: B0 15    JNZ   0x1DC9
    1DB5: 3D F8 00 CMP   [X-8],0x0
    1DB8: B0 10    JNZ   0x1DC9
    1DBA: 3D F9 00 CMP   [X-7],0x0
    1DBD: B0 0B    JNZ   0x1DC9
    1DBF: 3D FA 00 CMP   [X-6],0x0
    1DC2: B0 06    JNZ   0x1DC9
    1DC4: 7C 31 BC LCALL 0x31BC
    1DC7: 81 87    JMP   0x1F4F
    1DC9: 52 FA    MOV   A,[X-6]
    1DCB: 11 00    SUB   A,0x0
    1DCD: 52 F9    MOV   A,[X-7]
    1DCF: 19 00    SBB   A,0x0
    1DD1: 52 F8    MOV   A,[X-8]
    1DD3: 19 00    SBB   A,0x0
    1DD5: 52 F7    MOV   A,[X-9]
    1DD7: 31 80    XOR   A,0x80
    1DD9: 19 80    SBB   A,0x80
    1DDB: D0 3B    JNC   0x1E17
    1DDD: 3D F5 00 CMP   [X-11],0x0
    1DE0: B0 36    JNZ   0x1E17
    1DE2: 3D F6 0A CMP   [X-10],0xA
    1DE5: B0 31    JNZ   0x1E17
    1DE7: 56 08 01 MOV   [X+8],0x1
    1DEA: 62 D0 00 MOV   REG[0xD0],0x0
    1DED: 52 02    MOV   A,[X+2]
    1DEF: 73       CPL   A
    1DF0: 53 4F    MOV   [__r0],A
    1DF2: 52 03    MOV   A,[X+3]
    1DF4: 73       CPL   A
    1DF5: 53 4E    MOV   [__r1],A
    1DF7: 52 04    MOV   A,[X+4]
    1DF9: 73       CPL   A
    1DFA: 53 4D    MOV   [__r2],A
    1DFC: 52 05    MOV   A,[X+5]
    1DFE: 73       CPL   A
    1DFF: 01 01    ADD   A,0x1
    1E01: 54 05    MOV   [X+5],A
    1E03: 51 4D    MOV   A,[__r2]
    1E05: 09 00    ADC   A,0x0
    1E07: 54 04    MOV   [X+4],A
    1E09: 51 4E    MOV   A,[__r1]
    1E0B: 09 00    ADC   A,0x0
    1E0D: 54 03    MOV   [X+3],A
    1E0F: 51 4F    MOV   A,[__r0]
    1E11: 09 00    ADC   A,0x0
    1E13: 54 02    MOV   [X+2],A
    1E15: 80 04    JMP   0x1E1A
    1E17: 56 08 00 MOV   [X+8],0x0
    1E1A: 52 FC    MOV   A,[X-4]
    1E1C: 54 01    MOV   [X+1],A
    1E1E: 52 FB    MOV   A,[X-5]
    1E20: 54 00    MOV   [X+0],A
    1E22: 62 D0 00 MOV   REG[0xD0],0x0
    1E25: 52 F6    MOV   A,[X-10]
    1E27: 53 4C    MOV   [__r3],A
    1E29: 52 F5    MOV   A,[X-11]
    1E2B: 53 4D    MOV   [__r2],A
    1E2D: 47 4D 80 TST   [__r2],0x80
    1E30: A0 09    JZ    0x1E3A
    1E32: 55 4E FF MOV   [__r1],0xFF
    1E35: 55 4F FF MOV   [__r0],0xFF
    1E38: 80 0A    JMP   0x1E43
    1E3A: 62 D0 00 MOV   REG[0xD0],0x0
    1E3D: 55 4E 00 MOV   [__r1],0x0
    1E40: 55 4F 00 MOV   [__r0],0x0
    1E43: 62 D0 00 MOV   REG[0xD0],0x0
    1E46: 51 4F    MOV   A,[__r0]
    1E48: 08       PUSH  A
    1E49: 51 4E    MOV   A,[__r1]
    1E4B: 08       PUSH  A
    1E4C: 51 4D    MOV   A,[__r2]
    1E4E: 08       PUSH  A
    1E4F: 51 4C    MOV   A,[__r3]
    1E51: 08       PUSH  A
    1E52: 52 02    MOV   A,[X+2]
    1E54: 08       PUSH  A
    1E55: 52 03    MOV   A,[X+3]
    1E57: 08       PUSH  A
    1E58: 52 04    MOV   A,[X+4]
    1E5A: 08       PUSH  A
    1E5B: 52 05    MOV   A,[X+5]
    1E5D: 08       PUSH  A
    1E5E: 7C 16 DA LCALL 0x16DA
    1E61: 38 FC    ADD   SP,0xFC
    1E63: 18       POP   A
    1E64: 53 4C    MOV   [__r3],A
    1E66: 18       POP   A
    1E67: 53 4D    MOV   [__r2],A
    1E69: 18       POP   A
    1E6A: 18       POP   A
    1E6B: 51 4C    MOV   A,[__r3]
    1E6D: 53 4E    MOV   [__r1],A
    1E6F: 51 4D    MOV   A,[__r2]
    1E71: 53 4F    MOV   [__r0],A
    1E73: 51 4E    MOV   A,[__r1]
    1E75: 54 0A    MOV   [X+10],A
    1E77: 51 4F    MOV   A,[__r0]
    1E79: 54 09    MOV   [X+9],A
    1E7B: 50 09    MOV   A,0x9
    1E7D: 13 0A    SUB   A,[X+10]
    1E7F: 52 09    MOV   A,[X+9]
    1E81: 31 80    XOR   A,0x80
    1E83: 53 43    MOV   [__rX],A
    1E85: 50 80    MOV   A,0x80
    1E87: 1A 43    SBB   A,[__rX]
    1E89: C0 0D    JC    0x1E97
    1E8B: 7C 30 C3 LCALL <created procedures>
    1E8E: 52 0A    MOV   A,[X+10]
    1E90: 01 30    ADD   A,0x30
    1E92: 7C 31 30 LCALL 0x3130
    1E95: 80 0B    JMP   0x1EA1
    1E97: 7C 30 C3 LCALL <created procedures>
    1E9A: 52 0A    MOV   A,[X+10]
    1E9C: 01 57    ADD   A,0x57
    1E9E: 7C 31 30 LCALL 0x3130
    1EA1: 62 D0 00 MOV   REG[0xD0],0x0
    1EA4: 52 F6    MOV   A,[X-10]
    1EA6: 53 4C    MOV   [__r3],A
    1EA8: 52 F5    MOV   A,[X-11]
    1EAA: 53 4D    MOV   [__r2],A
    1EAC: 47 4D 80 TST   [__r2],0x80
    1EAF: A0 09    JZ    0x1EB9
    1EB1: 55 4E FF MOV   [__r1],0xFF
    1EB4: 55 4F FF MOV   [__r0],0xFF
    1EB7: 80 0A    JMP   0x1EC2
    1EB9: 62 D0 00 MOV   REG[0xD0],0x0
    1EBC: 55 4E 00 MOV   [__r1],0x0
    1EBF: 55 4F 00 MOV   [__r0],0x0
    1EC2: 62 D0 00 MOV   REG[0xD0],0x0
    1EC5: 51 4F    MOV   A,[__r0]
    1EC7: 08       PUSH  A
    1EC8: 51 4E    MOV   A,[__r1]
    1ECA: 08       PUSH  A
    1ECB: 51 4D    MOV   A,[__r2]
    1ECD: 08       PUSH  A
    1ECE: 51 4C    MOV   A,[__r3]
    1ED0: 08       PUSH  A
    1ED1: 52 02    MOV   A,[X+2]
    1ED3: 08       PUSH  A
    1ED4: 52 03    MOV   A,[X+3]
    1ED6: 08       PUSH  A
    1ED7: 52 04    MOV   A,[X+4]
    1ED9: 08       PUSH  A
    1EDA: 52 05    MOV   A,[X+5]
    1EDC: 08       PUSH  A
    1EDD: 7C 16 DA LCALL 0x16DA
    1EE0: 18       POP   A
    1EE1: 54 05    MOV   [X+5],A
    1EE3: 18       POP   A
    1EE4: 54 04    MOV   [X+4],A
    1EE6: 18       POP   A
    1EE7: 54 03    MOV   [X+3],A
    1EE9: 18       POP   A
    1EEA: 54 02    MOV   [X+2],A
    1EEC: 38 FC    ADD   SP,0xFC
    1EEE: 3D 02 00 CMP   [X+2],0x0
    1EF1: BF 30    JNZ   0x1E22
    1EF3: 3D 03 00 CMP   [X+3],0x0
    1EF6: BF 2B    JNZ   0x1E22
    1EF8: 3D 04 00 CMP   [X+4],0x0
    1EFB: BF 26    JNZ   0x1E22
    1EFD: 3D 05 00 CMP   [X+5],0x0
    1F00: BF 21    JNZ   0x1E22
    1F02: 3D 08 00 CMP   [X+8],0x0
    1F05: A0 0C    JZ    0x1F12
    1F07: 7C 30 C3 LCALL <created procedures>
    1F0A: 51 4F    MOV   A,[__r0]
    1F0C: 60 D5    MOV   REG[0xD5],A
    1F0E: 50 2D    MOV   A,0x2D
    1F10: 3F 4E    MVI   [__r1],A
    1F12: 7C 30 F0 LCALL 0x30F0
    1F15: 7C 31 4C LCALL 0x314C
    1F18: 50 00    MOV   A,0x0
    1F1A: 3F 4E    MVI   [__r1],A
    1F1C: 52 FC    MOV   A,[X-4]
    1F1E: 54 07    MOV   [X+7],A
    1F20: 52 FB    MOV   A,[X-5]
    1F22: 54 06    MOV   [X+6],A
    1F24: 80 1D    JMP   0x1F42
    1F26: 7C 31 E4 LCALL 0x31E4
    1F29: 54 08    MOV   [X+8],A
    1F2B: 7C 32 A5 LCALL 0x32A5
    1F2E: 52 01    MOV   A,[X+1]
    1F30: 53 4C    MOV   [__r3],A
    1F32: 52 00    MOV   A,[X+0]
    1F34: 60 D4    MOV   REG[0xD4],A
    1F36: 3E 4C    MVI   A,[__r3]
    1F38: 7C 31 30 LCALL 0x3130
    1F3B: 7C 31 17 LCALL 0x3117
    1F3E: 52 08    MOV   A,[X+8]
    1F40: 3F 4E    MVI   [__r1],A
    1F42: 52 07    MOV   A,[X+7]
    1F44: 13 01    SUB   A,[X+1]
    1F46: 52 06    MOV   A,[X+6]
    1F48: 1B 00    SBB   A,[X+0]
    1F4A: CF DB    JC    0x1F26
    1F4C: 7C 31 F2 LCALL 0x31F2
    1F4F: 38 F5    ADD   SP,0xF5
    1F51: 20       POP   X
    1F52: 7F       RET   
_ultoa:
    1F53: 10       PUSH  X
    1F54: 4F       MOV   X,SP
    1F55: 38 07    ADD   SP,0x7
    1F57: 52 FC    MOV   A,[X-4]
    1F59: 54 01    MOV   [X+1],A
    1F5B: 52 FB    MOV   A,[X-5]
    1F5D: 54 00    MOV   [X+0],A
    1F5F: 62 D0 00 MOV   REG[0xD0],0x0
    1F62: 52 F6    MOV   A,[X-10]
    1F64: 53 4C    MOV   [__r3],A
    1F66: 52 F5    MOV   A,[X-11]
    1F68: 53 4D    MOV   [__r2],A
    1F6A: 47 4D 80 TST   [__r2],0x80
    1F6D: A0 09    JZ    0x1F77
    1F6F: 55 4E FF MOV   [__r1],0xFF
    1F72: 55 4F FF MOV   [__r0],0xFF
    1F75: 80 0A    JMP   0x1F80
    1F77: 62 D0 00 MOV   REG[0xD0],0x0
    1F7A: 55 4E 00 MOV   [__r1],0x0
    1F7D: 55 4F 00 MOV   [__r0],0x0
    1F80: 62 D0 00 MOV   REG[0xD0],0x0
    1F83: 51 4F    MOV   A,[__r0]
    1F85: 08       PUSH  A
    1F86: 51 4E    MOV   A,[__r1]
    1F88: 08       PUSH  A
    1F89: 51 4D    MOV   A,[__r2]
    1F8B: 08       PUSH  A
    1F8C: 51 4C    MOV   A,[__r3]
    1F8E: 08       PUSH  A
    1F8F: 52 F7    MOV   A,[X-9]
    1F91: 08       PUSH  A
    1F92: 52 F8    MOV   A,[X-8]
    1F94: 08       PUSH  A
    1F95: 52 F9    MOV   A,[X-7]
    1F97: 08       PUSH  A
    1F98: 52 FA    MOV   A,[X-6]
    1F9A: 08       PUSH  A
    1F9B: 7C 16 DA LCALL 0x16DA
    1F9E: 38 FC    ADD   SP,0xFC
    1FA0: 18       POP   A
    1FA1: 53 4C    MOV   [__r3],A
    1FA3: 18       POP   A
    1FA4: 53 4D    MOV   [__r2],A
    1FA6: 18       POP   A
    1FA7: 18       POP   A
    1FA8: 51 4C    MOV   A,[__r3]
    1FAA: 53 4E    MOV   [__r1],A
    1FAC: 51 4D    MOV   A,[__r2]
    1FAE: 53 4F    MOV   [__r0],A
    1FB0: 51 4E    MOV   A,[__r1]
    1FB2: 54 06    MOV   [X+6],A
    1FB4: 51 4F    MOV   A,[__r0]
    1FB6: 54 05    MOV   [X+5],A
    1FB8: 50 09    MOV   A,0x9
    1FBA: 13 06    SUB   A,[X+6]
    1FBC: 52 05    MOV   A,[X+5]
    1FBE: 31 80    XOR   A,0x80
    1FC0: 53 43    MOV   [__rX],A
    1FC2: 50 80    MOV   A,0x80
    1FC4: 1A 43    SBB   A,[__rX]
    1FC6: C0 0D    JC    0x1FD4
    1FC8: 7C 30 C3 LCALL <created procedures>
    1FCB: 52 06    MOV   A,[X+6]
    1FCD: 01 30    ADD   A,0x30
    1FCF: 7C 31 30 LCALL 0x3130
    1FD2: 80 0B    JMP   0x1FDE
    1FD4: 7C 30 C3 LCALL <created procedures>
    1FD7: 52 06    MOV   A,[X+6]
    1FD9: 01 57    ADD   A,0x57
    1FDB: 7C 31 30 LCALL 0x3130
    1FDE: 62 D0 00 MOV   REG[0xD0],0x0
    1FE1: 52 F6    MOV   A,[X-10]
    1FE3: 53 4C    MOV   [__r3],A
    1FE5: 52 F5    MOV   A,[X-11]
    1FE7: 53 4D    MOV   [__r2],A
    1FE9: 47 4D 80 TST   [__r2],0x80
    1FEC: A0 09    JZ    0x1FF6
    1FEE: 55 4E FF MOV   [__r1],0xFF
    1FF1: 55 4F FF MOV   [__r0],0xFF
    1FF4: 80 0A    JMP   0x1FFF
    1FF6: 62 D0 00 MOV   REG[0xD0],0x0
    1FF9: 55 4E 00 MOV   [__r1],0x0
    1FFC: 55 4F 00 MOV   [__r0],0x0
    1FFF: 62 D0 00 MOV   REG[0xD0],0x0
    2002: 51 4F    MOV   A,[__r0]
    2004: 08       PUSH  A
    2005: 51 4E    MOV   A,[__r1]
    2007: 08       PUSH  A
    2008: 51 4D    MOV   A,[__r2]
    200A: 08       PUSH  A
    200B: 51 4C    MOV   A,[__r3]
    200D: 08       PUSH  A
    200E: 52 F7    MOV   A,[X-9]
    2010: 08       PUSH  A
    2011: 52 F8    MOV   A,[X-8]
    2013: 08       PUSH  A
    2014: 52 F9    MOV   A,[X-7]
    2016: 08       PUSH  A
    2017: 52 FA    MOV   A,[X-6]
    2019: 08       PUSH  A
    201A: 7C 16 DA LCALL 0x16DA
    201D: 18       POP   A
    201E: 54 FA    MOV   [X-6],A
    2020: 18       POP   A
    2021: 54 F9    MOV   [X-7],A
    2023: 18       POP   A
    2024: 54 F8    MOV   [X-8],A
    2026: 18       POP   A
    2027: 54 F7    MOV   [X-9],A
    2029: 38 FC    ADD   SP,0xFC
    202B: 3D F7 00 CMP   [X-9],0x0
    202E: BF 30    JNZ   0x1F5F
    2030: 3D F8 00 CMP   [X-8],0x0
    2033: BF 2B    JNZ   0x1F5F
    2035: 3D F9 00 CMP   [X-7],0x0
    2038: BF 26    JNZ   0x1F5F
    203A: 3D FA 00 CMP   [X-6],0x0
    203D: BF 21    JNZ   0x1F5F
    203F: 7C 30 F0 LCALL 0x30F0
    2042: 7C 31 4C LCALL 0x314C
    2045: 50 00    MOV   A,0x0
    2047: 3F 4E    MVI   [__r1],A
    2049: 52 FC    MOV   A,[X-4]
    204B: 54 03    MOV   [X+3],A
    204D: 52 FB    MOV   A,[X-5]
    204F: 54 02    MOV   [X+2],A
    2051: 80 2D    JMP   0x207F
    2053: 62 D0 00 MOV   REG[0xD0],0x0
    2056: 52 03    MOV   A,[X+3]
    2058: 53 4E    MOV   [__r1],A
    205A: 52 02    MOV   A,[X+2]
    205C: 60 D4    MOV   REG[0xD4],A
    205E: 3E 4E    MVI   A,[__r1]
    2060: 54 04    MOV   [X+4],A
    2062: 52 03    MOV   A,[X+3]
    2064: 53 4E    MOV   [__r1],A
    2066: 52 02    MOV   A,[X+2]
    2068: 7C 32 7C LCALL 0x327C
    206B: 52 01    MOV   A,[X+1]
    206D: 53 4C    MOV   [__r3],A
    206F: 52 00    MOV   A,[X+0]
    2071: 60 D4    MOV   REG[0xD4],A
    2073: 3E 4C    MVI   A,[__r3]
    2075: 7C 31 30 LCALL 0x3130
    2078: 7C 31 17 LCALL 0x3117
    207B: 52 04    MOV   A,[X+4]
    207D: 3F 4E    MVI   [__r1],A
    207F: 52 03    MOV   A,[X+3]
    2081: 13 01    SUB   A,[X+1]
    2083: 52 02    MOV   A,[X+2]
    2085: 1B 00    SBB   A,[X+0]
    2087: CF CB    JC    0x2053
    2089: 7C 31 F2 LCALL 0x31F2
    208C: 38 F9    ADD   SP,0xF9
    208E: 20       POP   X
    208F: 7F       RET   
_utoa:
    2090: 10       PUSH  X
    2091: 4F       MOV   X,SP
    2092: 38 07    ADD   SP,0x7
    2094: 52 FC    MOV   A,[X-4]
    2096: 54 01    MOV   [X+1],A
    2098: 52 FB    MOV   A,[X-5]
    209A: 54 00    MOV   [X+0],A
    209C: 62 D0 00 MOV   REG[0xD0],0x0
    209F: 52 F7    MOV   A,[X-9]
    20A1: 08       PUSH  A
    20A2: 52 F8    MOV   A,[X-8]
    20A4: 08       PUSH  A
    20A5: 52 F9    MOV   A,[X-7]
    20A7: 08       PUSH  A
    20A8: 52 FA    MOV   A,[X-6]
    20AA: 08       PUSH  A
    20AB: 7C 16 CF LCALL 0x16CF
    20AE: 38 FE    ADD   SP,0xFE
    20B0: 18       POP   A
    20B1: 53 4E    MOV   [__r1],A
    20B3: 18       POP   A
    20B4: 53 4F    MOV   [__r0],A
    20B6: 51 4E    MOV   A,[__r1]
    20B8: 54 06    MOV   [X+6],A
    20BA: 51 4F    MOV   A,[__r0]
    20BC: 54 05    MOV   [X+5],A
    20BE: 50 09    MOV   A,0x9
    20C0: 13 06    SUB   A,[X+6]
    20C2: 52 05    MOV   A,[X+5]
    20C4: 31 80    XOR   A,0x80
    20C6: 53 43    MOV   [__rX],A
    20C8: 50 80    MOV   A,0x80
    20CA: 1A 43    SBB   A,[__rX]
    20CC: C0 0D    JC    0x20DA
    20CE: 7C 30 C3 LCALL <created procedures>
    20D1: 52 06    MOV   A,[X+6]
    20D3: 01 30    ADD   A,0x30
    20D5: 7C 31 30 LCALL 0x3130
    20D8: 80 0B    JMP   0x20E4
    20DA: 7C 30 C3 LCALL <created procedures>
    20DD: 52 06    MOV   A,[X+6]
    20DF: 01 57    ADD   A,0x57
    20E1: 7C 31 30 LCALL 0x3130
    20E4: 52 F7    MOV   A,[X-9]
    20E6: 08       PUSH  A
    20E7: 52 F8    MOV   A,[X-8]
    20E9: 08       PUSH  A
    20EA: 52 F9    MOV   A,[X-7]
    20EC: 08       PUSH  A
    20ED: 52 FA    MOV   A,[X-6]
    20EF: 08       PUSH  A
    20F0: 62 D0 00 MOV   REG[0xD0],0x0
    20F3: 7C 16 CF LCALL 0x16CF
    20F6: 18       POP   A
    20F7: 54 FA    MOV   [X-6],A
    20F9: 18       POP   A
    20FA: 54 F9    MOV   [X-7],A
    20FC: 38 FE    ADD   SP,0xFE
    20FE: 3D F9 00 CMP   [X-7],0x0
    2101: BF 9A    JNZ   0x209C
    2103: 3D FA 00 CMP   [X-6],0x0
    2106: BF 95    JNZ   0x209C
    2108: 7C 30 F0 LCALL 0x30F0
    210B: 7C 31 4C LCALL 0x314C
    210E: 50 00    MOV   A,0x0
    2110: 3F 4E    MVI   [__r1],A
    2112: 52 FC    MOV   A,[X-4]
    2114: 54 03    MOV   [X+3],A
    2116: 52 FB    MOV   A,[X-5]
    2118: 54 02    MOV   [X+2],A
    211A: 80 2D    JMP   0x2148
    211C: 62 D0 00 MOV   REG[0xD0],0x0
    211F: 52 03    MOV   A,[X+3]
    2121: 53 4E    MOV   [__r1],A
    2123: 52 02    MOV   A,[X+2]
    2125: 60 D4    MOV   REG[0xD4],A
    2127: 3E 4E    MVI   A,[__r1]
    2129: 54 04    MOV   [X+4],A
    212B: 52 03    MOV   A,[X+3]
    212D: 53 4E    MOV   [__r1],A
    212F: 52 02    MOV   A,[X+2]
    2131: 7C 32 7C LCALL 0x327C
    2134: 52 01    MOV   A,[X+1]
    2136: 53 4C    MOV   [__r3],A
    2138: 52 00    MOV   A,[X+0]
    213A: 60 D4    MOV   REG[0xD4],A
    213C: 3E 4C    MVI   A,[__r3]
    213E: 7C 31 30 LCALL 0x3130
    2141: 7C 31 17 LCALL 0x3117
    2144: 52 04    MOV   A,[X+4]
    2146: 3F 4E    MVI   [__r1],A
    2148: 52 03    MOV   A,[X+3]
    214A: 13 01    SUB   A,[X+1]
    214C: 52 02    MOV   A,[X+2]
    214E: 1B 00    SBB   A,[X+0]
    2150: CF CB    JC    0x211C
    2152: 7C 31 F2 LCALL 0x31F2
    2155: 38 F9    ADD   SP,0xF9
    2157: 20       POP   X
    2158: 7F       RET   
_ftoa:
    2159: 10       PUSH  X
    215A: 4F       MOV   X,SP
    215B: 38 16    ADD   SP,0x16
    215D: 62 D0 00 MOV   REG[0xD0],0x0
    2160: 52 F8    MOV   A,[X-8]
    2162: 53 4E    MOV   [__r1],A
    2164: 52 F7    MOV   A,[X-9]
    2166: 60 D5    MOV   REG[0xD5],A
    2168: 50 00    MOV   A,0x0
    216A: 3F 4E    MVI   [__r1],A
    216C: 3F 4E    MVI   [__r1],A
    216E: 08       PUSH  A
    216F: 08       PUSH  A
    2170: 08       PUSH  A
    2171: 08       PUSH  A
    2172: 52 F9    MOV   A,[X-7]
    2174: 08       PUSH  A
    2175: 52 FA    MOV   A,[X-6]
    2177: 08       PUSH  A
    2178: 52 FB    MOV   A,[X-5]
    217A: 08       PUSH  A
    217B: 52 FC    MOV   A,[X-4]
    217D: 08       PUSH  A
    217E: 7C 18 91 LCALL 0x1891
    2181: 38 F8    ADD   SP,0xF8
    2183: 39 00    CMP   A,0x0
    2185: B0 18    JNZ   0x219E
    2187: 62 D0 00 MOV   REG[0xD0],0x0
    218A: 55 32 30 MOV   [lcdStr+17],0x30
    218D: 55 33 2E MOV   [lcdStr+18],0x2E
    2190: 55 34 30 MOV   [lcdStr+19],0x30
    2193: 55 35 00 MOV   [lcdStr+20],0x0
    2196: 55 4E 32 MOV   [__r1],0x32
    2199: 55 4F 00 MOV   [__r0],0x0
    219C: 83 2C    JMP   0x24C9
    219E: 52 F9    MOV   A,[X-7]
    21A0: 54 06    MOV   [X+6],A
    21A2: 52 FA    MOV   A,[X-6]
    21A4: 54 07    MOV   [X+7],A
    21A6: 52 FB    MOV   A,[X-5]
    21A8: 54 08    MOV   [X+8],A
    21AA: 52 FC    MOV   A,[X-4]
    21AC: 54 09    MOV   [X+9],A
    21AE: 62 D0 00 MOV   REG[0xD0],0x0
    21B1: 52 06    MOV   A,[X+6]
    21B3: 53 4F    MOV   [__r0],A
    21B5: 52 07    MOV   A,[X+7]
    21B7: 53 4E    MOV   [__r1],A
    21B9: 52 08    MOV   A,[X+8]
    21BB: 53 4D    MOV   [__r2],A
    21BD: 52 09    MOV   A,[X+9]
    21BF: 53 4C    MOV   [__r3],A
    21C1: 50 17    MOV   A,0x17
    21C3: 7C 32 6D LCALL 0x326D
    21C6: 51 4C    MOV   A,[__r3]
    21C8: 11 7F    SUB   A,0x7F
    21CA: 54 0B    MOV   [X+11],A
    21CC: 50 00    MOV   A,0x0
    21CE: 19 00    SBB   A,0x0
    21D0: 54 0A    MOV   [X+10],A
    21D2: 52 09    MOV   A,[X+9]
    21D4: 53 4C    MOV   [__r3],A
    21D6: 52 08    MOV   A,[X+8]
    21D8: 53 4D    MOV   [__r2],A
    21DA: 52 07    MOV   A,[X+7]
    21DC: 53 4E    MOV   [__r1],A
    21DE: 52 06    MOV   A,[X+6]
    21E0: 21 00    AND   A,0x0
    21E2: 53 4F    MOV   [__r0],A
    21E4: 51 4C    MOV   A,[__r3]
    21E6: 54 13    MOV   [X+19],A
    21E8: 51 4D    MOV   A,[__r2]
    21EA: 54 12    MOV   [X+18],A
    21EC: 51 4E    MOV   A,[__r1]
    21EE: 29 80    OR    A,0x80
    21F0: 54 11    MOV   [X+17],A
    21F2: 51 4F    MOV   A,[__r0]
    21F4: 54 10    MOV   [X+16],A
    21F6: 56 02 00 MOV   [X+2],0x0
    21F9: 56 03 00 MOV   [X+3],0x0
    21FC: 56 04 00 MOV   [X+4],0x0
    21FF: 56 05 00 MOV   [X+5],0x0
    2202: 56 0C 00 MOV   [X+12],0x0
    2205: 56 0D 00 MOV   [X+13],0x0
    2208: 56 0E 00 MOV   [X+14],0x0
    220B: 56 0F 00 MOV   [X+15],0x0
    220E: 52 0B    MOV   A,[X+11]
    2210: 11 1F    SUB   A,0x1F
    2212: 52 0A    MOV   A,[X+10]
    2214: 31 80    XOR   A,0x80
    2216: 19 80    SBB   A,0x80
    2218: C0 19    JC    0x2232
    221A: 52 F8    MOV   A,[X-8]
    221C: 53 4E    MOV   [__r1],A
    221E: 52 F7    MOV   A,[X-9]
    2220: 60 D5    MOV   REG[0xD5],A
    2222: 50 FF    MOV   A,0xFF
    2224: 3F 4E    MVI   [__r1],A
    2226: 50 FE    MOV   A,0xFE
    2228: 3F 4E    MVI   [__r1],A
    222A: 55 4E 00 MOV   [__r1],0x0
    222D: 55 4F 00 MOV   [__r0],0x0
    2230: 82 98    JMP   0x24C9
    2232: 52 0B    MOV   A,[X+11]
    2234: 11 E9    SUB   A,0xE9
    2236: 52 0A    MOV   A,[X+10]
    2238: 31 80    XOR   A,0x80
    223A: 19 7F    SBB   A,0x7F
    223C: D0 1A    JNC   0x2257
    223E: 62 D0 00 MOV   REG[0xD0],0x0
    2241: 52 F8    MOV   A,[X-8]
    2243: 53 4E    MOV   [__r1],A
    2245: 52 F7    MOV   A,[X-9]
    2247: 60 D5    MOV   REG[0xD5],A
    2249: 50 FF    MOV   A,0xFF
    224B: 3F 4E    MVI   [__r1],A
    224D: 3F 4E    MVI   [__r1],A
    224F: 55 4E 00 MOV   [__r1],0x0
    2252: 55 4F 00 MOV   [__r0],0x0
    2255: 82 73    JMP   0x24C9
    2257: 52 0B    MOV   A,[X+11]
    2259: 11 17    SUB   A,0x17
    225B: 52 0A    MOV   A,[X+10]
    225D: 31 80    XOR   A,0x80
    225F: 19 80    SBB   A,0x80
    2261: C0 28    JC    0x228A
    2263: 62 D0 00 MOV   REG[0xD0],0x0
    2266: 52 0B    MOV   A,[X+11]
    2268: 11 17    SUB   A,0x17
    226A: 53 4E    MOV   [__r1],A
    226C: 52 10    MOV   A,[X+16]
    226E: 53 4B    MOV   [__r4],A
    2270: 52 11    MOV   A,[X+17]
    2272: 53 4A    MOV   [__r5],A
    2274: 52 12    MOV   A,[X+18]
    2276: 53 49    MOV   [__r6],A
    2278: 52 13    MOV   A,[X+19]
    227A: 53 48    MOV   [__r7],A
    227C: 51 4E    MOV   A,[__r1]
    227E: 21 1F    AND   A,0x1F
    2280: A0 04    JZ    0x2285
    2282: 7C 32 5E LCALL 0x325E
    2285: 7C 32 D3 LCALL 0x32D3
    2288: 80 9F    JMP   0x2328
    228A: 52 0B    MOV   A,[X+11]
    228C: 11 00    SUB   A,0x0
    228E: 52 0A    MOV   A,[X+10]
    2290: 31 80    XOR   A,0x80
    2292: 19 80    SBB   A,0x80
    2294: C0 59    JC    0x22EE
    2296: 62 D0 00 MOV   REG[0xD0],0x0
    2299: 50 17    MOV   A,0x17
    229B: 13 0B    SUB   A,[X+11]
    229D: 53 4E    MOV   [__r1],A
    229F: 52 10    MOV   A,[X+16]
    22A1: 53 4B    MOV   [__r4],A
    22A3: 52 11    MOV   A,[X+17]
    22A5: 53 4A    MOV   [__r5],A
    22A7: 52 12    MOV   A,[X+18]
    22A9: 53 49    MOV   [__r6],A
    22AB: 52 13    MOV   A,[X+19]
    22AD: 53 48    MOV   [__r7],A
    22AF: 51 4E    MOV   A,[__r1]
    22B1: 21 1F    AND   A,0x1F
    22B3: A0 04    JZ    0x22B8
    22B5: 7C 32 8B LCALL 0x328B
    22B8: 7C 32 D3 LCALL 0x32D3
    22BB: 52 0B    MOV   A,[X+11]
    22BD: 01 01    ADD   A,0x1
    22BF: 53 4E    MOV   [__r1],A
    22C1: 52 10    MOV   A,[X+16]
    22C3: 53 4B    MOV   [__r4],A
    22C5: 52 11    MOV   A,[X+17]
    22C7: 53 4A    MOV   [__r5],A
    22C9: 52 12    MOV   A,[X+18]
    22CB: 53 49    MOV   [__r6],A
    22CD: 52 13    MOV   A,[X+19]
    22CF: 53 48    MOV   [__r7],A
    22D1: 51 4E    MOV   A,[__r1]
    22D3: 21 1F    AND   A,0x1F
    22D5: A0 04    JZ    0x22DA
    22D7: 7C 32 5E LCALL 0x325E
    22DA: 62 D0 00 MOV   REG[0xD0],0x0
    22DD: 51 48    MOV   A,[__r7]
    22DF: 54 05    MOV   [X+5],A
    22E1: 51 49    MOV   A,[__r6]
    22E3: 54 04    MOV   [X+4],A
    22E5: 51 4A    MOV   A,[__r5]
    22E7: 54 03    MOV   [X+3],A
    22E9: 56 02 00 MOV   [X+2],0x0
    22EC: 80 3B    JMP   0x2328
    22EE: 62 D0 00 MOV   REG[0xD0],0x0
    22F1: 52 0B    MOV   A,[X+11]
    22F3: 01 01    ADD   A,0x1
    22F5: 73       CPL   A
    22F6: 11 FF    SUB   A,0xFF
    22F8: 53 4E    MOV   [__r1],A
    22FA: 52 13    MOV   A,[X+19]
    22FC: 53 48    MOV   [__r7],A
    22FE: 52 12    MOV   A,[X+18]
    2300: 53 49    MOV   [__r6],A
    2302: 52 11    MOV   A,[X+17]
    2304: 53 4A    MOV   [__r5],A
    2306: 52 10    MOV   A,[X+16]
    2308: 21 00    AND   A,0x0
    230A: 53 4B    MOV   [__r4],A
    230C: 51 4E    MOV   A,[__r1]
    230E: 21 1F    AND   A,0x1F
    2310: A0 04    JZ    0x2315
    2312: 7C 32 8B LCALL 0x328B
    2315: 62 D0 00 MOV   REG[0xD0],0x0
    2318: 51 4B    MOV   A,[__r4]
    231A: 54 02    MOV   [X+2],A
    231C: 51 4A    MOV   A,[__r5]
    231E: 54 03    MOV   [X+3],A
    2320: 51 49    MOV   A,[__r6]
    2322: 54 04    MOV   [X+4],A
    2324: 51 48    MOV   A,[__r7]
    2326: 54 05    MOV   [X+5],A
    2328: 56 01 32 MOV   [X+1],0x32
    232B: 56 00 00 MOV   [X+0],0x0
    232E: 52 09    MOV   A,[X+9]
    2330: 11 00    SUB   A,0x0
    2332: 52 08    MOV   A,[X+8]
    2334: 19 00    SBB   A,0x0
    2336: 52 07    MOV   A,[X+7]
    2338: 19 00    SBB   A,0x0
    233A: 52 06    MOV   A,[X+6]
    233C: 31 80    XOR   A,0x80
    233E: 19 80    SBB   A,0x80
    2340: D0 0C    JNC   0x234D
    2342: 7C 30 C3 LCALL <created procedures>
    2345: 51 4F    MOV   A,[__r0]
    2347: 60 D5    MOV   REG[0xD5],A
    2349: 50 2D    MOV   A,0x2D
    234B: 3F 4E    MVI   [__r1],A
    234D: 3D 0C 00 CMP   [X+12],0x0
    2350: B0 1D    JNZ   0x236E
    2352: 3D 0D 00 CMP   [X+13],0x0
    2355: B0 18    JNZ   0x236E
    2357: 3D 0E 00 CMP   [X+14],0x0
    235A: B0 13    JNZ   0x236E
    235C: 3D 0F 00 CMP   [X+15],0x0
    235F: B0 0E    JNZ   0x236E
    2361: 7C 30 C3 LCALL <created procedures>
    2364: 51 4F    MOV   A,[__r0]
    2366: 60 D5    MOV   REG[0xD5],A
    2368: 50 30    MOV   A,0x30
    236A: 3F 4E    MVI   [__r1],A
    236C: 80 36    JMP   0x23A3
    236E: 50 00    MOV   A,0x0
    2370: 08       PUSH  A
    2371: 50 0A    MOV   A,0xA
    2373: 08       PUSH  A
    2374: 52 0C    MOV   A,[X+12]
    2376: 08       PUSH  A
    2377: 52 0D    MOV   A,[X+13]
    2379: 08       PUSH  A
    237A: 52 0E    MOV   A,[X+14]
    237C: 08       PUSH  A
    237D: 52 0F    MOV   A,[X+15]
    237F: 08       PUSH  A
    2380: 52 00    MOV   A,[X+0]
    2382: 08       PUSH  A
    2383: 52 01    MOV   A,[X+1]
    2385: 08       PUSH  A
    2386: 7C 1D 9C LCALL _ltoa
    2389: 38 F8    ADD   SP,0xF8
    238B: 80 06    JMP   0x2392
    238D: 77 01    INC   [X+1]
    238F: 0F 00 00 ADC   [X+0],0x0
    2392: 62 D0 00 MOV   REG[0xD0],0x0
    2395: 52 01    MOV   A,[X+1]
    2397: 53 4E    MOV   [__r1],A
    2399: 52 00    MOV   A,[X+0]
    239B: 60 D4    MOV   REG[0xD4],A
    239D: 3E 4E    MVI   A,[__r1]
    239F: 39 00    CMP   A,0x0
    23A1: BF EB    JNZ   0x238D
    23A3: 7C 30 C3 LCALL <created procedures>
    23A6: 51 4F    MOV   A,[__r0]
    23A8: 60 D5    MOV   REG[0xD5],A
    23AA: 50 2E    MOV   A,0x2E
    23AC: 3F 4E    MVI   [__r1],A
    23AE: 3D 02 00 CMP   [X+2],0x0
    23B1: B0 1D    JNZ   0x23CF
    23B3: 3D 03 00 CMP   [X+3],0x0
    23B6: B0 18    JNZ   0x23CF
    23B8: 3D 04 00 CMP   [X+4],0x0
    23BB: B0 13    JNZ   0x23CF
    23BD: 3D 05 00 CMP   [X+5],0x0
    23C0: B0 0E    JNZ   0x23CF
    23C2: 7C 30 DB LCALL 0x30DB
    23C5: 51 4F    MOV   A,[__r0]
    23C7: 60 D5    MOV   REG[0xD5],A
    23C9: 50 30    MOV   A,0x30
    23CB: 3F 4E    MVI   [__r1],A
    23CD: 80 E6    JMP   0x24B4
    23CF: 62 D0 00 MOV   REG[0xD0],0x0
    23D2: 52 01    MOV   A,[X+1]
    23D4: 11 32    SUB   A,0x32
    23D6: 53 4E    MOV   [__r1],A
    23D8: 52 00    MOV   A,[X+0]
    23DA: 19 00    SBB   A,0x0
    23DC: 53 4F    MOV   [__r0],A
    23DE: 50 0F    MOV   A,0xF
    23E0: 12 4E    SUB   A,[__r1]
    23E2: 53 4E    MOV   [__r1],A
    23E4: 50 00    MOV   A,0x0
    23E6: 1A 4F    SBB   A,[__r0]
    23E8: 53 4F    MOV   [__r0],A
    23EA: 16 4E 01 SUB   [__r1],0x1
    23ED: 1E 4F 00 SBB   [__r0],0x0
    23F0: 51 4E    MOV   A,[__r1]
    23F2: 54 15    MOV   [X+21],A
    23F4: 50 07    MOV   A,0x7
    23F6: 3B 15    CMP   A,[X+21]
    23F8: D0 04    JNC   0x23FD
    23FA: 56 15 07 MOV   [X+21],0x7
    23FD: 56 14 00 MOV   [X+20],0x0
    2400: 80 77    JMP   0x2478
    2402: 62 D0 00 MOV   REG[0xD0],0x0
    2405: 52 02    MOV   A,[X+2]
    2407: 53 4F    MOV   [__r0],A
    2409: 52 03    MOV   A,[X+3]
    240B: 53 4E    MOV   [__r1],A
    240D: 52 04    MOV   A,[X+4]
    240F: 53 4D    MOV   [__r2],A
    2411: 52 05    MOV   A,[X+5]
    2413: 53 4C    MOV   [__r3],A
    2415: 65 4C    ASL   [__r3]
    2417: 6B 4D    RLC   [__r2]
    2419: 6B 4E    RLC   [__r1]
    241B: 6B 4F    RLC   [__r0]
    241D: 52 02    MOV   A,[X+2]
    241F: 53 4B    MOV   [__r4],A
    2421: 52 03    MOV   A,[X+3]
    2423: 53 4A    MOV   [__r5],A
    2425: 52 04    MOV   A,[X+4]
    2427: 53 49    MOV   [__r6],A
    2429: 52 05    MOV   A,[X+5]
    242B: 53 48    MOV   [__r7],A
    242D: 50 03    MOV   A,0x3
    242F: 7C 32 5E LCALL 0x325E
    2432: 51 48    MOV   A,[__r7]
    2434: 02 4C    ADD   A,[__r3]
    2436: 54 05    MOV   [X+5],A
    2438: 51 49    MOV   A,[__r6]
    243A: 0A 4D    ADC   A,[__r2]
    243C: 54 04    MOV   [X+4],A
    243E: 51 4A    MOV   A,[__r5]
    2440: 0A 4E    ADC   A,[__r1]
    2442: 54 03    MOV   [X+3],A
    2444: 51 4B    MOV   A,[__r4]
    2446: 0A 4F    ADC   A,[__r0]
    2448: 54 02    MOV   [X+2],A
    244A: 7C 30 DB LCALL 0x30DB
    244D: 52 02    MOV   A,[X+2]
    244F: 53 4B    MOV   [__r4],A
    2451: 52 03    MOV   A,[X+3]
    2453: 53 4A    MOV   [__r5],A
    2455: 52 04    MOV   A,[X+4]
    2457: 53 49    MOV   [__r6],A
    2459: 52 05    MOV   A,[X+5]
    245B: 53 48    MOV   [__r7],A
    245D: 50 18    MOV   A,0x18
    245F: 7C 32 8B LCALL 0x328B
    2462: 06 48 30 ADD   [__r7],0x30
    2465: 0E 49 00 ADC   [__r6],0x0
    2468: 0E 4A 00 ADC   [__r5],0x0
    246B: 0E 4B 00 ADC   [__r4],0x0
    246E: 51 48    MOV   A,[__r7]
    2470: 7C 31 30 LCALL 0x3130
    2473: 27 02 00 AND   [X+2],0x0
    2476: 77 14    INC   [X+20]
    2478: 52 14    MOV   A,[X+20]
    247A: 3B 15    CMP   A,[X+21]
    247C: CF 85    JC    0x2402
    247E: 07 01 FF ADD   [X+1],0xFF
    2481: 0F 00 FF ADC   [X+0],0xFF
    2484: 80 07    JMP   0x248C
    2486: 07 01 FF ADD   [X+1],0xFF
    2489: 0F 00 FF ADC   [X+0],0xFF
    248C: 62 D0 00 MOV   REG[0xD0],0x0
    248F: 52 01    MOV   A,[X+1]
    2491: 53 4E    MOV   [__r1],A
    2493: 52 00    MOV   A,[X+0]
    2495: 60 D4    MOV   REG[0xD4],A
    2497: 3E 4E    MVI   A,[__r1]
    2499: 39 30    CMP   A,0x30
    249B: B0 13    JNZ   0x24AF
    249D: 52 01    MOV   A,[X+1]
    249F: 01 FF    ADD   A,0xFF
    24A1: 53 4E    MOV   [__r1],A
    24A3: 52 00    MOV   A,[X+0]
    24A5: 09 FF    ADC   A,0xFF
    24A7: 60 D4    MOV   REG[0xD4],A
    24A9: 3E 4E    MVI   A,[__r1]
    24AB: 39 2E    CMP   A,0x2E
    24AD: BF D8    JNZ   0x2486
    24AF: 77 01    INC   [X+1]
    24B1: 0F 00 00 ADC   [X+0],0x0
    24B4: 62 D0 00 MOV   REG[0xD0],0x0
    24B7: 52 01    MOV   A,[X+1]
    24B9: 53 4E    MOV   [__r1],A
    24BB: 52 00    MOV   A,[X+0]
    24BD: 60 D5    MOV   REG[0xD5],A
    24BF: 50 00    MOV   A,0x0
    24C1: 3F 4E    MVI   [__r1],A
    24C3: 55 4E 32 MOV   [__r1],0x32
    24C6: 55 4F 00 MOV   [__r0],0x0
    24C9: 38 EA    ADD   SP,0xEA
    24CB: 20       POP   X
    24CC: 7F       RET   
_isdigit:
    24CD: 10       PUSH  X
    24CE: 4F       MOV   X,SP
    24CF: 62 D0 00 MOV   REG[0xD0],0x0
    24D2: 52 FC    MOV   A,[X-4]
    24D4: 01 69    ADD   A,0x69
    24D6: 53 4E    MOV   [__r1],A
    24D8: 52 FB    MOV   A,[X-5]
    24DA: 09 02    ADC   A,0x2
    24DC: 7C 32 BA LCALL 0x32BA
    24DF: 26 4E 04 AND   [__r1],0x4
    24E2: 26 4F 00 AND   [__r0],0x0
    24E5: 20       POP   X
    24E6: 7F       RET   
_islower:
    24E7: 10       PUSH  X
    24E8: 4F       MOV   X,SP
    24E9: 62 D0 00 MOV   REG[0xD0],0x0
    24EC: 52 FC    MOV   A,[X-4]
    24EE: 01 69    ADD   A,0x69
    24F0: 53 4E    MOV   [__r1],A
    24F2: 52 FB    MOV   A,[X-5]
    24F4: 09 02    ADC   A,0x2
    24F6: 7C 32 BA LCALL 0x32BA
    24F9: 26 4E 02 AND   [__r1],0x2
    24FC: 26 4F 00 AND   [__r0],0x0
    24FF: 20       POP   X
    2500: 7F       RET   
_isspace:
    2501: 10       PUSH  X
    2502: 4F       MOV   X,SP
    2503: 62 D0 00 MOV   REG[0xD0],0x0
    2506: 52 FC    MOV   A,[X-4]
    2508: 01 69    ADD   A,0x69
    250A: 53 4E    MOV   [__r1],A
    250C: 52 FB    MOV   A,[X-5]
    250E: 09 02    ADC   A,0x2
    2510: 7C 32 BA LCALL 0x32BA
    2513: 26 4E 10 AND   [__r1],0x10
    2516: 26 4F 00 AND   [__r0],0x0
    2519: 20       POP   X
    251A: 7F       RET   
_toupper:
    251B: 10       PUSH  X
    251C: 4F       MOV   X,SP
    251D: 52 FB    MOV   A,[X-5]
    251F: 08       PUSH  A
    2520: 52 FC    MOV   A,[X-4]
    2522: 08       PUSH  A
    2523: 7C 24 E7 LCALL _islower
    2526: 38 FE    ADD   SP,0xFE
    2528: 62 D0 00 MOV   REG[0xD0],0x0
    252B: 3C 4F 00 CMP   [__r0],0x0
    252E: B0 06    JNZ   0x2535
    2530: 3C 4E 00 CMP   [__r1],0x0
    2533: A0 18    JZ    0x254C
    2535: 62 D0 00 MOV   REG[0xD0],0x0
    2538: 52 FC    MOV   A,[X-4]
    253A: 11 61    SUB   A,0x61
    253C: 53 4E    MOV   [__r1],A
    253E: 52 FB    MOV   A,[X-5]
    2540: 19 00    SBB   A,0x0
    2542: 53 4F    MOV   [__r0],A
    2544: 06 4E 41 ADD   [__r1],0x41
    2547: 0E 4F 00 ADC   [__r0],0x0
    254A: 80 04    JMP   0x254F
    254C: 7C 31 F2 LCALL 0x31F2
    254F: 20       POP   X
    2550: 7F       RET   
    2551: 10       PUSH  X
    2552: 4F       MOV   X,SP
    2553: 38 02    ADD   SP,0x2
    2555: 3D F9 FF CMP   [X-7],0xFF
    2558: B0 0E    JNZ   0x2567
    255A: 3D FA FE CMP   [X-6],0xFE
    255D: B0 09    JNZ   0x2567
    255F: 56 01 69 MOV   [X+1],0x69
    2562: 56 00 03 MOV   [X+0],0x3
    2565: 80 19    JMP   0x257F
    2567: 3D F9 FF CMP   [X-7],0xFF
    256A: B0 0E    JNZ   0x2579
    256C: 3D FA FF CMP   [X-6],0xFF
    256F: B0 09    JNZ   0x2579
    2571: 56 01 84 MOV   [X+1],0x84
    2574: 56 00 03 MOV   [X+0],0x3
    2577: 80 07    JMP   0x257F
    2579: 56 01 A1 MOV   [X+1],0xA1
    257C: 56 00 03 MOV   [X+0],0x3
    257F: 7C 30 F0 LCALL 0x30F0
    2582: 38 FE    ADD   SP,0xFE
    2584: 20       POP   X
    2585: 7F       RET   
__FormatFP_1:
    2586: 10       PUSH  X
    2587: 4F       MOV   X,SP
    2588: 38 31    ADD   SP,0x31
    258A: 56 23 FF MOV   [X+35],0xFF
    258D: 56 22 FF MOV   [X+34],0xFF
    2590: 56 06 FF MOV   [X+6],0xFF
    2593: 56 05 FF MOV   [X+5],0xFF
    2596: 56 10 FF MOV   [X+16],0xFF
    2599: 56 0F FF MOV   [X+15],0xFF
    259C: 56 0C FF MOV   [X+12],0xFF
    259F: 56 0B FF MOV   [X+11],0xFF
    25A2: 56 1F FF MOV   [X+31],0xFF
    25A5: 56 1E FF MOV   [X+30],0xFF
    25A8: 56 13 FF MOV   [X+19],0xFF
    25AB: 56 12 FF MOV   [X+18],0xFF
    25AE: 56 16 00 MOV   [X+22],0x0
    25B1: 56 15 00 MOV   [X+21],0x0
    25B4: 56 29 FF MOV   [X+41],0xFF
    25B7: 56 28 00 MOV   [X+40],0x0
    25BA: 56 25 00 MOV   [X+37],0x0
    25BD: 56 24 00 MOV   [X+36],0x0
    25C0: 56 0E 00 MOV   [X+14],0x0
    25C3: 56 0D 00 MOV   [X+13],0x0
    25C6: 56 14 20 MOV   [X+20],0x20
    25C9: 56 19 20 MOV   [X+25],0x20
    25CC: 56 2C 65 MOV   [X+44],0x65
    25CF: 50 14    MOV   A,0x14
    25D1: 13 F2    SUB   A,[X-14]
    25D3: 52 F1    MOV   A,[X-15]
    25D5: 7C 31 5D LCALL 0x315D
    25D8: D0 07    JNC   0x25E0
    25DA: 56 F2 14 MOV   [X-14],0x14
    25DD: 56 F1 00 MOV   [X-15],0x0
    25E0: 50 14    MOV   A,0x14
    25E2: 13 F0    SUB   A,[X-16]
    25E4: 52 EF    MOV   A,[X-17]
    25E6: 7C 31 5D LCALL 0x315D
    25E9: D0 07    JNC   0x25F1
    25EB: 56 F0 14 MOV   [X-16],0x14
    25EE: 56 EF 00 MOV   [X-17],0x0
    25F1: 3D F9 00 CMP   [X-7],0x0
    25F4: B0 06    JNZ   0x25FB
    25F6: 3D FA 00 CMP   [X-6],0x0
    25F9: A1 26    JZ    0x2720
    25FB: 3D F9 00 CMP   [X-7],0x0
    25FE: B0 06    JNZ   0x2605
    2600: 3D FA 01 CMP   [X-6],0x1
    2603: A0 24    JZ    0x2628
    2605: 3D F9 00 CMP   [X-7],0x0
    2608: B0 06    JNZ   0x260F
    260A: 3D FA 02 CMP   [X-6],0x2
    260D: A0 17    JZ    0x2625
    260F: 3D F9 00 CMP   [X-7],0x0
    2612: B0 06    JNZ   0x2619
    2614: 3D FA 03 CMP   [X-6],0x3
    2617: A0 1B    JZ    0x2633
    2619: 3D F9 00 CMP   [X-7],0x0
    261C: B0 06    JNZ   0x2623
    261E: 3D FA 04 CMP   [X-6],0x4
    2621: A0 0E    JZ    0x2630
    2623: 80 FC    JMP   0x2720
    2625: 56 2C 45 MOV   [X+44],0x45
    2628: 56 0E 01 MOV   [X+14],0x1
    262B: 56 0D 00 MOV   [X+13],0x0
    262E: 80 F1    JMP   0x2720
    2630: 56 2C 45 MOV   [X+44],0x45
    2633: 52 F5    MOV   A,[X-11]
    2635: 54 2D    MOV   [X+45],A
    2637: 52 F6    MOV   A,[X-10]
    2639: 54 2E    MOV   [X+46],A
    263B: 52 F7    MOV   A,[X-9]
    263D: 54 2F    MOV   [X+47],A
    263F: 52 F8    MOV   A,[X-8]
    2641: 54 30    MOV   [X+48],A
    2643: 50 00    MOV   A,0x0
    2645: 08       PUSH  A
    2646: 08       PUSH  A
    2647: 08       PUSH  A
    2648: 08       PUSH  A
    2649: 52 F5    MOV   A,[X-11]
    264B: 08       PUSH  A
    264C: 52 F6    MOV   A,[X-10]
    264E: 08       PUSH  A
    264F: 52 F7    MOV   A,[X-9]
    2651: 08       PUSH  A
    2652: 52 F8    MOV   A,[X-8]
    2654: 08       PUSH  A
    2655: 62 D0 00 MOV   REG[0xD0],0x0
    2658: 7C 18 91 LCALL 0x1891
    265B: 38 F8    ADD   SP,0xF8
    265D: 39 00    CMP   A,0x0
    265F: A0 2C    JZ    0x268C
    2661: 39 01    CMP   A,0x1
    2663: A0 28    JZ    0x268C
    2665: 52 F5    MOV   A,[X-11]
    2667: 08       PUSH  A
    2668: 52 F6    MOV   A,[X-10]
    266A: 08       PUSH  A
    266B: 52 F7    MOV   A,[X-9]
    266D: 08       PUSH  A
    266E: 52 F8    MOV   A,[X-8]
    2670: 08       PUSH  A
    2671: 50 BF    MOV   A,0xBF
    2673: 08       PUSH  A
    2674: 50 80    MOV   A,0x80
    2676: 08       PUSH  A
    2677: 50 00    MOV   A,0x0
    2679: 08       PUSH  A
    267A: 08       PUSH  A
    267B: 7C 19 C3 LCALL 0x19C3
    267E: 18       POP   A
    267F: 54 30    MOV   [X+48],A
    2681: 18       POP   A
    2682: 54 2F    MOV   [X+47],A
    2684: 18       POP   A
    2685: 54 2E    MOV   [X+46],A
    2687: 18       POP   A
    2688: 54 2D    MOV   [X+45],A
    268A: 38 FC    ADD   SP,0xFC
    268C: 56 1A 3F MOV   [X+26],0x3F
    268F: 56 1B 80 MOV   [X+27],0x80
    2692: 56 1C 00 MOV   [X+28],0x0
    2695: 56 1D 00 MOV   [X+29],0x0
    2698: 56 01 00 MOV   [X+1],0x0
    269B: 56 00 00 MOV   [X+0],0x0
    269E: 80 30    JMP   0x26CF
    26A0: 52 1A    MOV   A,[X+26]
    26A2: 08       PUSH  A
    26A3: 52 1B    MOV   A,[X+27]
    26A5: 08       PUSH  A
    26A6: 52 1C    MOV   A,[X+28]
    26A8: 08       PUSH  A
    26A9: 52 1D    MOV   A,[X+29]
    26AB: 08       PUSH  A
    26AC: 50 41    MOV   A,0x41
    26AE: 08       PUSH  A
    26AF: 50 20    MOV   A,0x20
    26B1: 08       PUSH  A
    26B2: 50 00    MOV   A,0x0
    26B4: 08       PUSH  A
    26B5: 08       PUSH  A
    26B6: 62 D0 00 MOV   REG[0xD0],0x0
    26B9: 7C 19 C3 LCALL 0x19C3
    26BC: 18       POP   A
    26BD: 54 1D    MOV   [X+29],A
    26BF: 18       POP   A
    26C0: 54 1C    MOV   [X+28],A
    26C2: 18       POP   A
    26C3: 54 1B    MOV   [X+27],A
    26C5: 18       POP   A
    26C6: 54 1A    MOV   [X+26],A
    26C8: 38 FC    ADD   SP,0xFC
    26CA: 77 01    INC   [X+1]
    26CC: 0F 00 00 ADC   [X+0],0x0
    26CF: 7C 32 0A LCALL 0x320A
    26D2: CF CD    JC    0x26A0
    26D4: 50 38    MOV   A,0x38
    26D6: 08       PUSH  A
    26D7: 50 D1    MOV   A,0xD1
    26D9: 08       PUSH  A
    26DA: 50 B7    MOV   A,0xB7
    26DC: 08       PUSH  A
    26DD: 50 17    MOV   A,0x17
    26DF: 08       PUSH  A
    26E0: 52 2D    MOV   A,[X+45]
    26E2: 08       PUSH  A
    26E3: 52 2E    MOV   A,[X+46]
    26E5: 08       PUSH  A
    26E6: 52 2F    MOV   A,[X+47]
    26E8: 08       PUSH  A
    26E9: 52 30    MOV   A,[X+48]
    26EB: 08       PUSH  A
    26EC: 7C 18 91 LCALL 0x1891
    26EF: 38 F8    ADD   SP,0xF8
    26F1: 39 FF    CMP   A,0xFF
    26F3: A0 26    JZ    0x271A
    26F5: 52 1A    MOV   A,[X+26]
    26F7: 08       PUSH  A
    26F8: 52 1B    MOV   A,[X+27]
    26FA: 08       PUSH  A
    26FB: 52 1C    MOV   A,[X+28]
    26FD: 08       PUSH  A
    26FE: 52 1D    MOV   A,[X+29]
    2700: 08       PUSH  A
    2701: 52 2D    MOV   A,[X+45]
    2703: 08       PUSH  A
    2704: 52 2E    MOV   A,[X+46]
    2706: 08       PUSH  A
    2707: 52 2F    MOV   A,[X+47]
    2709: 08       PUSH  A
    270A: 52 30    MOV   A,[X+48]
    270C: 08       PUSH  A
    270D: 7C 18 91 LCALL 0x1891
    2710: 38 F8    ADD   SP,0xF8
    2712: 39 00    CMP   A,0x0
    2714: A0 0B    JZ    0x2720
    2716: 39 01    CMP   A,0x1
    2718: B0 07    JNZ   0x2720
    271A: 56 0E 01 MOV   [X+14],0x1
    271D: 56 0D 00 MOV   [X+13],0x0
    2720: 62 D0 00 MOV   REG[0xD0],0x0
    2723: 52 F4    MOV   A,[X-12]
    2725: 21 10    AND   A,0x10
    2727: 53 4E    MOV   [__r1],A
    2729: 52 F3    MOV   A,[X-13]
    272B: 21 00    AND   A,0x0
    272D: 39 00    CMP   A,0x0
    272F: B0 06    JNZ   0x2736
    2731: 3C 4E 00 CMP   [__r1],0x0
    2734: A0 04    JZ    0x2739
    2736: 56 14 30 MOV   [X+20],0x30
    2739: 52 14    MOV   A,[X+20]
    273B: 54 11    MOV   [X+17],A
    273D: 62 D0 00 MOV   REG[0xD0],0x0
    2740: 52 F4    MOV   A,[X-12]
    2742: 21 08    AND   A,0x8
    2744: 53 4E    MOV   [__r1],A
    2746: 52 F3    MOV   A,[X-13]
    2748: 21 00    AND   A,0x0
    274A: 39 00    CMP   A,0x0
    274C: B0 06    JNZ   0x2753
    274E: 3C 4E 00 CMP   [__r1],0x0
    2751: A0 04    JZ    0x2756
    2753: 56 11 2B MOV   [X+17],0x2B
    2756: 3D 0D 00 CMP   [X+13],0x0
    2759: B0 06    JNZ   0x2760
    275B: 3D 0E 00 CMP   [X+14],0x0
    275E: A0 25    JZ    0x2784
    2760: 62 D0 00 MOV   REG[0xD0],0x0
    2763: 5A 4E    MOV   [__r1],X
    2765: 06 4E 2A ADD   [__r1],0x2A
    2768: 50 07    MOV   A,0x7
    276A: 08       PUSH  A
    276B: 51 4E    MOV   A,[__r1]
    276D: 08       PUSH  A
    276E: 52 F5    MOV   A,[X-11]
    2770: 08       PUSH  A
    2771: 52 F6    MOV   A,[X-10]
    2773: 08       PUSH  A
    2774: 52 F7    MOV   A,[X-9]
    2776: 08       PUSH  A
    2777: 52 F8    MOV   A,[X-8]
    2779: 08       PUSH  A
    277A: 7C 21 59 LCALL _ftoa
    277D: 38 FA    ADD   SP,0xFA
    277F: 7C 33 00 LCALL 0x3300
    2782: 80 F5    JMP   0x2878
    2784: 56 1A 3F MOV   [X+26],0x3F
    2787: 56 1B 00 MOV   [X+27],0x0
    278A: 56 1C 00 MOV   [X+28],0x0
    278D: 56 1D 00 MOV   [X+29],0x0
    2790: 56 01 00 MOV   [X+1],0x0
    2793: 56 00 00 MOV   [X+0],0x0
    2796: 80 30    JMP   0x27C7
    2798: 50 41    MOV   A,0x41
    279A: 08       PUSH  A
    279B: 50 20    MOV   A,0x20
    279D: 08       PUSH  A
    279E: 50 00    MOV   A,0x0
    27A0: 08       PUSH  A
    27A1: 08       PUSH  A
    27A2: 52 1A    MOV   A,[X+26]
    27A4: 08       PUSH  A
    27A5: 52 1B    MOV   A,[X+27]
    27A7: 08       PUSH  A
    27A8: 52 1C    MOV   A,[X+28]
    27AA: 08       PUSH  A
    27AB: 52 1D    MOV   A,[X+29]
    27AD: 08       PUSH  A
    27AE: 62 D0 00 MOV   REG[0xD0],0x0
    27B1: 7C 18 EE LCALL 0x18EE
    27B4: 18       POP   A
    27B5: 54 1D    MOV   [X+29],A
    27B7: 18       POP   A
    27B8: 54 1C    MOV   [X+28],A
    27BA: 18       POP   A
    27BB: 54 1B    MOV   [X+27],A
    27BD: 18       POP   A
    27BE: 54 1A    MOV   [X+26],A
    27C0: 38 FC    ADD   SP,0xFC
    27C2: 77 01    INC   [X+1]
    27C4: 0F 00 00 ADC   [X+0],0x0
    27C7: 7C 32 0A LCALL 0x320A
    27CA: CF CD    JC    0x2798
    27CC: 50 00    MOV   A,0x0
    27CE: 08       PUSH  A
    27CF: 08       PUSH  A
    27D0: 08       PUSH  A
    27D1: 08       PUSH  A
    27D2: 52 F5    MOV   A,[X-11]
    27D4: 08       PUSH  A
    27D5: 52 F6    MOV   A,[X-10]
    27D7: 08       PUSH  A
    27D8: 52 F7    MOV   A,[X-9]
    27DA: 08       PUSH  A
    27DB: 52 F8    MOV   A,[X-8]
    27DD: 08       PUSH  A
    27DE: 7C 18 91 LCALL 0x1891
    27E1: 38 F8    ADD   SP,0xF8
    27E3: 39 00    CMP   A,0x0
    27E5: A0 4B    JZ    0x2831
    27E7: 39 01    CMP   A,0x1
    27E9: A0 47    JZ    0x2831
    27EB: 5A 4E    MOV   [__r1],X
    27ED: 06 4E 2A ADD   [__r1],0x2A
    27F0: 50 07    MOV   A,0x7
    27F2: 08       PUSH  A
    27F3: 51 4E    MOV   A,[__r1]
    27F5: 08       PUSH  A
    27F6: 52 1A    MOV   A,[X+26]
    27F8: 08       PUSH  A
    27F9: 52 1B    MOV   A,[X+27]
    27FB: 08       PUSH  A
    27FC: 52 1C    MOV   A,[X+28]
    27FE: 08       PUSH  A
    27FF: 52 1D    MOV   A,[X+29]
    2801: 08       PUSH  A
    2802: 52 F5    MOV   A,[X-11]
    2804: 08       PUSH  A
    2805: 52 F6    MOV   A,[X-10]
    2807: 08       PUSH  A
    2808: 52 F7    MOV   A,[X-9]
    280A: 08       PUSH  A
    280B: 52 F8    MOV   A,[X-8]
    280D: 08       PUSH  A
    280E: 7C 1A E8 LCALL 0x1AE8
    2811: 18       POP   A
    2812: 53 4C    MOV   [__r3],A
    2814: 18       POP   A
    2815: 53 4D    MOV   [__r2],A
    2817: 18       POP   A
    2818: 53 4E    MOV   [__r1],A
    281A: 18       POP   A
    281B: 38 FC    ADD   SP,0xFC
    281D: 08       PUSH  A
    281E: 51 4E    MOV   A,[__r1]
    2820: 08       PUSH  A
    2821: 51 4D    MOV   A,[__r2]
    2823: 08       PUSH  A
    2824: 51 4C    MOV   A,[__r3]
    2826: 08       PUSH  A
    2827: 7C 21 59 LCALL _ftoa
    282A: 38 FA    ADD   SP,0xFA
    282C: 7C 33 00 LCALL 0x3300
    282F: 80 48    JMP   0x2878
    2831: 62 D0 00 MOV   REG[0xD0],0x0
    2834: 5A 4E    MOV   [__r1],X
    2836: 06 4E 2A ADD   [__r1],0x2A
    2839: 50 07    MOV   A,0x7
    283B: 08       PUSH  A
    283C: 51 4E    MOV   A,[__r1]
    283E: 08       PUSH  A
    283F: 52 1A    MOV   A,[X+26]
    2841: 08       PUSH  A
    2842: 52 1B    MOV   A,[X+27]
    2844: 08       PUSH  A
    2845: 52 1C    MOV   A,[X+28]
    2847: 08       PUSH  A
    2848: 52 1D    MOV   A,[X+29]
    284A: 08       PUSH  A
    284B: 52 F5    MOV   A,[X-11]
    284D: 08       PUSH  A
    284E: 52 F6    MOV   A,[X-10]
    2850: 08       PUSH  A
    2851: 52 F7    MOV   A,[X-9]
    2853: 08       PUSH  A
    2854: 52 F8    MOV   A,[X-8]
    2856: 08       PUSH  A
    2857: 7C 17 98 LCALL 0x1798
    285A: 18       POP   A
    285B: 53 4C    MOV   [__r3],A
    285D: 18       POP   A
    285E: 53 4D    MOV   [__r2],A
    2860: 18       POP   A
    2861: 53 4E    MOV   [__r1],A
    2863: 18       POP   A
    2864: 38 FC    ADD   SP,0xFC
    2866: 08       PUSH  A
    2867: 51 4E    MOV   A,[__r1]
    2869: 08       PUSH  A
    286A: 51 4D    MOV   A,[__r2]
    286C: 08       PUSH  A
    286D: 51 4C    MOV   A,[__r3]
    286F: 08       PUSH  A
    2870: 7C 21 59 LCALL _ftoa
    2873: 38 FA    ADD   SP,0xFA
    2875: 7C 33 00 LCALL 0x3300
    2878: 3D 2A 00 CMP   [X+42],0x0
    287B: B0 06    JNZ   0x2882
    287D: 3D 2B 00 CMP   [X+43],0x0
    2880: A0 14    JZ    0x2895
    2882: 52 2A    MOV   A,[X+42]
    2884: 08       PUSH  A
    2885: 52 2B    MOV   A,[X+43]
    2887: 08       PUSH  A
    2888: 52 FB    MOV   A,[X-5]
    288A: 08       PUSH  A
    288B: 52 FC    MOV   A,[X-4]
    288D: 08       PUSH  A
    288E: 9C C1    CALL  0x2551
    2890: 38 FC    ADD   SP,0xFC
    2892: 7D 30 58 LJMP  0x3058
    2895: 56 01 00 MOV   [X+1],0x0
    2898: 56 00 00 MOV   [X+0],0x0
    289B: 3D 0D 00 CMP   [X+13],0x0
    289E: B0 2E    JNZ   0x28CD
    28A0: 3D 0E 00 CMP   [X+14],0x0
    28A3: B0 29    JNZ   0x28CD
    28A5: 7C 32 9A LCALL 0x329A
    28A8: C0 24    JC    0x28CD
    28AA: 62 D0 00 MOV   REG[0xD0],0x0
    28AD: 52 01    MOV   A,[X+1]
    28AF: 13 06    SUB   A,[X+6]
    28B1: 53 4E    MOV   [__r1],A
    28B3: 52 00    MOV   A,[X+0]
    28B5: 1B 05    SBB   A,[X+5]
    28B7: 53 4F    MOV   [__r0],A
    28B9: 52 F0    MOV   A,[X-16]
    28BB: 12 4E    SUB   A,[__r1]
    28BD: 51 4F    MOV   A,[__r0]
    28BF: 31 80    XOR   A,0x80
    28C1: 53 43    MOV   [__rX],A
    28C3: 52 EF    MOV   A,[X-17]
    28C5: 31 80    XOR   A,0x80
    28C7: 1A 43    SBB   A,[__rX]
    28C9: D0 03    JNC   0x28CD
    28CB: 80 9F    JMP   0x296B
    28CD: 7C 32 C5 LCALL 0x32C5
    28D0: 60 D4    MOV   REG[0xD4],A
    28D2: 3E 4E    MVI   A,[__r1]
    28D4: 54 04    MOV   [X+4],A
    28D6: 3D 04 30 CMP   [X+4],0x30
    28D9: C0 5E    JC    0x2938
    28DB: 50 39    MOV   A,0x39
    28DD: 3B 04    CMP   A,[X+4]
    28DF: C0 58    JC    0x2938
    28E1: 52 01    MOV   A,[X+1]
    28E3: 54 23    MOV   [X+35],A
    28E5: 52 00    MOV   A,[X+0]
    28E7: 54 22    MOV   [X+34],A
    28E9: 50 30    MOV   A,0x30
    28EB: 3B 04    CMP   A,[X+4]
    28ED: D0 15    JNC   0x2903
    28EF: 52 1F    MOV   A,[X+31]
    28F1: 11 00    SUB   A,0x0
    28F3: 52 1E    MOV   A,[X+30]
    28F5: 31 80    XOR   A,0x80
    28F7: 19 80    SBB   A,0x80
    28F9: D0 09    JNC   0x2903
    28FB: 52 01    MOV   A,[X+1]
    28FD: 54 1F    MOV   [X+31],A
    28FF: 52 00    MOV   A,[X+0]
    2901: 54 1E    MOV   [X+30],A
    2903: 7C 32 9A LCALL 0x329A
    2906: D0 1E    JNC   0x2925
    2908: 7C 33 28 LCALL 0x3328
    290B: D0 0F    JNC   0x291B
    290D: 50 30    MOV   A,0x30
    290F: 3B 04    CMP   A,[X+4]
    2911: D0 09    JNC   0x291B
    2913: 52 01    MOV   A,[X+1]
    2915: 54 0C    MOV   [X+12],A
    2917: 52 00    MOV   A,[X+0]
    2919: 54 0B    MOV   [X+11],A
    291B: 7C 33 28 LCALL 0x3328
    291E: C0 06    JC    0x2925
    2920: 77 16    INC   [X+22]
    2922: 0F 15 00 ADC   [X+21],0x0
    2925: 7C 32 9A LCALL 0x329A
    2928: C0 0F    JC    0x2938
    292A: 50 30    MOV   A,0x30
    292C: 3B 04    CMP   A,[X+4]
    292E: D0 09    JNC   0x2938
    2930: 52 01    MOV   A,[X+1]
    2932: 54 13    MOV   [X+19],A
    2934: 52 00    MOV   A,[X+0]
    2936: 54 12    MOV   [X+18],A
    2938: 3D 04 2E CMP   [X+4],0x2E
    293B: B0 09    JNZ   0x2945
    293D: 52 01    MOV   A,[X+1]
    293F: 54 06    MOV   [X+6],A
    2941: 52 00    MOV   A,[X+0]
    2943: 54 05    MOV   [X+5],A
    2945: 3D 04 2D CMP   [X+4],0x2D
    2948: B0 0A    JNZ   0x2953
    294A: 56 25 01 MOV   [X+37],0x1
    294D: 56 24 00 MOV   [X+36],0x0
    2950: 56 11 2D MOV   [X+17],0x2D
    2953: 3D 04 00 CMP   [X+4],0x0
    2956: B0 03    JNZ   0x295A
    2958: 80 12    JMP   0x296B
    295A: 77 01    INC   [X+1]
    295C: 0F 00 00 ADC   [X+0],0x0
    295F: 52 01    MOV   A,[X+1]
    2961: 11 14    SUB   A,0x14
    2963: 52 00    MOV   A,[X+0]
    2965: 31 80    XOR   A,0x80
    2967: 19 80    SBB   A,0x80
    2969: CF 31    JC    0x289B
    296B: 7C 32 9A LCALL 0x329A
    296E: D0 1B    JNC   0x298A
    2970: 52 23    MOV   A,[X+35]
    2972: 01 01    ADD   A,0x1
    2974: 54 10    MOV   [X+16],A
    2976: 52 22    MOV   A,[X+34]
    2978: 09 00    ADC   A,0x0
    297A: 54 0F    MOV   [X+15],A
    297C: 52 10    MOV   A,[X+16]
    297E: 01 01    ADD   A,0x1
    2980: 54 21    MOV   [X+33],A
    2982: 52 0F    MOV   A,[X+15]
    2984: 09 00    ADC   A,0x0
    2986: 54 20    MOV   [X+32],A
    2988: 80 2F    JMP   0x29B8
    298A: 52 06    MOV   A,[X+6]
    298C: 54 10    MOV   [X+16],A
    298E: 52 05    MOV   A,[X+5]
    2990: 54 0F    MOV   [X+15],A
    2992: 52 13    MOV   A,[X+19]
    2994: 11 00    SUB   A,0x0
    2996: 52 12    MOV   A,[X+18]
    2998: 31 80    XOR   A,0x80
    299A: 19 80    SBB   A,0x80
    299C: D0 0F    JNC   0x29AC
    299E: 52 10    MOV   A,[X+16]
    29A0: 01 01    ADD   A,0x1
    29A2: 54 21    MOV   [X+33],A
    29A4: 52 0F    MOV   A,[X+15]
    29A6: 09 00    ADC   A,0x0
    29A8: 54 20    MOV   [X+32],A
    29AA: 80 0D    JMP   0x29B8
    29AC: 52 13    MOV   A,[X+19]
    29AE: 01 01    ADD   A,0x1
    29B0: 54 21    MOV   [X+33],A
    29B2: 52 12    MOV   A,[X+18]
    29B4: 09 00    ADC   A,0x0
    29B6: 54 20    MOV   [X+32],A
    29B8: 7C 33 28 LCALL 0x3328
    29BB: D0 0D    JNC   0x29C9
    29BD: 52 10    MOV   A,[X+16]
    29BF: 11 01    SUB   A,0x1
    29C1: 54 0C    MOV   [X+12],A
    29C3: 52 0F    MOV   A,[X+15]
    29C5: 19 00    SBB   A,0x0
    29C7: 54 0B    MOV   [X+11],A
    29C9: 3D 0D 00 CMP   [X+13],0x0
    29CC: B0 06    JNZ   0x29D3
    29CE: 3D 0E 00 CMP   [X+14],0x0
    29D1: A3 DF    JZ    0x2DB1
    29D3: 52 1F    MOV   A,[X+31]
    29D5: 11 00    SUB   A,0x0
    29D7: 52 1E    MOV   A,[X+30]
    29D9: 31 80    XOR   A,0x80
    29DB: 19 80    SBB   A,0x80
    29DD: D0 09    JNC   0x29E7
    29DF: 52 0C    MOV   A,[X+12]
    29E1: 54 1F    MOV   [X+31],A
    29E3: 52 0B    MOV   A,[X+11]
    29E5: 54 1E    MOV   [X+30],A
    29E7: 56 01 00 MOV   [X+1],0x0
    29EA: 56 00 00 MOV   [X+0],0x0
    29ED: 52 11    MOV   A,[X+17]
    29EF: 3B 14    CMP   A,[X+20]
    29F1: A0 0D    JZ    0x29FF
    29F3: 96 CE    CALL  <created procedures>
    29F5: 40       NOP   
    29F6: 97 81    CALL  0x3179
    29F8: 40       NOP   
    29F9: 60 D5    MOV   REG[0xD5],A
    29FB: 52 11    MOV   A,[X+17]
    29FD: 3F 4E    MVI   [__r1],A
    29FF: 96 C2    CALL  <created procedures>
    2A01: 40       NOP   
    2A02: 52 1F    MOV   A,[X+31]
    2A04: 03 0A    ADD   A,[X+10]
    2A06: 53 4C    MOV   [__r3],A
    2A08: 52 1E    MOV   A,[X+30]
    2A0A: 0B 09    ADC   A,[X+9]
    2A0C: 60 D4    MOV   REG[0xD4],A
    2A0E: 3E 4C    MVI   A,[__r3]
    2A10: 53 4D    MOV   [__r2],A
    2A12: 97 65    CALL  0x3179
    2A14: 40       NOP   
    2A15: 60 D5    MOV   REG[0xD5],A
    2A17: 51 4D    MOV   A,[__r2]
    2A19: 3F 4E    MVI   [__r1],A
    2A1B: 7C 33 1D LCALL 0x331D
    2A1E: 60 D5    MOV   REG[0xD5],A
    2A20: 50 2E    MOV   A,0x2E
    2A22: 3F 4E    MVI   [__r1],A
    2A24: 50 00    MOV   A,0x0
    2A26: 13 F0    SUB   A,[X-16]
    2A28: 52 EF    MOV   A,[X-17]
    2A2A: 31 80    XOR   A,0x80
    2A2C: 53 43    MOV   [__rX],A
    2A2E: 50 80    MOV   A,0x80
    2A30: 1A 43    SBB   A,[__rX]
    2A32: D0 06    JNC   0x2A39
    2A34: 77 01    INC   [X+1]
    2A36: 0F 00 00 ADC   [X+0],0x0
    2A39: 52 1F    MOV   A,[X+31]
    2A3B: 01 01    ADD   A,0x1
    2A3D: 54 03    MOV   [X+3],A
    2A3F: 52 1E    MOV   A,[X+30]
    2A41: 09 00    ADC   A,0x0
    2A43: 54 02    MOV   [X+2],A
    2A45: 56 08 00 MOV   [X+8],0x0
    2A48: 56 07 00 MOV   [X+7],0x0
    2A4B: 80 6C    JMP   0x2AB8
    2A4D: 52 02    MOV   A,[X+2]
    2A4F: 3B 0F    CMP   A,[X+15]
    2A51: B0 07    JNZ   0x2A59
    2A53: 52 03    MOV   A,[X+3]
    2A55: 3B 10    CMP   A,[X+16]
    2A57: A0 5B    JZ    0x2AB3
    2A59: 52 03    MOV   A,[X+3]
    2A5B: 13 21    SUB   A,[X+33]
    2A5D: 52 20    MOV   A,[X+32]
    2A5F: 97 D8    CALL  0x3239
    2A61: 40       NOP   
    2A62: D0 1F    JNC   0x2A82
    2A64: 96 75    CALL  0x30DB
    2A66: 40       NOP   
    2A67: 52 03    MOV   A,[X+3]
    2A69: 03 0A    ADD   A,[X+10]
    2A6B: 53 4C    MOV   [__r3],A
    2A6D: 52 02    MOV   A,[X+2]
    2A6F: 0B 09    ADC   A,[X+9]
    2A71: 60 D4    MOV   REG[0xD4],A
    2A73: 3E 4C    MVI   A,[__r3]
    2A75: 53 4D    MOV   [__r2],A
    2A77: 97 00    CALL  0x3179
    2A79: 40       NOP   
    2A7A: 60 D5    MOV   REG[0xD5],A
    2A7C: 51 4D    MOV   A,[__r2]
    2A7E: 3F 4E    MVI   [__r1],A
    2A80: 80 2D    JMP   0x2AAE
    2A82: 62 D0 00 MOV   REG[0xD0],0x0
    2A85: 52 F4    MOV   A,[X-12]
    2A87: 21 01    AND   A,0x1
    2A89: 53 4E    MOV   [__r1],A
    2A8B: 52 F3    MOV   A,[X-13]
    2A8D: 21 00    AND   A,0x0
    2A8F: 39 00    CMP   A,0x0
    2A91: B0 10    JNZ   0x2AA2
    2A93: 3C 4E 00 CMP   [__r1],0x0
    2A96: B0 0B    JNZ   0x2AA2
    2A98: 3D 07 00 CMP   [X+7],0x0
    2A9B: B0 3D    JNZ   0x2AD9
    2A9D: 3D 08 00 CMP   [X+8],0x0
    2AA0: B0 38    JNZ   0x2AD9
    2AA2: 96 1F    CALL  <created procedures>
    2AA4: 40       NOP   
    2AA5: 96 D2    CALL  0x3179
    2AA7: 40       NOP   
    2AA8: 60 D5    MOV   REG[0xD5],A
    2AAA: 50 30    MOV   A,0x30
    2AAC: 3F 4E    MVI   [__r1],A
    2AAE: 77 08    INC   [X+8]
    2AB0: 0F 07 00 ADC   [X+7],0x0
    2AB3: 77 03    INC   [X+3]
    2AB5: 0F 02 00 ADC   [X+2],0x0
    2AB8: 52 08    MOV   A,[X+8]
    2ABA: 13 F0    SUB   A,[X-16]
    2ABC: 52 EF    MOV   A,[X-17]
    2ABE: 31 80    XOR   A,0x80
    2AC0: 62 D0 00 MOV   REG[0xD0],0x0
    2AC3: 53 43    MOV   [__rX],A
    2AC5: 52 07    MOV   A,[X+7]
    2AC7: 31 80    XOR   A,0x80
    2AC9: 1A 43    SBB   A,[__rX]
    2ACB: D0 0D    JNC   0x2AD9
    2ACD: 52 01    MOV   A,[X+1]
    2ACF: 11 0E    SUB   A,0xE
    2AD1: 52 00    MOV   A,[X+0]
    2AD3: 31 80    XOR   A,0x80
    2AD5: 19 80    SBB   A,0x80
    2AD7: CF 75    JC    0x2A4D
    2AD9: 52 01    MOV   A,[X+1]
    2ADB: 11 01    SUB   A,0x1
    2ADD: 54 08    MOV   [X+8],A
    2ADF: 52 00    MOV   A,[X+0]
    2AE1: 19 00    SBB   A,0x0
    2AE3: 54 07    MOV   [X+7],A
    2AE5: 3D EF 00 CMP   [X-17],0x0
    2AE8: B0 0E    JNZ   0x2AF7
    2AEA: 3D F0 00 CMP   [X-16],0x0
    2AED: B0 09    JNZ   0x2AF7
    2AEF: 52 01    MOV   A,[X+1]
    2AF1: 54 08    MOV   [X+8],A
    2AF3: 52 00    MOV   A,[X+0]
    2AF5: 54 07    MOV   [X+7],A
    2AF7: 62 D0 00 MOV   REG[0xD0],0x0
    2AFA: 52 10    MOV   A,[X+16]
    2AFC: 13 1F    SUB   A,[X+31]
    2AFE: 53 4E    MOV   [__r1],A
    2B00: 52 0F    MOV   A,[X+15]
    2B02: 1B 1E    SBB   A,[X+30]
    2B04: 53 4F    MOV   [__r0],A
    2B06: 51 4E    MOV   A,[__r1]
    2B08: 11 01    SUB   A,0x1
    2B0A: 54 29    MOV   [X+41],A
    2B0C: 51 4F    MOV   A,[__r0]
    2B0E: 19 00    SBB   A,0x0
    2B10: 54 28    MOV   [X+40],A
    2B12: 52 03    MOV   A,[X+3]
    2B14: 13 21    SUB   A,[X+33]
    2B16: 52 20    MOV   A,[X+32]
    2B18: 31 80    XOR   A,0x80
    2B1A: 53 43    MOV   [__rX],A
    2B1C: 52 02    MOV   A,[X+2]
    2B1E: 31 80    XOR   A,0x80
    2B20: 1A 43    SBB   A,[__rX]
    2B22: D0 0D    JNC   0x2B30
    2B24: 7C 33 42 LCALL 0x3342
    2B27: 39 2E    CMP   A,0x2E
    2B29: B0 06    JNZ   0x2B30
    2B2B: 77 03    INC   [X+3]
    2B2D: 0F 02 00 ADC   [X+2],0x0
    2B30: 52 03    MOV   A,[X+3]
    2B32: 13 21    SUB   A,[X+33]
    2B34: 52 20    MOV   A,[X+32]
    2B36: 97 01    CALL  0x3239
    2B38: 40       NOP   
    2B39: D0 E6    JNC   0x2C20
    2B3B: 7C 33 42 LCALL 0x3342
    2B3E: 53 4E    MOV   [__r1],A
    2B40: 55 4F 00 MOV   [__r0],0x0
    2B43: 11 35    SUB   A,0x35
    2B45: 50 00    MOV   A,0x0
    2B47: 31 80    XOR   A,0x80
    2B49: 19 80    SBB   A,0x80
    2B4B: C0 D4    JC    0x2C20
    2B4D: 50 39    MOV   A,0x39
    2B4F: 97 96    CALL  0x32E7
    2B51: 40       NOP   
    2B52: C0 CD    JC    0x2C20
    2B54: 80 BF    JMP   0x2C14
    2B56: 62 D0 00 MOV   REG[0xD0],0x0
    2B59: 96 56    CALL  0x31B1
    2B5B: 40       NOP   
    2B5C: 60 D4    MOV   REG[0xD4],A
    2B5E: 3E 4E    MVI   A,[__r1]
    2B60: 53 4E    MOV   [__r1],A
    2B62: 55 4F 00 MOV   [__r0],0x0
    2B65: 11 30    SUB   A,0x30
    2B67: 50 00    MOV   A,0x0
    2B69: 31 80    XOR   A,0x80
    2B6B: 19 80    SBB   A,0x80
    2B6D: C0 22    JC    0x2B90
    2B6F: 50 38    MOV   A,0x38
    2B71: 97 74    CALL  0x32E7
    2B73: 40       NOP   
    2B74: C0 1B    JC    0x2B90
    2B76: 96 39    CALL  0x31B1
    2B78: 40       NOP   
    2B79: 53 4F    MOV   [__r0],A
    2B7B: 60 D4    MOV   REG[0xD4],A
    2B7D: 3E 4E    MVI   A,[__r1]
    2B7F: 7A 4E    DEC   [__r1]
    2B81: 53 4D    MOV   [__r2],A
    2B83: 06 4D 01 ADD   [__r2],0x1
    2B86: 51 4F    MOV   A,[__r0]
    2B88: 60 D5    MOV   REG[0xD5],A
    2B8A: 51 4D    MOV   A,[__r2]
    2B8C: 3F 4E    MVI   [__r1],A
    2B8E: 80 91    JMP   0x2C20
    2B90: 62 D0 00 MOV   REG[0xD0],0x0
    2B93: 96 1C    CALL  0x31B1
    2B95: 40       NOP   
    2B96: 60 D4    MOV   REG[0xD4],A
    2B98: 3E 4E    MVI   A,[__r1]
    2B9A: 39 2E    CMP   A,0x2E
    2B9C: B0 5B    JNZ   0x2BF8
    2B9E: 7B 08    DEC   [X+8]
    2BA0: 1F 07 00 SBB   [X+7],0x0
    2BA3: 96 0C    CALL  0x31B1
    2BA5: 40       NOP   
    2BA6: 60 D4    MOV   REG[0xD4],A
    2BA8: 3E 4E    MVI   A,[__r1]
    2BAA: 53 4E    MOV   [__r1],A
    2BAC: 55 4F 00 MOV   [__r0],0x0
    2BAF: 11 30    SUB   A,0x30
    2BB1: 50 00    MOV   A,0x0
    2BB3: 31 80    XOR   A,0x80
    2BB5: 19 80    SBB   A,0x80
    2BB7: C0 22    JC    0x2BDA
    2BB9: 50 38    MOV   A,0x38
    2BBB: 97 2A    CALL  0x32E7
    2BBD: 40       NOP   
    2BBE: C0 1B    JC    0x2BDA
    2BC0: 95 EF    CALL  0x31B1
    2BC2: 40       NOP   
    2BC3: 53 4F    MOV   [__r0],A
    2BC5: 60 D4    MOV   REG[0xD4],A
    2BC7: 3E 4E    MVI   A,[__r1]
    2BC9: 7A 4E    DEC   [__r1]
    2BCB: 53 4D    MOV   [__r2],A
    2BCD: 06 4D 01 ADD   [__r2],0x1
    2BD0: 51 4F    MOV   A,[__r0]
    2BD2: 60 D5    MOV   REG[0xD5],A
    2BD4: 51 4D    MOV   A,[__r2]
    2BD6: 3F 4E    MVI   [__r1],A
    2BD8: 80 47    JMP   0x2C20
    2BDA: 62 D0 00 MOV   REG[0xD0],0x0
    2BDD: 95 D2    CALL  0x31B1
    2BDF: 40       NOP   
    2BE0: 60 D4    MOV   REG[0xD4],A
    2BE2: 3E 4E    MVI   A,[__r1]
    2BE4: 39 39    CMP   A,0x39
    2BE6: B0 11    JNZ   0x2BF8
    2BE8: 95 C7    CALL  0x31B1
    2BEA: 40       NOP   
    2BEB: 60 D5    MOV   REG[0xD5],A
    2BED: 50 31    MOV   A,0x31
    2BEF: 3F 4E    MVI   [__r1],A
    2BF1: 77 29    INC   [X+41]
    2BF3: 0F 28 00 ADC   [X+40],0x0
    2BF6: 80 29    JMP   0x2C20
    2BF8: 62 D0 00 MOV   REG[0xD0],0x0
    2BFB: 95 B4    CALL  0x31B1
    2BFD: 40       NOP   
    2BFE: 60 D4    MOV   REG[0xD4],A
    2C00: 3E 4E    MVI   A,[__r1]
    2C02: 39 39    CMP   A,0x39
    2C04: B0 0A    JNZ   0x2C0F
    2C06: 95 A9    CALL  0x31B1
    2C08: 40       NOP   
    2C09: 60 D5    MOV   REG[0xD5],A
    2C0B: 50 30    MOV   A,0x30
    2C0D: 3F 4E    MVI   [__r1],A
    2C0F: 7B 08    DEC   [X+8]
    2C11: 1F 07 00 SBB   [X+7],0x0
    2C14: 52 08    MOV   A,[X+8]
    2C16: 11 00    SUB   A,0x0
    2C18: 52 07    MOV   A,[X+7]
    2C1A: 31 80    XOR   A,0x80
    2C1C: 19 80    SBB   A,0x80
    2C1E: DF 37    JNC   0x2B56
    2C20: 94 A1    CALL  <created procedures>
    2C22: 40       NOP   
    2C23: 95 54    CALL  0x3179
    2C25: 40       NOP   
    2C26: 60 D5    MOV   REG[0xD5],A
    2C28: 52 2C    MOV   A,[X+44]
    2C2A: 3F 4E    MVI   [__r1],A
    2C2C: 52 29    MOV   A,[X+41]
    2C2E: 11 00    SUB   A,0x0
    2C30: 52 28    MOV   A,[X+40]
    2C32: 31 80    XOR   A,0x80
    2C34: 19 80    SBB   A,0x80
    2C36: D0 17    JNC   0x2C4E
    2C38: 94 A1    CALL  0x30DB
    2C3A: 40       NOP   
    2C3B: 95 3C    CALL  0x3179
    2C3D: 40       NOP   
    2C3E: 60 D5    MOV   REG[0xD5],A
    2C40: 50 2D    MOV   A,0x2D
    2C42: 3F 4E    MVI   [__r1],A
    2C44: 52 29    MOV   A,[X+41]
    2C46: 73       CPL   A
    2C47: 54 29    MOV   [X+41],A
    2C49: 52 28    MOV   A,[X+40]
    2C4B: 73       CPL   A
    2C4C: 54 28    MOV   [X+40],A
    2C4E: 50 00    MOV   A,0x0
    2C50: 08       PUSH  A
    2C51: 50 0A    MOV   A,0xA
    2C53: 08       PUSH  A
    2C54: 52 28    MOV   A,[X+40]
    2C56: 08       PUSH  A
    2C57: 52 29    MOV   A,[X+41]
    2C59: 08       PUSH  A
    2C5A: 62 D0 00 MOV   REG[0xD0],0x0
    2C5D: 96 BE    CALL  0x331D
    2C5F: 40       NOP   
    2C60: 08       PUSH  A
    2C61: 51 4E    MOV   A,[__r1]
    2C63: 08       PUSH  A
    2C64: 7C 1C 75 LCALL _itoa
    2C67: 38 FA    ADD   SP,0xFA
    2C69: 56 01 00 MOV   [X+1],0x0
    2C6C: 56 00 00 MOV   [X+0],0x0
    2C6F: 62 D0 00 MOV   REG[0xD0],0x0
    2C72: 96 A9    CALL  0x331D
    2C74: 40       NOP   
    2C75: 60 D4    MOV   REG[0xD4],A
    2C77: 3E 4E    MVI   A,[__r1]
    2C79: 39 00    CMP   A,0x0
    2C7B: B0 0B    JNZ   0x2C87
    2C7D: 52 01    MOV   A,[X+1]
    2C7F: 54 18    MOV   [X+24],A
    2C81: 52 00    MOV   A,[X+0]
    2C83: 54 17    MOV   [X+23],A
    2C85: 80 12    JMP   0x2C98
    2C87: 77 01    INC   [X+1]
    2C89: 0F 00 00 ADC   [X+0],0x0
    2C8C: 52 01    MOV   A,[X+1]
    2C8E: 11 14    SUB   A,0x14
    2C90: 52 00    MOV   A,[X+0]
    2C92: 31 80    XOR   A,0x80
    2C94: 19 80    SBB   A,0x80
    2C96: CF D8    JC    0x2C6F
    2C98: 62 D0 00 MOV   REG[0xD0],0x0
    2C9B: 52 F4    MOV   A,[X-12]
    2C9D: 21 04    AND   A,0x4
    2C9F: 53 4E    MOV   [__r1],A
    2CA1: 52 F3    MOV   A,[X-13]
    2CA3: 21 00    AND   A,0x0
    2CA5: 39 00    CMP   A,0x0
    2CA7: B0 06    JNZ   0x2CAE
    2CA9: 3C 4E 00 CMP   [__r1],0x0
    2CAC: A0 48    JZ    0x2CF5
    2CAE: 52 18    MOV   A,[X+24]
    2CB0: 95 4C    CALL  0x31FE
    2CB2: 40       NOP   
    2CB3: 52 17    MOV   A,[X+23]
    2CB5: 31 80    XOR   A,0x80
    2CB7: 1A 43    SBB   A,[__rX]
    2CB9: D3 9B    JNC   0x3055
    2CBB: 52 18    MOV   A,[X+24]
    2CBD: 54 03    MOV   [X+3],A
    2CBF: 52 17    MOV   A,[X+23]
    2CC1: 54 02    MOV   [X+2],A
    2CC3: 80 0D    JMP   0x2CD1
    2CC5: 94 A2    CALL  0x3169
    2CC7: 40       NOP   
    2CC8: 52 19    MOV   A,[X+25]
    2CCA: 3F 4E    MVI   [__r1],A
    2CCC: 77 03    INC   [X+3]
    2CCE: 0F 02 00 ADC   [X+2],0x0
    2CD1: 52 03    MOV   A,[X+3]
    2CD3: 95 29    CALL  0x31FE
    2CD5: 40       NOP   
    2CD6: 52 02    MOV   A,[X+2]
    2CD8: 31 80    XOR   A,0x80
    2CDA: 1A 43    SBB   A,[__rX]
    2CDC: CF E8    JC    0x2CC5
    2CDE: 52 F2    MOV   A,[X-14]
    2CE0: 11 01    SUB   A,0x1
    2CE2: 53 4E    MOV   [__r1],A
    2CE4: 52 F1    MOV   A,[X-15]
    2CE6: 19 00    SBB   A,0x0
    2CE8: 53 4F    MOV   [__r0],A
    2CEA: 94 8D    CALL  0x3179
    2CEC: 40       NOP   
    2CED: 60 D5    MOV   REG[0xD5],A
    2CEF: 50 00    MOV   A,0x0
    2CF1: 3F 4E    MVI   [__r1],A
    2CF3: 83 61    JMP   0x3055
    2CF5: 52 18    MOV   A,[X+24]
    2CF7: 95 05    CALL  0x31FE
    2CF9: 40       NOP   
    2CFA: 52 17    MOV   A,[X+23]
    2CFC: 31 80    XOR   A,0x80
    2CFE: 1A 43    SBB   A,[__rX]
    2D00: D3 54    JNC   0x3055
    2D02: 52 18    MOV   A,[X+24]
    2D04: 54 03    MOV   [X+3],A
    2D06: 52 17    MOV   A,[X+23]
    2D08: 54 02    MOV   [X+2],A
    2D0A: 80 3D    JMP   0x2D48
    2D0C: 62 D0 00 MOV   REG[0xD0],0x0
    2D0F: 52 03    MOV   A,[X+3]
    2D11: 03 FC    ADD   A,[X-4]
    2D13: 53 4E    MOV   [__r1],A
    2D15: 52 02    MOV   A,[X+2]
    2D17: 0B FB    ADC   A,[X-5]
    2D19: 60 D4    MOV   REG[0xD4],A
    2D1B: 3E 4E    MVI   A,[__r1]
    2D1D: 53 4F    MOV   [__r0],A
    2D1F: 52 03    MOV   A,[X+3]
    2D21: 03 F2    ADD   A,[X-14]
    2D23: 53 4C    MOV   [__r3],A
    2D25: 52 02    MOV   A,[X+2]
    2D27: 0B F1    ADC   A,[X-15]
    2D29: 53 4D    MOV   [__r2],A
    2D2B: 52 18    MOV   A,[X+24]
    2D2D: 14 4C    SUB   [__r3],A
    2D2F: 52 17    MOV   A,[X+23]
    2D31: 1C 4D    SBB   [__r2],A
    2D33: 52 FC    MOV   A,[X-4]
    2D35: 04 4C    ADD   [__r3],A
    2D37: 52 FB    MOV   A,[X-5]
    2D39: 0C 4D    ADC   [__r2],A
    2D3B: 51 4D    MOV   A,[__r2]
    2D3D: 60 D5    MOV   REG[0xD5],A
    2D3F: 51 4F    MOV   A,[__r0]
    2D41: 3F 4C    MVI   [__r3],A
    2D43: 7B 03    DEC   [X+3]
    2D45: 1F 02 00 SBB   [X+2],0x0
    2D48: 52 03    MOV   A,[X+3]
    2D4A: 11 00    SUB   A,0x0
    2D4C: 52 02    MOV   A,[X+2]
    2D4E: 31 80    XOR   A,0x80
    2D50: 19 80    SBB   A,0x80
    2D52: DF B9    JNC   0x2D0C
    2D54: 62 D0 00 MOV   REG[0xD0],0x0
    2D57: 95 F8    CALL  0x3351
    2D59: 40       NOP   
    2D5A: 51 4E    MOV   A,[__r1]
    2D5C: 11 01    SUB   A,0x1
    2D5E: 54 03    MOV   [X+3],A
    2D60: 51 4F    MOV   A,[__r0]
    2D62: 19 00    SBB   A,0x0
    2D64: 54 02    MOV   [X+2],A
    2D66: 80 0D    JMP   0x2D74
    2D68: 93 FF    CALL  0x3169
    2D6A: 40       NOP   
    2D6B: 52 14    MOV   A,[X+20]
    2D6D: 3F 4E    MVI   [__r1],A
    2D6F: 7B 03    DEC   [X+3]
    2D71: 1F 02 00 SBB   [X+2],0x0
    2D74: 52 03    MOV   A,[X+3]
    2D76: 11 00    SUB   A,0x0
    2D78: 52 02    MOV   A,[X+2]
    2D7A: 31 80    XOR   A,0x80
    2D7C: 19 80    SBB   A,0x80
    2D7E: DF E9    JNC   0x2D68
    2D80: 62 D0 00 MOV   REG[0xD0],0x0
    2D83: 52 F4    MOV   A,[X-12]
    2D85: 21 10    AND   A,0x10
    2D87: 53 4E    MOV   [__r1],A
    2D89: 52 F3    MOV   A,[X-13]
    2D8B: 21 00    AND   A,0x0
    2D8D: 39 00    CMP   A,0x0
    2D8F: B0 06    JNZ   0x2D96
    2D91: 3C 4E 00 CMP   [__r1],0x0
    2D94: A2 C0    JZ    0x3055
    2D96: 52 11    MOV   A,[X+17]
    2D98: 3B 14    CMP   A,[X+20]
    2D9A: A2 BA    JZ    0x3055
    2D9C: 94 8F    CALL  0x322D
    2D9E: 40       NOP   
    2D9F: 52 11    MOV   A,[X+17]
    2DA1: 3F 4E    MVI   [__r1],A
    2DA3: 95 AC    CALL  0x3351
    2DA5: 40       NOP   
    2DA6: 93 D1    CALL  0x3179
    2DA8: 40       NOP   
    2DA9: 60 D5    MOV   REG[0xD5],A
    2DAB: 52 14    MOV   A,[X+20]
    2DAD: 3F 4E    MVI   [__r1],A
    2DAF: 82 A5    JMP   0x3055
    2DB1: 62 D0 00 MOV   REG[0xD0],0x0
    2DB4: 52 F4    MOV   A,[X-12]
    2DB6: 21 01    AND   A,0x1
    2DB8: 53 4E    MOV   [__r1],A
    2DBA: 52 F3    MOV   A,[X-13]
    2DBC: 21 00    AND   A,0x0
    2DBE: 39 00    CMP   A,0x0
    2DC0: B0 06    JNZ   0x2DC7
    2DC2: 3C 4E 00 CMP   [__r1],0x0
    2DC5: A0 3C    JZ    0x2E02
    2DC7: 62 D0 00 MOV   REG[0xD0],0x0
    2DCA: 52 10    MOV   A,[X+16]
    2DCC: 03 F0    ADD   A,[X-16]
    2DCE: 53 4E    MOV   [__r1],A
    2DD0: 52 0F    MOV   A,[X+15]
    2DD2: 0B EF    ADC   A,[X-17]
    2DD4: 53 4F    MOV   [__r0],A
    2DD6: 51 4E    MOV   A,[__r1]
    2DD8: 13 21    SUB   A,[X+33]
    2DDA: 52 20    MOV   A,[X+32]
    2DDC: 31 80    XOR   A,0x80
    2DDE: 53 43    MOV   [__rX],A
    2DE0: 51 4F    MOV   A,[__r0]
    2DE2: 31 80    XOR   A,0x80
    2DE4: 1A 43    SBB   A,[__rX]
    2DE6: C0 3E    JC    0x2E25
    2DE8: 52 10    MOV   A,[X+16]
    2DEA: 03 F0    ADD   A,[X-16]
    2DEC: 53 4E    MOV   [__r1],A
    2DEE: 52 0F    MOV   A,[X+15]
    2DF0: 0B EF    ADC   A,[X-17]
    2DF2: 53 4F    MOV   [__r0],A
    2DF4: 51 4E    MOV   A,[__r1]
    2DF6: 01 01    ADD   A,0x1
    2DF8: 54 21    MOV   [X+33],A
    2DFA: 51 4F    MOV   A,[__r0]
    2DFC: 09 00    ADC   A,0x0
    2DFE: 54 20    MOV   [X+32],A
    2E00: 80 24    JMP   0x2E25
    2E02: 62 D0 00 MOV   REG[0xD0],0x0
    2E05: 52 10    MOV   A,[X+16]
    2E07: 01 01    ADD   A,0x1
    2E09: 53 4E    MOV   [__r1],A
    2E0B: 52 0F    MOV   A,[X+15]
    2E0D: 09 00    ADC   A,0x0
    2E0F: 53 4F    MOV   [__r0],A
    2E11: 52 20    MOV   A,[X+32]
    2E13: 3A 4F    CMP   A,[__r0]
    2E15: B0 0F    JNZ   0x2E25
    2E17: 52 21    MOV   A,[X+33]
    2E19: 3A 4E    CMP   A,[__r1]
    2E1B: B0 09    JNZ   0x2E25
    2E1D: 52 10    MOV   A,[X+16]
    2E1F: 54 21    MOV   [X+33],A
    2E21: 52 0F    MOV   A,[X+15]
    2E23: 54 20    MOV   [X+32],A
    2E25: 50 14    MOV   A,0x14
    2E27: 13 21    SUB   A,[X+33]
    2E29: 52 20    MOV   A,[X+32]
    2E2B: 93 30    CALL  0x315D
    2E2D: 40       NOP   
    2E2E: D0 07    JNC   0x2E36
    2E30: 56 21 14 MOV   [X+33],0x14
    2E33: 56 20 00 MOV   [X+32],0x0
    2E36: 52 21    MOV   A,[X+33]
    2E38: 13 0C    SUB   A,[X+12]
    2E3A: 54 18    MOV   [X+24],A
    2E3C: 52 20    MOV   A,[X+32]
    2E3E: 1B 0B    SBB   A,[X+11]
    2E40: 54 17    MOV   [X+23],A
    2E42: 52 11    MOV   A,[X+17]
    2E44: 3B 14    CMP   A,[X+20]
    2E46: A0 06    JZ    0x2E4D
    2E48: 77 18    INC   [X+24]
    2E4A: 0F 17 00 ADC   [X+23],0x0
    2E4D: 52 F2    MOV   A,[X-14]
    2E4F: 13 18    SUB   A,[X+24]
    2E51: 52 17    MOV   A,[X+23]
    2E53: 31 80    XOR   A,0x80
    2E55: 62 D0 00 MOV   REG[0xD0],0x0
    2E58: 53 43    MOV   [__rX],A
    2E5A: 52 F1    MOV   A,[X-15]
    2E5C: 31 80    XOR   A,0x80
    2E5E: 1A 43    SBB   A,[__rX]
    2E60: D0 09    JNC   0x2E6A
    2E62: 52 18    MOV   A,[X+24]
    2E64: 54 F2    MOV   [X-14],A
    2E66: 52 17    MOV   A,[X+23]
    2E68: 54 F1    MOV   [X-15],A
    2E6A: 50 14    MOV   A,0x14
    2E6C: 13 F2    SUB   A,[X-14]
    2E6E: 52 F1    MOV   A,[X-15]
    2E70: 92 EB    CALL  0x315D
    2E72: 40       NOP   
    2E73: D0 07    JNC   0x2E7B
    2E75: 56 F2 14 MOV   [X-14],0x14
    2E78: 56 F1 00 MOV   [X-15],0x0
    2E7B: 50 14    MOV   A,0x14
    2E7D: 13 18    SUB   A,[X+24]
    2E7F: 52 17    MOV   A,[X+23]
    2E81: 92 DA    CALL  0x315D
    2E83: 40       NOP   
    2E84: D0 07    JNC   0x2E8C
    2E86: 56 18 14 MOV   [X+24],0x14
    2E89: 56 17 00 MOV   [X+23],0x0
    2E8C: 62 D0 00 MOV   REG[0xD0],0x0
    2E8F: 52 F4    MOV   A,[X-12]
    2E91: 21 04    AND   A,0x4
    2E93: 53 4E    MOV   [__r1],A
    2E95: 52 F3    MOV   A,[X-13]
    2E97: 21 00    AND   A,0x0
    2E99: 39 00    CMP   A,0x0
    2E9B: B0 12    JNZ   0x2EAE
    2E9D: 3C 4E 00 CMP   [__r1],0x0
    2EA0: B0 0D    JNZ   0x2EAE
    2EA2: 52 F1    MOV   A,[X-15]
    2EA4: 3B 17    CMP   A,[X+23]
    2EA6: B0 22    JNZ   0x2EC9
    2EA8: 52 F2    MOV   A,[X-14]
    2EAA: 3B 18    CMP   A,[X+24]
    2EAC: B0 1C    JNZ   0x2EC9
    2EAE: 56 27 00 MOV   [X+39],0x0
    2EB1: 56 26 00 MOV   [X+38],0x0
    2EB4: 52 11    MOV   A,[X+17]
    2EB6: 3B 14    CMP   A,[X+20]
    2EB8: A0 7F    JZ    0x2F38
    2EBA: 93 71    CALL  0x322D
    2EBC: 40       NOP   
    2EBD: 52 11    MOV   A,[X+17]
    2EBF: 3F 4E    MVI   [__r1],A
    2EC1: 56 27 01 MOV   [X+39],0x1
    2EC4: 56 26 00 MOV   [X+38],0x0
    2EC7: 80 70    JMP   0x2F38
    2EC9: 52 F2    MOV   A,[X-14]
    2ECB: 13 18    SUB   A,[X+24]
    2ECD: 54 27    MOV   [X+39],A
    2ECF: 52 F1    MOV   A,[X-15]
    2ED1: 1B 17    SBB   A,[X+23]
    2ED3: 54 26    MOV   [X+38],A
    2ED5: 56 03 00 MOV   [X+3],0x0
    2ED8: 56 02 00 MOV   [X+2],0x0
    2EDB: 80 0D    JMP   0x2EE9
    2EDD: 92 8A    CALL  0x3169
    2EDF: 40       NOP   
    2EE0: 52 14    MOV   A,[X+20]
    2EE2: 3F 4E    MVI   [__r1],A
    2EE4: 77 03    INC   [X+3]
    2EE6: 0F 02 00 ADC   [X+2],0x0
    2EE9: 52 27    MOV   A,[X+39]
    2EEB: 13 03    SUB   A,[X+3]
    2EED: 52 02    MOV   A,[X+2]
    2EEF: 31 80    XOR   A,0x80
    2EF1: 62 D0 00 MOV   REG[0xD0],0x0
    2EF4: 53 43    MOV   [__rX],A
    2EF6: 52 26    MOV   A,[X+38]
    2EF8: 31 80    XOR   A,0x80
    2EFA: 1A 43    SBB   A,[__rX]
    2EFC: DF E0    JNC   0x2EDD
    2EFE: 52 11    MOV   A,[X+17]
    2F00: 3B 14    CMP   A,[X+20]
    2F02: A0 35    JZ    0x2F38
    2F04: 52 F4    MOV   A,[X-12]
    2F06: 21 10    AND   A,0x10
    2F08: 53 4E    MOV   [__r1],A
    2F0A: 52 F3    MOV   A,[X-13]
    2F0C: 21 00    AND   A,0x0
    2F0E: 39 00    CMP   A,0x0
    2F10: B0 06    JNZ   0x2F17
    2F12: 3C 4E 00 CMP   [__r1],0x0
    2F15: A0 0A    JZ    0x2F20
    2F17: 93 14    CALL  0x322D
    2F19: 40       NOP   
    2F1A: 52 11    MOV   A,[X+17]
    2F1C: 3F 4E    MVI   [__r1],A
    2F1E: 80 14    JMP   0x2F33
    2F20: 62 D0 00 MOV   REG[0xD0],0x0
    2F23: 52 27    MOV   A,[X+39]
    2F25: 03 FC    ADD   A,[X-4]
    2F27: 53 4E    MOV   [__r1],A
    2F29: 52 26    MOV   A,[X+38]
    2F2B: 0B FB    ADC   A,[X-5]
    2F2D: 60 D5    MOV   REG[0xD5],A
    2F2F: 52 11    MOV   A,[X+17]
    2F31: 3F 4E    MVI   [__r1],A
    2F33: 77 27    INC   [X+39]
    2F35: 0F 26 00 ADC   [X+38],0x0
    2F38: 52 27    MOV   A,[X+39]
    2F3A: 54 03    MOV   [X+3],A
    2F3C: 52 26    MOV   A,[X+38]
    2F3E: 54 02    MOV   [X+2],A
    2F40: 3D 15 00 CMP   [X+21],0x0
    2F43: B0 12    JNZ   0x2F56
    2F45: 3D 16 00 CMP   [X+22],0x0
    2F48: B0 0D    JNZ   0x2F56
    2F4A: 92 1D    CALL  0x3169
    2F4C: 40       NOP   
    2F4D: 50 30    MOV   A,0x30
    2F4F: 3F 4E    MVI   [__r1],A
    2F51: 77 03    INC   [X+3]
    2F53: 0F 02 00 ADC   [X+2],0x0
    2F56: 56 01 00 MOV   [X+1],0x0
    2F59: 56 00 00 MOV   [X+0],0x0
    2F5C: 80 1D    JMP   0x2F7A
    2F5E: 93 65    CALL  0x32C5
    2F60: 40       NOP   
    2F61: 53 4F    MOV   [__r0],A
    2F63: 52 0C    MOV   A,[X+12]
    2F65: 02 4E    ADD   A,[__r1]
    2F67: 53 4E    MOV   [__r1],A
    2F69: 52 0B    MOV   A,[X+11]
    2F6B: 0A 4F    ADC   A,[__r0]
    2F6D: 92 D8    CALL  0x3247
    2F6F: 40       NOP   
    2F70: 77 03    INC   [X+3]
    2F72: 0F 02 00 ADC   [X+2],0x0
    2F75: 77 01    INC   [X+1]
    2F77: 0F 00 00 ADC   [X+0],0x0
    2F7A: 52 01    MOV   A,[X+1]
    2F7C: 13 16    SUB   A,[X+22]
    2F7E: 52 15    MOV   A,[X+21]
    2F80: 31 80    XOR   A,0x80
    2F82: 62 D0 00 MOV   REG[0xD0],0x0
    2F85: 53 43    MOV   [__rX],A
    2F87: 52 00    MOV   A,[X+0]
    2F89: 31 80    XOR   A,0x80
    2F8B: 1A 43    SBB   A,[__rX]
    2F8D: CF D0    JC    0x2F5E
    2F8F: 52 10    MOV   A,[X+16]
    2F91: 13 21    SUB   A,[X+33]
    2F93: 52 20    MOV   A,[X+32]
    2F95: 31 80    XOR   A,0x80
    2F97: 53 43    MOV   [__rX],A
    2F99: 52 0F    MOV   A,[X+15]
    2F9B: 31 80    XOR   A,0x80
    2F9D: 1A 43    SBB   A,[__rX]
    2F9F: D0 0D    JNC   0x2FAD
    2FA1: 92 01    CALL  0x31A4
    2FA3: 40       NOP   
    2FA4: 50 2E    MOV   A,0x2E
    2FA6: 3F 4E    MVI   [__r1],A
    2FA8: 77 03    INC   [X+3]
    2FAA: 0F 02 00 ADC   [X+2],0x0
    2FAD: 56 01 00 MOV   [X+1],0x0
    2FB0: 56 00 00 MOV   [X+0],0x0
    2FB3: 80 6E    JMP   0x3022
    2FB5: 62 D0 00 MOV   REG[0xD0],0x0
    2FB8: 52 13    MOV   A,[X+19]
    2FBA: 13 06    SUB   A,[X+6]
    2FBC: 53 4E    MOV   [__r1],A
    2FBE: 52 12    MOV   A,[X+18]
    2FC0: 1B 05    SBB   A,[X+5]
    2FC2: 53 4F    MOV   [__r0],A
    2FC4: 52 01    MOV   A,[X+1]
    2FC6: 12 4E    SUB   A,[__r1]
    2FC8: 51 4F    MOV   A,[__r0]
    2FCA: 31 80    XOR   A,0x80
    2FCC: 53 43    MOV   [__rX],A
    2FCE: 52 00    MOV   A,[X+0]
    2FD0: 31 80    XOR   A,0x80
    2FD2: 1A 43    SBB   A,[__rX]
    2FD4: D0 26    JNC   0x2FFB
    2FD6: 52 01    MOV   A,[X+1]
    2FD8: 03 0A    ADD   A,[X+10]
    2FDA: 53 4E    MOV   [__r1],A
    2FDC: 52 00    MOV   A,[X+0]
    2FDE: 0B 09    ADC   A,[X+9]
    2FE0: 53 4F    MOV   [__r0],A
    2FE2: 52 06    MOV   A,[X+6]
    2FE4: 02 4E    ADD   A,[__r1]
    2FE6: 53 4E    MOV   [__r1],A
    2FE8: 52 05    MOV   A,[X+5]
    2FEA: 0A 4F    ADC   A,[__r0]
    2FEC: 53 4F    MOV   [__r0],A
    2FEE: 06 4E 01 ADD   [__r1],0x1
    2FF1: 0E 4F 00 ADC   [__r0],0x0
    2FF4: 51 4F    MOV   A,[__r0]
    2FF6: 92 4F    CALL  0x3247
    2FF8: 40       NOP   
    2FF9: 80 1E    JMP   0x3018
    2FFB: 62 D0 00 MOV   REG[0xD0],0x0
    2FFE: 52 F4    MOV   A,[X-12]
    3000: 21 01    AND   A,0x1
    3002: 53 4E    MOV   [__r1],A
    3004: 52 F3    MOV   A,[X-13]
    3006: 21 00    AND   A,0x0
    3008: 39 00    CMP   A,0x0
    300A: B0 06    JNZ   0x3011
    300C: 3C 4E 00 CMP   [__r1],0x0
    300F: A0 31    JZ    0x3041
    3011: 91 56    CALL  0x3169
    3013: 40       NOP   
    3014: 50 30    MOV   A,0x30
    3016: 3F 4E    MVI   [__r1],A
    3018: 77 03    INC   [X+3]
    301A: 0F 02 00 ADC   [X+2],0x0
    301D: 77 01    INC   [X+1]
    301F: 0F 00 00 ADC   [X+0],0x0
    3022: 91 E6    CALL  0x320A
    3024: 40       NOP   
    3025: D0 0D    JNC   0x3033
    3027: 52 03    MOV   A,[X+3]
    3029: 11 14    SUB   A,0x14
    302B: 52 02    MOV   A,[X+2]
    302D: 31 80    XOR   A,0x80
    302F: 19 80    SBB   A,0x80
    3031: CF 83    JC    0x2FB5
    3033: 80 0D    JMP   0x3041
    3035: 91 32    CALL  0x3169
    3037: 40       NOP   
    3038: 52 19    MOV   A,[X+25]
    303A: 3F 4E    MVI   [__r1],A
    303C: 77 03    INC   [X+3]
    303E: 0F 02 00 ADC   [X+2],0x0
    3041: 52 03    MOV   A,[X+3]
    3043: 91 B9    CALL  0x31FE
    3045: 40       NOP   
    3046: 52 02    MOV   A,[X+2]
    3048: 31 80    XOR   A,0x80
    304A: 1A 43    SBB   A,[__rX]
    304C: CF E8    JC    0x3035
    304E: 91 54    CALL  0x31A4
    3050: 40       NOP   
    3051: 50 00    MOV   A,0x0
    3053: 3F 4E    MVI   [__r1],A
    3055: 91 9B    CALL  0x31F2
    3057: 40       NOP   
    3058: 38 CF    ADD   SP,0xCF
    305A: 20       POP   X
    305B: 7F       RET   
__csdepi:
    305C: 10       PUSH  X
    305D: 4F       MOV   X,SP
    305E: 92 AC    CALL  0x330C
    3060: 40       NOP   
    3061: 01 01    ADD   A,0x1
    3063: 53 51    MOV   [0x51],A
    3065: 51 4F    MOV   A,[__r0]
    3067: 09 00    ADC   A,0x0
    3069: 53 50    MOV   [0x50],A
    306B: 51 4F    MOV   A,[__r0]
    306D: 60 D5    MOV   REG[0xD5],A
    306F: 52 FC    MOV   A,[X-4]
    3071: 3F 4E    MVI   [__r1],A
    3073: 20       POP   X
    3074: 7F       RET   
_csprintf:
    3075: 10       PUSH  X
    3076: 4F       MOV   X,SP
    3077: 38 02    ADD   SP,0x2
    3079: 62 D0 00 MOV   REG[0xD0],0x0
    307C: 52 FC    MOV   A,[X-4]
    307E: 53 51    MOV   [0x51],A
    3080: 52 FB    MOV   A,[X-5]
    3082: 53 50    MOV   [0x50],A
    3084: 5A 4E    MOV   [__r1],X
    3086: 16 4E 07 SUB   [__r1],0x7
    3089: 51 4E    MOV   A,[__r1]
    308B: 54 01    MOV   [X+1],A
    308D: 56 00 07 MOV   [X+0],0x7
    3090: 52 00    MOV   A,[X+0]
    3092: 08       PUSH  A
    3093: 52 01    MOV   A,[X+1]
    3095: 08       PUSH  A
    3096: 52 F9    MOV   A,[X-7]
    3098: 08       PUSH  A
    3099: 52 FA    MOV   A,[X-6]
    309B: 08       PUSH  A
    309C: 50 03    MOV   A,0x3
    309E: 08       PUSH  A
    309F: 50 C0    MOV   A,0xC0
    30A1: 08       PUSH  A
    30A2: 7C 0B 15 LCALL __cprint
    30A5: 38 FA    ADD   SP,0xFA
    30A7: 92 63    CALL  0x330C
    30A9: 40       NOP   
    30AA: 51 4F    MOV   A,[__r0]
    30AC: 60 D5    MOV   REG[0xD5],A
    30AE: 50 00    MOV   A,0x0
    30B0: 3F 4E    MVI   [__r1],A
    30B2: 51 51    MOV   A,[0x51]
    30B4: 13 FC    SUB   A,[X-4]
    30B6: 53 4E    MOV   [__r1],A
    30B8: 51 50    MOV   A,[0x50]
    30BA: 1B FB    SBB   A,[X-5]
    30BC: 53 4F    MOV   [__r0],A
    30BE: 38 FE    ADD   SP,0xFE
    30C0: 20       POP   X
    30C1: 7F       RET   
    30C2: 30       HALT  
<created procedures>:
    30C3: 62 D0 00 MOV   REG[0xD0],0x0
    30C6: 52 01    MOV   A,[X+1]
    30C8: 53 4E    MOV   [__r1],A
    30CA: 52 00    MOV   A,[X+0]
    30CC: 53 4F    MOV   [__r0],A
    30CE: 51 4E    MOV   A,[__r1]
    30D0: 01 01    ADD   A,0x1
    30D2: 54 01    MOV   [X+1],A
    30D4: 51 4F    MOV   A,[__r0]
    30D6: 09 00    ADC   A,0x0
    30D8: 54 00    MOV   [X+0],A
    30DA: 7F       RET   
    30DB: 52 01    MOV   A,[X+1]
    30DD: 53 4E    MOV   [__r1],A
    30DF: 52 00    MOV   A,[X+0]
    30E1: 53 4F    MOV   [__r0],A
    30E3: 51 4E    MOV   A,[__r1]
    30E5: 01 01    ADD   A,0x1
    30E7: 54 01    MOV   [X+1],A
    30E9: 51 4F    MOV   A,[__r0]
    30EB: 09 00    ADC   A,0x0
    30ED: 54 00    MOV   [X+0],A
    30EF: 7F       RET   
    30F0: 62 D0 00 MOV   REG[0xD0],0x0
    30F3: 52 01    MOV   A,[X+1]
    30F5: 53 4E    MOV   [__r1],A
    30F7: 52 00    MOV   A,[X+0]
    30F9: 53 4F    MOV   [__r0],A
    30FB: 7F       RET   
    30FC: 62 D0 00 MOV   REG[0xD0],0x0
    30FF: 52 FA    MOV   A,[X-6]
    3101: 53 4E    MOV   [__r1],A
    3103: 52 F9    MOV   A,[X-7]
    3105: 10       PUSH  X
    3106: 58 4E    MOV   X,[__r1]
    3108: 28       ROMX  
    3109: 20       POP   X
    310A: 7F       RET   
    310B: 52 FA    MOV   A,[X-6]
    310D: 53 4E    MOV   [__r1],A
    310F: 52 F9    MOV   A,[X-7]
    3111: 10       PUSH  X
    3112: 58 4E    MOV   X,[__r1]
    3114: 28       ROMX  
    3115: 20       POP   X
    3116: 7F       RET   
    3117: 52 01    MOV   A,[X+1]
    3119: 53 4E    MOV   [__r1],A
    311B: 52 00    MOV   A,[X+0]
    311D: 53 4F    MOV   [__r0],A
    311F: 51 4E    MOV   A,[__r1]
    3121: 01 FF    ADD   A,0xFF
    3123: 54 01    MOV   [X+1],A
    3125: 51 4F    MOV   A,[__r0]
    3127: 09 FF    ADC   A,0xFF
    3129: 54 00    MOV   [X+0],A
    312B: 51 4F    MOV   A,[__r0]
    312D: 60 D5    MOV   REG[0xD5],A
    312F: 7F       RET   
    3130: 53 4D    MOV   [__r2],A
    3132: 51 4F    MOV   A,[__r0]
    3134: 60 D5    MOV   REG[0xD5],A
    3136: 51 4D    MOV   A,[__r2]
    3138: 3F 4E    MVI   [__r1],A
    313A: 7F       RET   
    313B: 0F F7 FF ADC   [X-9],0xFF
    313E: 62 D0 00 MOV   REG[0xD0],0x0
    3141: 52 F8    MOV   A,[X-8]
    3143: 53 4E    MOV   [__r1],A
    3145: 52 F7    MOV   A,[X-9]
    3147: 60 D4    MOV   REG[0xD4],A
    3149: 3E 4E    MVI   A,[__r1]
    314B: 7F       RET   
    314C: 51 4E    MOV   A,[__r1]
    314E: 01 FF    ADD   A,0xFF
    3150: 54 01    MOV   [X+1],A
    3152: 51 4F    MOV   A,[__r0]
    3154: 09 FF    ADC   A,0xFF
    3156: 54 00    MOV   [X+0],A
    3158: 51 4F    MOV   A,[__r0]
    315A: 60 D5    MOV   REG[0xD5],A
    315C: 7F       RET   
    315D: 31 80    XOR   A,0x80
    315F: 62 D0 00 MOV   REG[0xD0],0x0
    3162: 53 43    MOV   [__rX],A
    3164: 50 80    MOV   A,0x80
    3166: 1A 43    SBB   A,[__rX]
    3168: 7F       RET   
    3169: 62 D0 00 MOV   REG[0xD0],0x0
    316C: 52 03    MOV   A,[X+3]
    316E: 03 FC    ADD   A,[X-4]
    3170: 53 4E    MOV   [__r1],A
    3172: 52 02    MOV   A,[X+2]
    3174: 0B FB    ADC   A,[X-5]
    3176: 60 D5    MOV   REG[0xD5],A
    3178: 7F       RET   
    3179: 52 FC    MOV   A,[X-4]
    317B: 04 4E    ADD   [__r1],A
    317D: 52 FB    MOV   A,[X-5]
    317F: 0C 4F    ADC   [__r0],A
    3181: 51 4F    MOV   A,[__r0]
    3183: 7F       RET   
    3184: 52 10    MOV   A,[X+16]
    3186: 53 4E    MOV   [__r1],A
    3188: 52 0F    MOV   A,[X+15]
    318A: 53 4F    MOV   [__r0],A
    318C: 51 4E    MOV   A,[__r1]
    318E: 01 01    ADD   A,0x1
    3190: 54 10    MOV   [X+16],A
    3192: 51 4F    MOV   A,[__r0]
    3194: 09 00    ADC   A,0x0
    3196: 54 0F    MOV   [X+15],A
    3198: 7F       RET   
    3199: 52 F8    MOV   A,[X-8]
    319B: 53 4E    MOV   [__r1],A
    319D: 52 F7    MOV   A,[X-9]
    319F: 60 D4    MOV   REG[0xD4],A
    31A1: 3E 4E    MVI   A,[__r1]
    31A3: 7F       RET   
    31A4: 52 03    MOV   A,[X+3]
    31A6: 03 FC    ADD   A,[X-4]
    31A8: 53 4E    MOV   [__r1],A
    31AA: 52 02    MOV   A,[X+2]
    31AC: 0B FB    ADC   A,[X-5]
    31AE: 60 D5    MOV   REG[0xD5],A
    31B0: 7F       RET   
    31B1: 52 08    MOV   A,[X+8]
    31B3: 03 FC    ADD   A,[X-4]
    31B5: 53 4E    MOV   [__r1],A
    31B7: 52 07    MOV   A,[X+7]
    31B9: 0B FB    ADC   A,[X-5]
    31BB: 7F       RET   
    31BC: 62 D0 00 MOV   REG[0xD0],0x0
    31BF: 52 FC    MOV   A,[X-4]
    31C1: 53 4E    MOV   [__r1],A
    31C3: 52 FB    MOV   A,[X-5]
    31C5: 60 D5    MOV   REG[0xD5],A
    31C7: 50 30    MOV   A,0x30
    31C9: 3F 4E    MVI   [__r1],A
    31CB: 52 FC    MOV   A,[X-4]
    31CD: 01 01    ADD   A,0x1
    31CF: 53 4E    MOV   [__r1],A
    31D1: 52 FB    MOV   A,[X-5]
    31D3: 09 00    ADC   A,0x0
    31D5: 60 D5    MOV   REG[0xD5],A
    31D7: 50 00    MOV   A,0x0
    31D9: 3F 4E    MVI   [__r1],A
    31DB: 52 FC    MOV   A,[X-4]
    31DD: 53 4E    MOV   [__r1],A
    31DF: 52 FB    MOV   A,[X-5]
    31E1: 53 4F    MOV   [__r0],A
    31E3: 7F       RET   
    31E4: 62 D0 00 MOV   REG[0xD0],0x0
    31E7: 52 07    MOV   A,[X+7]
    31E9: 53 4E    MOV   [__r1],A
    31EB: 52 06    MOV   A,[X+6]
    31ED: 60 D4    MOV   REG[0xD4],A
    31EF: 3E 4E    MVI   A,[__r1]
    31F1: 7F       RET   
    31F2: 62 D0 00 MOV   REG[0xD0],0x0
    31F5: 52 FC    MOV   A,[X-4]
    31F7: 53 4E    MOV   [__r1],A
    31F9: 52 FB    MOV   A,[X-5]
    31FB: 53 4F    MOV   [__r0],A
    31FD: 7F       RET   
    31FE: 13 F2    SUB   A,[X-14]
    3200: 52 F1    MOV   A,[X-15]
    3202: 31 80    XOR   A,0x80
    3204: 62 D0 00 MOV   REG[0xD0],0x0
    3207: 53 43    MOV   [__rX],A
    3209: 7F       RET   
    320A: 52 01    MOV   A,[X+1]
    320C: 13 F0    SUB   A,[X-16]
    320E: 52 EF    MOV   A,[X-17]
    3210: 31 80    XOR   A,0x80
    3212: 62 D0 00 MOV   REG[0xD0],0x0
    3215: 53 43    MOV   [__rX],A
    3217: 52 00    MOV   A,[X+0]
    3219: 31 80    XOR   A,0x80
    321B: 1A 43    SBB   A,[__rX]
    321D: 7F       RET   
    321E: 62 D0 00 MOV   REG[0xD0],0x0
    3221: 52 FC    MOV   A,[X-4]
    3223: 53 4E    MOV   [__r1],A
    3225: 52 FB    MOV   A,[X-5]
    3227: 10       PUSH  X
    3228: 58 4E    MOV   X,[__r1]
    322A: 28       ROMX  
    322B: 20       POP   X
    322C: 7F       RET   
    322D: 62 D0 00 MOV   REG[0xD0],0x0
    3230: 52 FC    MOV   A,[X-4]
    3232: 53 4E    MOV   [__r1],A
    3234: 52 FB    MOV   A,[X-5]
    3236: 60 D5    MOV   REG[0xD5],A
    3238: 7F       RET   
    3239: 31 80    XOR   A,0x80
    323B: 62 D0 00 MOV   REG[0xD0],0x0
    323E: 53 43    MOV   [__rX],A
    3240: 52 02    MOV   A,[X+2]
    3242: 31 80    XOR   A,0x80
    3244: 1A 43    SBB   A,[__rX]
    3246: 7F       RET   
    3247: 60 D4    MOV   REG[0xD4],A
    3249: 3E 4E    MVI   A,[__r1]
    324B: 53 4F    MOV   [__r0],A
    324D: 52 03    MOV   A,[X+3]
    324F: 03 FC    ADD   A,[X-4]
    3251: 53 4C    MOV   [__r3],A
    3253: 52 02    MOV   A,[X+2]
    3255: 0B FB    ADC   A,[X-5]
    3257: 60 D5    MOV   REG[0xD5],A
    3259: 51 4F    MOV   A,[__r0]
    325B: 3F 4C    MVI   [__r3],A
    325D: 7F       RET   
    325E: 62 D0 00 MOV   REG[0xD0],0x0
    3261: 65 48    ASL   [__r7]
    3263: 6B 49    RLC   [__r6]
    3265: 6B 4A    RLC   [__r5]
    3267: 6B 4B    RLC   [__r4]
    3269: 78       DEC   A
    326A: BF F3    JNZ   0x325E
    326C: 7F       RET   
    326D: 62 D0 00 MOV   REG[0xD0],0x0
    3270: 68 4F    ASR   [__r0]
    3272: 6E 4E    RRC   [__r1]
    3274: 6E 4D    RRC   [__r2]
    3276: 6E 4C    RRC   [__r3]
    3278: 78       DEC   A
    3279: BF F3    JNZ   0x326D
    327B: 7F       RET   
    327C: 53 4F    MOV   [__r0],A
    327E: 51 4E    MOV   A,[__r1]
    3280: 01 01    ADD   A,0x1
    3282: 54 03    MOV   [X+3],A
    3284: 51 4F    MOV   A,[__r0]
    3286: 09 00    ADC   A,0x0
    3288: 54 02    MOV   [X+2],A
    328A: 7F       RET   
    328B: 62 D0 00 MOV   REG[0xD0],0x0
    328E: 68 4B    ASR   [__r4]
    3290: 6E 4A    RRC   [__r5]
    3292: 6E 49    RRC   [__r6]
    3294: 6E 48    RRC   [__r7]
    3296: 78       DEC   A
    3297: BF F3    JNZ   0x328B
    3299: 7F       RET   
    329A: 52 06    MOV   A,[X+6]
    329C: 11 00    SUB   A,0x0
    329E: 52 05    MOV   A,[X+5]
    32A0: 31 80    XOR   A,0x80
    32A2: 19 80    SBB   A,0x80
    32A4: 7F       RET   
    32A5: 52 07    MOV   A,[X+7]
    32A7: 53 4E    MOV   [__r1],A
    32A9: 52 06    MOV   A,[X+6]
    32AB: 53 4F    MOV   [__r0],A
    32AD: 51 4E    MOV   A,[__r1]
    32AF: 01 01    ADD   A,0x1
    32B1: 54 07    MOV   [X+7],A
    32B3: 51 4F    MOV   A,[__r0]
    32B5: 09 00    ADC   A,0x0
    32B7: 54 06    MOV   [X+6],A
    32B9: 7F       RET   
    32BA: 10       PUSH  X
    32BB: 58 4E    MOV   X,[__r1]
    32BD: 28       ROMX  
    32BE: 20       POP   X
    32BF: 53 4E    MOV   [__r1],A
    32C1: 55 4F 00 MOV   [__r0],0x0
    32C4: 7F       RET   
    32C5: 62 D0 00 MOV   REG[0xD0],0x0
    32C8: 52 01    MOV   A,[X+1]
    32CA: 03 0A    ADD   A,[X+10]
    32CC: 53 4E    MOV   [__r1],A
    32CE: 52 00    MOV   A,[X+0]
    32D0: 0B 09    ADC   A,[X+9]
    32D2: 7F       RET   
    32D3: 62 D0 00 MOV   REG[0xD0],0x0
    32D6: 51 4B    MOV   A,[__r4]
    32D8: 54 0C    MOV   [X+12],A
    32DA: 51 4A    MOV   A,[__r5]
    32DC: 54 0D    MOV   [X+13],A
    32DE: 51 49    MOV   A,[__r6]
    32E0: 54 0E    MOV   [X+14],A
    32E2: 51 48    MOV   A,[__r7]
    32E4: 54 0F    MOV   [X+15],A
    32E6: 7F       RET   
    32E7: 12 4E    SUB   A,[__r1]
    32E9: 51 4F    MOV   A,[__r0]
    32EB: 31 80    XOR   A,0x80
    32ED: 53 43    MOV   [__rX],A
    32EF: 50 80    MOV   A,0x80
    32F1: 1A 43    SBB   A,[__rX]
    32F3: 7F       RET   
    32F4: 62 D0 00 MOV   REG[0xD0],0x0
    32F7: 51 4E    MOV   A,[__r1]
    32F9: 54 0B    MOV   [X+11],A
    32FB: 51 4F    MOV   A,[__r0]
    32FD: 54 0A    MOV   [X+10],A
    32FF: 7F       RET   
    3300: 62 D0 00 MOV   REG[0xD0],0x0
    3303: 51 4E    MOV   A,[__r1]
    3305: 54 0A    MOV   [X+10],A
    3307: 51 4F    MOV   A,[__r0]
    3309: 54 09    MOV   [X+9],A
    330B: 7F       RET   
    330C: 62 D0 00 MOV   REG[0xD0],0x0
    330F: 51 51    MOV   A,[0x51]
    3311: 08       PUSH  A
    3312: 51 50    MOV   A,[0x50]
    3314: 62 D0 00 MOV   REG[0xD0],0x0
    3317: 53 4F    MOV   [__r0],A
    3319: 18       POP   A
    331A: 53 4E    MOV   [__r1],A
    331C: 7F       RET   
    331D: 52 01    MOV   A,[X+1]
    331F: 03 FC    ADD   A,[X-4]
    3321: 53 4E    MOV   [__r1],A
    3323: 52 00    MOV   A,[X+0]
    3325: 0B FB    ADC   A,[X-5]
    3327: 7F       RET   
    3328: 52 0C    MOV   A,[X+12]
    332A: 11 00    SUB   A,0x0
    332C: 52 0B    MOV   A,[X+11]
    332E: 31 80    XOR   A,0x80
    3330: 19 80    SBB   A,0x80
    3332: 7F       RET   
    3333: 62 D0 00 MOV   REG[0xD0],0x0
    3336: 52 0D    MOV   A,[X+13]
    3338: 53 4E    MOV   [__r1],A
    333A: 52 0C    MOV   A,[X+12]
    333C: 10       PUSH  X
    333D: 58 4E    MOV   X,[__r1]
    333F: 28       ROMX  
    3340: 20       POP   X
    3341: 7F       RET   
    3342: 52 03    MOV   A,[X+3]
    3344: 03 0A    ADD   A,[X+10]
    3346: 53 4E    MOV   [__r1],A
    3348: 52 02    MOV   A,[X+2]
    334A: 0B 09    ADC   A,[X+9]
    334C: 60 D4    MOV   REG[0xD4],A
    334E: 3E 4E    MVI   A,[__r1]
    3350: 7F       RET   
    3351: 52 F2    MOV   A,[X-14]
    3353: 13 18    SUB   A,[X+24]
    3355: 53 4E    MOV   [__r1],A
    3357: 52 F1    MOV   A,[X-15]
    3359: 1B 17    SBB   A,[X+23]
    335B: 53 4F    MOV   [__r0],A
    335D: 7F       RET   
    335E: 6C FB    RLC   [X-5]
    3360: 6C FA    RLC   [X-6]
    3362: 6C F9    RLC   [X-7]
    3364: 6B 41    RLC   [__rZ]
    3366: 6B 42    RLC   [__rY]
    3368: 6B 43    RLC   [__rX]
    336A: 7F       RET   
    336B: 50 00    MOV   A,0x0
    336D: 53 4F    MOV   [__r0],A
    336F: 53 43    MOV   [__rX],A
    3371: 53 42    MOV   [__rY],A
    3373: 53 41    MOV   [__rZ],A
    3375: 7F       RET   
