FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 8C LJMP  _Timer8_1_ISR      (0149)     ljmp	_Timer8_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 03 9C LJMP  _bTimer8_1_ReadCounter|_SleepTimer_1_ISR|_Timer8_1_WriteCompareValue|bTimer8_1_ReadCompareValue|_bTimer8_1_ReadCompareValue|_Timer8_1_bReadCompareValue|_bTimer8_1_CaptureCounter|_bTimer8_1_ReadTimerSaveCV|_Timer8_1_bReadTimerSaveCV|_bTimer8_1_ReadTimer|...(0217)     ljmp	_SleepTimer_1_ISR
0067: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [timer+164],0x0    (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [timer+165],0x0    (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 0A MOV   REG[0xE0],0xA      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 27 LCALL 0x0327             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 20    MOV   X,0x20             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 53    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 53    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 53    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 52    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 53    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 53 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 52    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 52    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 53    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 53 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 52    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 0B MOV   REG[0xE0],0xB      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 03 D4 LCALL _SleepTimer_1_SyncWait|_SleepTimer_1_SetTimer|_SleepTimer_1_bGetTimer|__UserModules_end|_SleepTimer_1_bGetTickCntr|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0222: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_matrix_led_v1_Bank1
                                        (0019) export LoadConfigTBL_matrix_led_v1_Bank0
                                        (0020) export LoadConfigTBL_matrix_led_v1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_matrix_led_v1_Bank0:
                                        (0023) ;  Instance name SHADOWREGS_1, User Module SHADOWREGS
                                        (0024) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0025) ;  Instance name Timer8_1, User Module Timer8
                                        (0026) ;       Instance name Timer8_1, Block Name TIMER8(DBB00)
                                        (0027) 	db		23h, 04h		;Timer8_1_CONTROL_REG(DBB00CR0)
                                        (0028) 	db		21h, 1fh		;Timer8_1_PERIOD_REG(DBB00DR1)
                                        (0029) 	db		22h, 00h		;Timer8_1_COMPARE_REG(DBB00DR2)
                                        (0030) ;  Global Register values Bank 0
                                        (0031) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0032) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0033) 	db		63h, 00h		; AnalogReferenceControl register (ARF_CR)
                                        (0034) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0035) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0036) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0037) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0038) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0039) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0040) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0041) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0042) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0043) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0044) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0045) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0046) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0047) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0048) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0049) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0050) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0051) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0052) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0053) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0054) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0055) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0056) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0057) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0058) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0059) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0060) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0061) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0062) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0063) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0064) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0065) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0066) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0067) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0068) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0069) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0070) 	db		ffh
                                        (0071) LoadConfigTBL_matrix_led_v1_Bank1:
                                        (0072) ;  Instance name SHADOWREGS_1, User Module SHADOWREGS
                                        (0073) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0074) ;  Instance name Timer8_1, User Module Timer8
                                        (0075) ;       Instance name Timer8_1, Block Name TIMER8(DBB00)
                                        (0076) 	db		20h, 30h		;Timer8_1_FUNC_REG(DBB00FN)
                                        (0077) 	db		21h, 07h		;Timer8_1_INPUT_REG(DBB00IN)
                                        (0078) 	db		22h, 40h		;Timer8_1_OUTPUT_REG(DBB00OU)
                                        (0079) ;  Global Register values Bank 1
                                        (0080) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0081) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0082) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0083) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0084) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0085) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0086) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0087) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0088) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0089) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0090) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0091) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0092) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0093) 	db		e2h, 01h		; OscillatorControl_2 register (OSC_CR2)
                                        (0094) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0095) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0096) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0097) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0098) 	db		ffh
                                        (0099) AREA psoc_config(rom, rel)
                                        (0100) LoadConfigTBL_matrix_led_v1_Ordered:
                                        (0101) ;  Ordered Global Register values
                                        (0102) 	M8C_SetBank0
0224: 62 00 00 MOV   REG[0x0],0x0       (0103) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0227: 71 10    OR    F,0x10             
                                        (0104) 	M8C_SetBank1
0229: 62 00 3F MOV   REG[0x0],0x3F      (0105) 	mov	reg[00h], 3fh		; Port_0_DriveMode_0 register (PRT0DM0)
022C: 62 01 C0 MOV   REG[0x1],0xC0      (0106) 	mov	reg[01h], c0h		; Port_0_DriveMode_1 register (PRT0DM1)
022F: 70 EF    AND   F,0xEF             
                                        (0107) 	M8C_SetBank0
0231: 62 03 C0 MOV   REG[0x3],0xC0      (0108) 	mov	reg[03h], c0h		; Port_0_DriveMode_2 register (PRT0DM2)
0234: 62 02 00 MOV   REG[0x2],0x0       (0109) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0237: 71 10    OR    F,0x10             
                                        (0110) 	M8C_SetBank1
0239: 62 02 00 MOV   REG[0x2],0x0       (0111) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
023C: 62 03 00 MOV   REG[0x3],0x0       (0112) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
023F: 70 EF    AND   F,0xEF             
                                        (0113) 	M8C_SetBank0
0241: 62 01 00 MOV   REG[0x1],0x0       (0114) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0244: 62 04 00 MOV   REG[0x4],0x0       (0115) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0247: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
0249: 62 04 00 MOV   REG[0x4],0x0       (0117) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
024C: 62 05 FF MOV   REG[0x5],0xFF      (0118) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
024F: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
0251: 62 07 FF MOV   REG[0x7],0xFF      (0120) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0254: 62 06 00 MOV   REG[0x6],0x0       (0121) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0257: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
0259: 62 06 00 MOV   REG[0x6],0x0       (0123) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
025C: 62 07 00 MOV   REG[0x7],0x0       (0124) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
025F: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
0261: 62 05 00 MOV   REG[0x5],0x0       (0126) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0264: 62 08 00 MOV   REG[0x8],0x0       (0127) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0267: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
0269: 62 08 00 MOV   REG[0x8],0x0       (0129) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
026C: 62 09 FF MOV   REG[0x9],0xFF      (0130) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
026F: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
0271: 62 0B FF MOV   REG[0xB],0xFF      (0132) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0274: 62 0A 00 MOV   REG[0xA],0x0       (0133) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0277: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
0279: 62 0A 00 MOV   REG[0xA],0x0       (0135) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
027C: 62 0B 00 MOV   REG[0xB],0x0       (0136) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
027F: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
0281: 62 09 00 MOV   REG[0x9],0x0       (0138) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0284: 62 0C 00 MOV   REG[0xC],0x0       (0139) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0287: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0289: 62 0C 00 MOV   REG[0xC],0x0       (0141) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
028C: 62 0D 00 MOV   REG[0xD],0x0       (0142) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
028F: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
0291: 62 0F 00 MOV   REG[0xF],0x0       (0144) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0294: 62 0E 00 MOV   REG[0xE],0x0       (0145) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0297: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0299: 62 0E 00 MOV   REG[0xE],0x0       (0147) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
029C: 62 0F 00 MOV   REG[0xF],0x0       (0148) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
029F: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
02A1: 62 0D 00 MOV   REG[0xD],0x0       (0150) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02A4: 62 10 00 MOV   REG[0x10],0x0      (0151) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02A7: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
02A9: 62 10 00 MOV   REG[0x10],0x0      (0153) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02AC: 62 11 00 MOV   REG[0x11],0x0      (0154) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02AF: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
02B1: 62 13 00 MOV   REG[0x13],0x0      (0156) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02B4: 62 12 00 MOV   REG[0x12],0x0      (0157) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02B7: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
02B9: 62 12 00 MOV   REG[0x12],0x0      (0159) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02BC: 62 13 00 MOV   REG[0x13],0x0      (0160) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02BF: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
02C1: 62 11 00 MOV   REG[0x11],0x0      (0162) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02C4: 62 14 00 MOV   REG[0x14],0x0      (0163) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02C7: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
02C9: 62 14 00 MOV   REG[0x14],0x0      (0165) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02CC: 62 15 00 MOV   REG[0x15],0x0      (0166) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02CF: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
02D1: 62 17 00 MOV   REG[0x17],0x0      (0168) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02D4: 62 16 00 MOV   REG[0x16],0x0      (0169) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02D7: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
02D9: 62 16 00 MOV   REG[0x16],0x0      (0171) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02DC: 62 17 00 MOV   REG[0x17],0x0      (0172) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02DF: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
02E1: 62 15 00 MOV   REG[0x15],0x0      (0174) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02E4: 62 18 00 MOV   REG[0x18],0x0      (0175) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02E7: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
02E9: 62 18 00 MOV   REG[0x18],0x0      (0177) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02EC: 62 19 00 MOV   REG[0x19],0x0      (0178) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02EF: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02F1: 62 1B 00 MOV   REG[0x1B],0x0      (0180) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02F4: 62 1A 00 MOV   REG[0x1A],0x0      (0181) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
02F7: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02F9: 62 1A 00 MOV   REG[0x1A],0x0      (0183) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
02FC: 62 1B 00 MOV   REG[0x1B],0x0      (0184) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
02FF: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
0301: 62 19 00 MOV   REG[0x19],0x0      (0186) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0304: 62 1C 00 MOV   REG[0x1C],0x0      (0187) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0307: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0309: 62 1C 00 MOV   REG[0x1C],0x0      (0189) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
030C: 62 1D 00 MOV   REG[0x1D],0x0      (0190) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
030F: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
0311: 62 1F 00 MOV   REG[0x1F],0x0      (0192) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0314: 62 1E 00 MOV   REG[0x1E],0x0      (0193) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0317: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0319: 62 1E 00 MOV   REG[0x1E],0x0      (0195) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
031C: 62 1F 00 MOV   REG[0x1F],0x0      (0196) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
031F: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
0321: 62 1D 00 MOV   REG[0x1D],0x0      (0198) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0324: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
0326: 7F       RET                      (0200) 	ret
                                        (0201) 
                                        (0202) 
                                        (0203) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_matrix_led_v1
                                        (0026) export _LoadConfig_matrix_led_v1
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
0327: 55 04 00 MOV   [i+4],0x0          (0061) 	mov		[Port_0_Data_SHADE], 0h
                                        (0062) 
032A: 7C 03 31 LCALL 0x0331             (0063) 	lcall	LoadConfig_matrix_led_v1
032D: 7C 02 22 LCALL 0x0222             (0064) 	lcall	LoadConfigTBL_matrix_led_v1_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
0330: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration matrix_led_v1
                                        (0072) ;
                                        (0073) ;    Load configuration registers for matrix_led_v1.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_matrix_led_v1:
                                        (0090)  LoadConfig_matrix_led_v1:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
0331: 10       PUSH  X                  (0093) 	push	x
0332: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
0334: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
0336: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
0337: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_matrix_led_v1_Bank0
0339: 57 A0    MOV   X,0xA0             (0099)     mov     X, <LoadConfigTBL_matrix_led_v1_Bank0
033B: 7C 03 4C LCALL 0x034C             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
033E: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
0340: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
0341: 50 01    MOV   A,0x1              (0105)     mov     A, >LoadConfigTBL_matrix_led_v1_Bank1
0343: 57 F5    MOV   X,0xF5             (0106)     mov     X, <LoadConfigTBL_matrix_led_v1_Bank1
0345: 7C 03 4C LCALL 0x034C             (0107)     lcall   LoadConfig              ; Load the bank 1 values
0348: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
034A: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
034B: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
034C: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
034E: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
034F: 08       PUSH  A                  (0137)     push    A
0350: 4F       MOV   X,SP               (0138)     mov     X, SP
0351: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0354: D0 04    JNC   0x0359             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0356: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0359: 18       POP   A                  (0143)     pop     A
035A: 20       POP   X                  (0144)     pop     X
035B: 70 EF    AND   F,0xEF             
035D: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0360: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
0361: 08       PUSH  A                  (0150)     push    A
0362: 28       ROMX                     (0151)     romx                            ; Load register address from table
0363: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0365: A0 1F    JZ    0x0385             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
0367: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
0368: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
036B: A0 03    JZ    0x036F             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
036D: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
036F: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
0371: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
0372: 20       POP   X                  (0161)     pop     X
0373: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0374: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0376: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0377: 08       PUSH  A                  (0165)     push    A
0378: 28       ROMX                     (0166)     romx                            ; load config data from the table
0379: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
037A: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
037C: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
037E: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
037F: 20       POP   X                  (0171)     pop     X
0380: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
0381: 09 00    ADC   A,0x0              (0173)     adc     A, 0
0383: 8F D7    JMP   0x035B             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0385: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
0387: 70 3F    AND   F,0x3F             
0389: 71 C0    OR    F,0xC0             
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
038B: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_0_Data_SHADE:
                                        (0186) Port_0_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\timer8_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_1INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer8_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
038C: 7D 07 DA LJMP  __Timer8_1_ISR     (0075)    ljmp __Timer8_1_ISR
                                        (0076)    
                                        (0077)    ;---------------------------------------------------
                                        (0078)    ; Insert a lcall to a C function below this banner
                                        (0079)    ; and un-comment the lines between these banners
                                        (0080)    ;---------------------------------------------------
                                        (0081)    
                                        (0082)    ;PRESERVE_CPU_CONTEXT
                                        (0083)    ;lcall _My_C_Function
                                        (0084)    ;RESTORE_CPU_CONTEXT
                                        (0085)    
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ; Insert a lcall to a C function above this banner
                                        (0088)    ; and un-comment the lines between these banners
                                        (0089)    ;---------------------------------------------------
                                        (0090)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0091) 
038F: 7E       RETI                     (0092)    reti
                                        (0093) 
                                        (0094) 
                                        (0095) ; end of file Timer8_1INT.asm
FILE: lib\timer8_1.asm                  (0001) ;;*****************************************************************************
0390: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_1.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_1_EnableInt
                                        (0030) export _Timer8_1_EnableInt
                                        (0031) export  Timer8_1_DisableInt
                                        (0032) export _Timer8_1_DisableInt
                                        (0033) export  Timer8_1_Start
                                        (0034) export _Timer8_1_Start
                                        (0035) export  Timer8_1_Stop
                                        (0036) export _Timer8_1_Stop
                                        (0037) export  Timer8_1_WritePeriod
                                        (0038) export _Timer8_1_WritePeriod
                                        (0039) export  Timer8_1_WriteCompareValue
                                        (0040) export _Timer8_1_WriteCompareValue
                                        (0041) export  Timer8_1_bReadCompareValue
                                        (0042) export _Timer8_1_bReadCompareValue
                                        (0043) export  Timer8_1_bReadTimer
                                        (0044) export _Timer8_1_bReadTimer
                                        (0045) export  Timer8_1_bReadTimerSaveCV
                                        (0046) export _Timer8_1_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_1_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_1_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_1_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_1_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_1_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_1_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_1_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA matrix_led_v1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_1_EnableInt:
                                        (0098) _Timer8_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0393: 7F       RET                      (0102)    ret
0394: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_1_DisableInt:
                                        (0126) _Timer8_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0397: 7F       RET                      (0130)    ret
0398: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_1_Start:
                                        (0154) _Timer8_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
039B: 7F       RET                      (0158)    ret
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_1_Stop:
                                        (0182) _Timer8_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_1_WritePeriod:
                                        (0211) _Timer8_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0213)    mov   reg[Timer8_1_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_1_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_1_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_1_WriteCompareValue:
                                        (0241) _Timer8_1_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0243)    mov   reg[Timer8_1_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_1_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_1_bReadCompareValue:
                                        (0268) _Timer8_1_bReadCompareValue:
                                        (0269)  bTimer8_1_ReadCompareValue:                     ; this name deprecated
                                        (0270) _bTimer8_1_ReadCompareValue:                     ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0272)    mov   A, reg[Timer8_1_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_1_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_1_bReadTimerSaveCV:
                                        (0315) _Timer8_1_bReadTimerSaveCV:
                                        (0316)  bTimer8_1_ReadTimerSaveCV:                      ; this name deprecated
                                        (0317) _bTimer8_1_ReadTimerSaveCV:                      ; this name deprecated
                                        (0318)  bTimer8_1_ReadCounter:                          ; this name deprecated
                                        (0319) _bTimer8_1_ReadCounter:                          ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0325)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0326)    add   SP, 2                                   ; Reserve space for flags, count
                                        (0327)    mov   A, reg[Timer8_1_CONTROL_REG]            ; save the Control register
                                        (0328)    push  A
                                        (0329)    mov   A, reg[Timer8_1_COMPARE_REG]            ; save the Compare register
                                        (0330)    push  A
                                        (0331)    mov   A, reg[Timer8_1_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
                                        (0333)    mov   A, reg[Timer8_1_COMPARE_REG]            ; Now grab DR2 (DR0) and save
                                        (0334)    mov   [X+bCount], A
                                        (0335)    mov   A, 0                                    ; Guess the global interrupt state
                                        (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
                                        (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
                                        (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
                                        (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_1_Stop_M                               ; Stop the timer
                                        (0343)    pop   A                                       ; Restore the Compare register
                                        (0344)    mov   reg[Timer8_1_COMPARE_REG], A
                                        (0345)    pop   A                                       ; restore start state of the timer
                                        (0346)    mov   reg[Timer8_1_CONTROL_REG], A
                                        (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_1_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_1_bReadTimer:
                                        (0383) _Timer8_1_bReadTimer:
                                        (0384)  bTimer8_1_ReadTimer:                            ; this name deprecated
                                        (0385) _bTimer8_1_ReadTimer:                            ; this name deprecated
                                        (0386)  bTimer8_1_CaptureCounter:                       ; this name deprecated
                                        (0387) _bTimer8_1_CaptureCounter:                       ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0390)    mov   A, reg[Timer8_1_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
                                        (0392)    mov   A, reg[Timer8_1_COMPARE_REG]            ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8_1.asm
FILE: lib\sleeptimer_1int.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimer_1INT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2013/5/19 at 10:44:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer_1.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_1_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_1_fTick
                                        (0024) export _SleepTimer_1_fTick
                                        (0025) export  SleepTimer_1_bTimerValue
                                        (0026) export _SleepTimer_1_bTimerValue
                                        (0027) export  SleepTimer_1_bCountDown
                                        (0028) export _SleepTimer_1_bCountDown
                                        (0029) export  SleepTimer_1_TickCount
                                        (0030) export _SleepTimer_1_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_1_fTick:
                                        (0038) _SleepTimer_1_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_1_bTimerValue:
                                        (0041) _SleepTimer_1_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_1_bCountDown:
                                        (0044) _SleepTimer_1_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_1_TickCount:
                                        (0047) _SleepTimer_1_TickCount:    BLK  SleepTimer_1_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_1_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_1_ISR:
                                        (0090) 
039C: 2E 00 01 OR    [i],0x1            (0091)    or   [SleepTimer_1_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
039F: 47 02 FF TST   [i+2],0xFF         (0094)    tst  [SleepTimer_1_bCountDown],0xFF
03A2: A0 03    JZ    0x03A6             (0095)    jz   .DoTimer
03A4: 7A 02    DEC   [i+2]              (0096)    dec  [SleepTimer_1_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
03A6: 47 01 FF TST   [i+1],0xFF         (0099)    tst  [SleepTimer_1_bTimerValue],0xFF
03A9: A0 03    JZ    0x03AD             (0100)    jz   .IncBigCounter
03AB: 7A 01    DEC   [i+1]              (0101)    dec  [SleepTimer_1_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_1_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_1_TickCount+3]
                                        (0106)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_1_TickCount+2]
                                        (0109)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_1_TICK_CNTR_SIZE & (0x04|0x02))
                                        (0113)    inc  [SleepTimer_1_TickCount+1]
                                        (0114)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
03AD: 76 03    INC   [i+3]              (0117)    inc  [SleepTimer_1_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_1_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
03AF: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimer_1INT.asm
                                        (0150) 
FILE: lib\sleeptimer_1.asm              (0001) ;;*****************************************************************************
03B0: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer_1.asm
                                        (0004) ;;  Version: 1.0, Updated on 2013/5/19 at 10:44:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_1_EnableInt
                                        (0041) export _SleepTimer_1_EnableInt
                                        (0042) export  SleepTimer_1_DisableInt
                                        (0043) export _SleepTimer_1_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_1_Start
                                        (0046) export _SleepTimer_1_Start
                                        (0047) export  SleepTimer_1_Stop
                                        (0048) export _SleepTimer_1_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_1_TickWait
                                        (0051) export _SleepTimer_1_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_1_SyncWait
                                        (0054) export _SleepTimer_1_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_1_SetInterval
                                        (0057) export _SleepTimer_1_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_1_bGetTickCntr
                                        (0060) export _SleepTimer_1_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_1_SetTimer
                                        (0063) export _SleepTimer_1_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_1_bGetTimer
                                        (0066) export _SleepTimer_1_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_1_iGetTickCntr
                                        (0070) export _SleepTimer_1_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_1_lGetTickCntr
                                        (0075) export _SleepTimer_1_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_1_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_1_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_1_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_1_EnableInt:
                                        (0131) _SleepTimer_1_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
03B3: 7F       RET                      (0135)    ret
03B4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_1_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_1_DisableInt:
                                        (0160) _SleepTimer_1_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_1_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_1_Start:
                                        (0195) _SleepTimer_1_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
03B7: 50 00    MOV   A,0x0              (0198)    mov  A,0
03B9: 53 00    MOV   [i],A              (0199)    mov  [SleepTimer_1_fTick],A
03BB: 53 01    MOV   [i+1],A            (0200)    mov  [SleepTimer_1_bTimerValue],A
03BD: 53 02    MOV   [i+2],A            (0201)    mov  [SleepTimer_1_bCountDown],A
03BF: 53 03    MOV   [i+3],A            (0202)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0204)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0209)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
                                        (0210)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
03C1: 7F       RET                      (0215)    ret
03C2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_1_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_1_Stop:
                                        (0240) _SleepTimer_1_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_1_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_1_SetInterval:
                                        (0267) _SleepTimer_1_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0269)    and  A,SleepTimer_1_CLOCK_MASK               ; Mask off invalid data
                                        (0270)    mov  X, SP
                                        (0271)    push A
                                        (0272)    M8C_SetBank1
                                        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
                                        (0274)    and  A,~SleepTimer_1_CLOCK_MASK   ; Zero out old timer value
                                        (0275)    or   A, [X]                           ; Set new timer values
                                        (0276)    mov  reg[OSC_CR0],A                   ; Write it
                                        (0277)    M8C_SetBank0
                                        (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_1_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_1_TickWait:
                                        (0312) _SleepTimer_1_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
03C5: 55 00 00 MOV   [i],0x0            (0315)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
03C8: 47 00 FF TST   [i],0xFF           (0318)    tst   [SleepTimer_1_fTick],0xFF          ; Check for tick 
03CB: AF FC    JZ    0x03C8             (0319)    jz    .WaitTick
03CD: 55 00 00 MOV   [i],0x0            (0320)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
03D0: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
03D1: BF F6    JNZ   0x03C8             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
03D3: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_1_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_1_SyncWait:
                                        (0363) _SleepTimer_1_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_1_bCountDown
                                        (0366)    swap  A,X
                                        (0367)    AND   A,SleepTimer_1_FORCE_RELOAD
                                        (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
                                        (0371)    tst   [SleepTimer_1_bCountDown],0xFF
                                        (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
                                        (0376)    swap  A,X
                                        (0377)    mov   [SleepTimer_1_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_1_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_1_bGetTickCntr:
                                        (0413) _SleepTimer_1_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0416)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_1_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_1_SetTimer:
                                        (0449) _SleepTimer_1_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0452)    mov   [SleepTimer_1_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_1_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_1_bGetTimer:
                                        (0485) _SleepTimer_1_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0488)    mov   A,[SleepTimer_1_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_1_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_1_iGetTickCntr:
                                        (0524) _SleepTimer_1_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0529)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_1_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_1_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_1_lGetTickCntr:
                                        (0566) _SleepTimer_1_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_1_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_1_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_1_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_1_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer_1.asm
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\MATRIX~2\MATRIX~1\MATRIX~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "stdlib.h"
(0008) #include "Matrix_LED.h"
(0009) 
(0010) Raster mamesiba = {
(0011) 	0x00000000,
(0012) 	0x00fe0000,
(0013) 	0x0101e000,
(0014) 	0x02001c00,
(0015) 	0x04620300,
(0016) 	0x04b50080,
(0017) 	0x08f48040,
(0018) 	0x0c648040,
(0019) 	0x0c030040,
(0020) 	0x0a000040,
(0021) 	0x08000040,
(0022) 	0x04000080,
(0023) 	0x03000100,
(0024) 	0x00fe0600,
(0025) 	0x0001f800,
(0026) 	0x00000000};
(0027) 
(0028) void main(void)
(0029) {
_SleepTimer_1_SyncWait|_SleepTimer_1_SetTimer|_SleepTimer_1_bGetTimer|__UserModules_end|_SleepTimer_1_bGetTickCntr|__text_start|_main|_main:
  i                    --> X+0
    03D4: 10       PUSH  X
    03D5: 4F       MOV   X,SP
    03D6: 38 03    ADD   SP,0x3
(0030) 	BYTE i = 0;
    03D8: 56 00 00 MOV   [X+0],0x0
(0031) 	M8C_EnableGInt; // Uncomment this line to enable Global Interrupts
    03DB: 71 01    OR    F,0x1
(0032) 	// Insert your main routine code here.
(0033) 	
(0034) 	Timer8_1_DisableInt();
    03DD: 10       PUSH  X
    03DE: 7C 03 94 LCALL _Timer8_1_DisableInt
(0035) 	Timer8_1_Start();
    03E1: 7C 03 98 LCALL _Timer8_1_Start
(0036) 	
(0037) 	SleepTimer_1_EnableInt();
    03E4: 7C 03 B0 LCALL _SleepTimer_1_EnableInt
(0038) 	SleepTimer_1_Start();
    03E7: 7C 03 B4 LCALL _SleepTimer_1_DisableInt|SleepTimer_1_Start|_SleepTimer_1_Start
    03EA: 20       POP   X
    03EB: 80 A4    JMP   0x0490
(0039) 	
(0040) 	while (TRUE)
(0041) 	{
(0042) 		switch (i)
    03ED: 52 00    MOV   A,[X+0]
    03EF: 54 02    MOV   [X+2],A
    03F1: 56 01 00 MOV   [X+1],0x0
    03F4: 3D 01 00 CMP   [X+1],0x0
    03F7: B0 06    JNZ   0x03FE
    03F9: 3D 02 00 CMP   [X+2],0x0
    03FC: A0 2B    JZ    0x0428
    03FE: 3D 01 00 CMP   [X+1],0x0
    0401: B0 06    JNZ   0x0408
    0403: 3D 02 01 CMP   [X+2],0x1
    0406: A0 35    JZ    0x043C
    0408: 3D 01 00 CMP   [X+1],0x0
    040B: B0 06    JNZ   0x0412
    040D: 3D 02 02 CMP   [X+2],0x2
    0410: A0 3C    JZ    0x044D
    0412: 3D 01 00 CMP   [X+1],0x0
    0415: B0 06    JNZ   0x041C
    0417: 3D 02 03 CMP   [X+2],0x3
    041A: A0 41    JZ    0x045C
    041C: 3D 01 00 CMP   [X+1],0x0
    041F: B0 06    JNZ   0x0426
    0421: 3D 02 04 CMP   [X+2],0x4
    0424: A0 48    JZ    0x046D
    0426: 80 53    JMP   0x047A
(0043) 		{
(0044) 			case 0:
(0045) 				Matrix_UnSetRaster();
    0428: 7C 07 CB LCALL _Matrix_UnSetRaster
(0046) 				Matrix_DrawVector(0xf0f0, 0xf0f0f0f0);
    042B: 50 F0    MOV   A,0xF0
    042D: 08       PUSH  A
    042E: 08       PUSH  A
    042F: 08       PUSH  A
    0430: 08       PUSH  A
    0431: 50 F0    MOV   A,0xF0
    0433: 08       PUSH  A
    0434: 08       PUSH  A
    0435: 7C 04 AA LCALL _Matrix_DrawVector
    0438: 38 FA    ADD   SP,0xFA
(0047) 				break;
    043A: 80 42    JMP   0x047D
(0048) 				
(0049) 			case 1:
(0050) 				Matrix_DrawVector(0xf0f0, 0x0f0f0f0f);
    043C: 50 0F    MOV   A,0xF
    043E: 08       PUSH  A
    043F: 08       PUSH  A
    0440: 08       PUSH  A
    0441: 08       PUSH  A
    0442: 50 F0    MOV   A,0xF0
    0444: 08       PUSH  A
    0445: 08       PUSH  A
    0446: 7C 04 AA LCALL _Matrix_DrawVector
    0449: 38 FA    ADD   SP,0xFA
(0051) 				break;
    044B: 80 31    JMP   0x047D
(0052) 				
(0053) 			case 2:
(0054) 				Matrix_DrawVector(0x0f0f, 0x0f0f0f0f);
    044D: 50 0F    MOV   A,0xF
    044F: 08       PUSH  A
    0450: 08       PUSH  A
    0451: 08       PUSH  A
    0452: 08       PUSH  A
    0453: 08       PUSH  A
    0454: 08       PUSH  A
    0455: 7C 04 AA LCALL _Matrix_DrawVector
    0458: 38 FA    ADD   SP,0xFA
(0055) 				break;
    045A: 80 22    JMP   0x047D
(0056) 				
(0057) 			case 3:
(0058) 				Matrix_DrawVector(0x0f0f, 0xf0f0f0f0);
    045C: 50 F0    MOV   A,0xF0
    045E: 08       PUSH  A
    045F: 08       PUSH  A
    0460: 08       PUSH  A
    0461: 08       PUSH  A
    0462: 50 0F    MOV   A,0xF
    0464: 08       PUSH  A
    0465: 08       PUSH  A
    0466: 7C 04 AA LCALL _Matrix_DrawVector
    0469: 38 FA    ADD   SP,0xFA
(0059) 				break;
    046B: 80 11    JMP   0x047D
(0060) 				
(0061) 			case 4:
(0062) 				Matrix_DrawRaster(&mamesiba);
    046D: 50 00    MOV   A,0x0
    046F: 08       PUSH  A
    0470: 50 05    MOV   A,0x5
    0472: 08       PUSH  A
    0473: 7C 07 B7 LCALL _Matrix_DrawRaster
    0476: 38 FE    ADD   SP,0xFE
(0063) 				break;
    0478: 80 04    JMP   0x047D
(0064) 				
(0065) 			default :
(0066) 				i = 0;
    047A: 56 00 00 MOV   [X+0],0x0
(0067) 				break;
(0068) 		}
(0069) 			
(0070) 		i < 4 ? (i++) : (i = 0);
    047D: 3D 00 04 CMP   [X+0],0x4
    0480: D0 05    JNC   0x0486
    0482: 77 00    INC   [X+0]
    0484: 80 04    JMP   0x0489
    0486: 56 00 00 MOV   [X+0],0x0
(0071) 		SleepTimer_1_TickWait(64);
    0489: 10       PUSH  X
    048A: 50 40    MOV   A,0x40
    048C: 7C 03 C2 LCALL _SleepTimer_1_Stop|_SleepTimer_1_TickWait|_SleepTimer_1_SetInterval|SleepTimer_1_TickWait
    048F: 20       POP   X
(0072) 	}
    0490: 8F 5C    JMP   0x03ED
(0073) }
(0074) 
(0075) 
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\MATRIX~2\MATRIX~1\MATRIX~1\matrix_led.c
(0001) // Matrix_LED.c
(0002) // hikari
(0003) // Header : Matrix_LED.h
(0004) 
(0005) #include "Matrix_LED.h"
(0006) 
(0007) // Matrix_LED port Mask
(0008) #define Matrix_MASK (S_row_MASK | S_colA_MASK | S_colB_MASK | CLK_MASK | LATCH_MASK)
(0009) 
(0010) 
(0011) // LED ON
(0012) void Matrix_ON(void)
(0013) {
(0014) 	EN_DataShadow |= EN_MASK;
_Matrix_ON:
    0497: 62 D0 00 MOV   REG[0xD0],0x0
    049A: 2E 04 20 OR    [i+4],0x20
(0015) 	EN_Data_ADDR = EN_DataShadow;
    049D: 51 04    MOV   A,[i+4]
    049F: 60 00    MOV   REG[0x0],A
    04A1: 7F       RET   
(0016) }
(0017) 
(0018) // LED OFF
(0019) void Matirx_OFF(void)
(0020) {
_Matirx_OFF:
    04A2: 26 04 DF AND   [i+4],0xDF
(0021) 	EN_DataShadow &= ~EN_MASK;
(0022) 	EN_Data_ADDR = EN_DataShadow;
    04A5: 51 04    MOV   A,[i+4]
    04A7: 60 00    MOV   REG[0x0],A
    04A9: 7F       RET   
(0023) }
(0024) 
(0025) // Draw Vector data : WORD, DWORD
(0026) void Matrix_DrawVector(WORD row, DWORD col)
(0027) {
_Matrix_DrawVector:
  i                    --> X+0
  col                  --> X-9
  row                  --> X-5
    04AA: 10       PUSH  X
    04AB: 4F       MOV   X,SP
    04AC: 38 08    ADD   SP,0x8
(0028) 	WORD i;
(0029) 	for (i = 1; i != 0; i <<= 1)
    04AE: 56 01 01 MOV   [X+1],0x1
    04B1: 56 00 00 MOV   [X+0],0x0
    04B4: 80 7E    JMP   0x0533
(0030) 	{
(0031) 		CLK_DataShadow &= ~Matrix_MASK;
    04B6: 94 43    CALL  0x08FB
    04B8: 40       NOP   
    04B9: 23 01    AND   A,[X+1]
    04BB: 53 52    MOV   [__r1],A
    04BD: 52 FB    MOV   A,[X-5]
    04BF: 23 00    AND   A,[X+0]
    04C1: 39 00    CMP   A,0x0
    04C3: B0 06    JNZ   0x04CA
    04C5: 3C 52 00 CMP   [__r1],0x0
    04C8: A0 09    JZ    0x04D2
    04CA: 56 03 01 MOV   [X+3],0x1
    04CD: 56 02 00 MOV   [X+2],0x0
    04D0: 80 07    JMP   0x04D8
    04D2: 56 03 00 MOV   [X+3],0x0
    04D5: 56 02 00 MOV   [X+2],0x0
    04D8: 62 D0 00 MOV   REG[0xD0],0x0
    04DB: 51 04    MOV   A,[i+4]
    04DD: 53 52    MOV   [__r1],A
    04DF: 52 03    MOV   A,[X+3]
    04E1: 2C 52    OR    [__r1],A
    04E3: 51 52    MOV   A,[__r1]
    04E5: 53 04    MOV   [i+4],A
    04E7: 52 F8    MOV   A,[X-8]
    04E9: 23 01    AND   A,[X+1]
    04EB: 53 52    MOV   [__r1],A
    04ED: 52 F7    MOV   A,[X-9]
    04EF: 23 00    AND   A,[X+0]
    04F1: 39 00    CMP   A,0x0
    04F3: 93 C7    CALL  <created procedures>
    04F5: 40       NOP   
    04F6: 23 01    AND   A,[X+1]
    04F8: 53 52    MOV   [__r1],A
    04FA: 52 F9    MOV   A,[X-7]
    04FC: 23 00    AND   A,[X+0]
    04FE: 39 00    CMP   A,0x0
    0500: B0 06    JNZ   0x0507
    0502: 3C 52 00 CMP   [__r1],0x0
    0505: A0 09    JZ    0x050F
    0507: 56 07 04 MOV   [X+7],0x4
    050A: 56 06 00 MOV   [X+6],0x0
    050D: 80 07    JMP   0x0515
    050F: 56 07 00 MOV   [X+7],0x0
    0512: 56 06 00 MOV   [X+6],0x0
    0515: 62 D0 00 MOV   REG[0xD0],0x0
    0518: 51 04    MOV   A,[i+4]
    051A: 53 52    MOV   [__r1],A
    051C: 52 07    MOV   A,[X+7]
    051E: 2C 52    OR    [__r1],A
    0520: 51 52    MOV   A,[__r1]
    0522: 53 04    MOV   [i+4],A
(0032) 		CLK_Data_ADDR = CLK_DataShadow;
(0033) 		
(0034) 		CLK_DataShadow |= (row & i) ? S_row_MASK : 0;
(0035) 		CLK_DataShadow |= (((WORD *)&col)[0] & i) ? S_colA_MASK : 0;
(0036) 		CLK_DataShadow |= (((WORD *)&col)[1] & i) ? S_colB_MASK : 0;
(0037) 		CLK_Data_ADDR = CLK_DataShadow;
    0524: 51 04    MOV   A,[i+4]
    0526: 60 00    MOV   REG[0x0],A
(0038) 		
(0039) 		CLK_DataShadow |= CLK_MASK;
    0528: 2E 04 08 OR    [i+4],0x8
(0040) 		CLK_Data_ADDR = CLK_DataShadow;
    052B: 51 04    MOV   A,[i+4]
    052D: 60 00    MOV   REG[0x0],A
(0041) 	}
    052F: 66 01    ASL   [X+1]
    0531: 6C 00    RLC   [X+0]
    0533: 3D 00 00 CMP   [X+0],0x0
    0536: BF 7F    JNZ   0x04B6
    0538: 3D 01 00 CMP   [X+1],0x0
    053B: BF 7A    JNZ   0x04B6
(0042) 	
(0043) 	LATCH_DataShadow |= LATCH_MASK;
    053D: 62 D0 00 MOV   REG[0xD0],0x0
    0540: 2E 04 10 OR    [i+4],0x10
(0044) 	LATCH_Data_ADDR = LATCH_DataShadow;
    0543: 51 04    MOV   A,[i+4]
    0545: 60 00    MOV   REG[0x0],A
    0547: 38 F8    ADD   SP,0xF8
    0549: 20       POP   X
    054A: 7F       RET   
(0045) }
(0046) 
(0047) // Draw Vector data : WORD, DWORD *
(0048) void Matrix_pDrawVector(WORD row, CONST DWORD *col)
(0049) {
_Matrix_pDrawVector:
  i                    --> X+0
  col                  --> X-7
  row                  --> X-5
    054B: 10       PUSH  X
    054C: 4F       MOV   X,SP
    054D: 38 08    ADD   SP,0x8
(0050) 	WORD i;
(0051) 	for (i = 1; i != 0; i <<= 1)
    054F: 56 01 01 MOV   [X+1],0x1
    0552: 56 00 00 MOV   [X+0],0x0
    0555: 80 95    JMP   0x05EB
(0052) 	{
(0053) 		CLK_DataShadow &= ~Matrix_MASK;
    0557: 93 A2    CALL  0x08FB
    0559: 40       NOP   
    055A: 23 01    AND   A,[X+1]
    055C: 53 52    MOV   [__r1],A
    055E: 52 FB    MOV   A,[X-5]
    0560: 23 00    AND   A,[X+0]
    0562: 39 00    CMP   A,0x0
    0564: B0 06    JNZ   0x056B
    0566: 3C 52 00 CMP   [__r1],0x0
    0569: A0 09    JZ    0x0573
    056B: 56 03 01 MOV   [X+3],0x1
    056E: 56 02 00 MOV   [X+2],0x0
    0571: 80 07    JMP   0x0579
    0573: 56 03 00 MOV   [X+3],0x0
    0576: 56 02 00 MOV   [X+2],0x0
    0579: 62 D0 00 MOV   REG[0xD0],0x0
    057C: 51 04    MOV   A,[i+4]
    057E: 53 52    MOV   [__r1],A
    0580: 52 03    MOV   A,[X+3]
    0582: 93 68    CALL  0x08EC
    0584: 40       NOP   
    0585: 53 52    MOV   [__r1],A
    0587: 52 F9    MOV   A,[X-7]
    0589: 60 D4    MOV   REG[0xD4],A
    058B: 3E 52    MVI   A,[__r1]
    058D: 53 53    MOV   [__r0],A
    058F: 3E 52    MVI   A,[__r1]
    0591: 53 52    MOV   [__r1],A
    0593: 52 01    MOV   A,[X+1]
    0595: 24 52    AND   [__r1],A
    0597: 52 00    MOV   A,[X+0]
    0599: 24 53    AND   [__r0],A
    059B: 93 1F    CALL  <created procedures>
    059D: 40       NOP   
    059E: 01 02    ADD   A,0x2
    05A0: 53 52    MOV   [__r1],A
    05A2: 52 F9    MOV   A,[X-7]
    05A4: 09 00    ADC   A,0x0
    05A6: 60 D4    MOV   REG[0xD4],A
    05A8: 3E 52    MVI   A,[__r1]
    05AA: 53 53    MOV   [__r0],A
    05AC: 3E 52    MVI   A,[__r1]
    05AE: 53 52    MOV   [__r1],A
    05B0: 52 01    MOV   A,[X+1]
    05B2: 24 52    AND   [__r1],A
    05B4: 52 00    MOV   A,[X+0]
    05B6: 24 53    AND   [__r0],A
    05B8: B0 06    JNZ   0x05BF
    05BA: 3C 52 00 CMP   [__r1],0x0
    05BD: A0 09    JZ    0x05C7
    05BF: 56 07 04 MOV   [X+7],0x4
    05C2: 56 06 00 MOV   [X+6],0x0
    05C5: 80 07    JMP   0x05CD
    05C7: 56 07 00 MOV   [X+7],0x0
    05CA: 56 06 00 MOV   [X+6],0x0
    05CD: 62 D0 00 MOV   REG[0xD0],0x0
    05D0: 51 04    MOV   A,[i+4]
    05D2: 53 52    MOV   [__r1],A
    05D4: 52 07    MOV   A,[X+7]
    05D6: 2C 52    OR    [__r1],A
    05D8: 51 52    MOV   A,[__r1]
    05DA: 53 04    MOV   [i+4],A
(0054) 		CLK_Data_ADDR = CLK_DataShadow;
(0055) 		
(0056) 		CLK_DataShadow |= (row & i) ? S_row_MASK : 0;
(0057) 		CLK_DataShadow |= (((WORD *)col)[0] & i) ? S_colA_MASK : 0;
(0058) 		CLK_DataShadow |= (((WORD *)col)[1] & i) ? S_colB_MASK : 0;
(0059) 		CLK_Data_ADDR = CLK_DataShadow;
    05DC: 51 04    MOV   A,[i+4]
    05DE: 60 00    MOV   REG[0x0],A
(0060) 		
(0061) 		CLK_DataShadow |= CLK_MASK;
    05E0: 2E 04 08 OR    [i+4],0x8
(0062) 		CLK_Data_ADDR = CLK_DataShadow;
    05E3: 51 04    MOV   A,[i+4]
    05E5: 60 00    MOV   REG[0x0],A
(0063) 	}
    05E7: 66 01    ASL   [X+1]
    05E9: 6C 00    RLC   [X+0]
    05EB: 3D 00 00 CMP   [X+0],0x0
    05EE: BF 68    JNZ   0x0557
    05F0: 3D 01 00 CMP   [X+1],0x0
    05F3: BF 63    JNZ   0x0557
(0064) 	
(0065) 	LATCH_DataShadow |= LATCH_MASK;
    05F5: 62 D0 00 MOV   REG[0xD0],0x0
    05F8: 2E 04 10 OR    [i+4],0x10
(0066) 	LATCH_Data_ADDR = LATCH_DataShadow;
    05FB: 51 04    MOV   A,[i+4]
    05FD: 60 00    MOV   REG[0x0],A
    05FF: 38 F8    ADD   SP,0xF8
    0601: 20       POP   X
    0602: 7F       RET   
(0067) }
(0068) 
(0069) // Draw Vector data : WORD *, DWORD *
(0070) void Matrix_ppDrawVector(CONST WORD *row, CONST DWORD *col)
(0071) {
_Matrix_ppDrawVector:
  i                    --> X+0
  col                  --> X-7
  row                  --> X-5
    0603: 10       PUSH  X
    0604: 4F       MOV   X,SP
    0605: 38 08    ADD   SP,0x8
(0072) 	WORD i;
(0073) 	for (i = 1; i != 0; i <<= 1)
    0607: 56 01 01 MOV   [X+1],0x1
    060A: 56 00 00 MOV   [X+0],0x0
    060D: 80 A1    JMP   0x06AF
(0074) 	{
(0075) 		CLK_DataShadow &= ~Matrix_MASK;
    060F: 92 EA    CALL  0x08FB
    0611: 40       NOP   
    0612: 53 52    MOV   [__r1],A
    0614: 52 FB    MOV   A,[X-5]
    0616: 60 D4    MOV   REG[0xD4],A
    0618: 3E 52    MVI   A,[__r1]
    061A: 53 53    MOV   [__r0],A
    061C: 3E 52    MVI   A,[__r1]
    061E: 53 52    MOV   [__r1],A
    0620: 52 01    MOV   A,[X+1]
    0622: 24 52    AND   [__r1],A
    0624: 52 00    MOV   A,[X+0]
    0626: 24 53    AND   [__r0],A
    0628: B0 06    JNZ   0x062F
    062A: 3C 52 00 CMP   [__r1],0x0
    062D: A0 09    JZ    0x0637
    062F: 56 03 01 MOV   [X+3],0x1
    0632: 56 02 00 MOV   [X+2],0x0
    0635: 80 07    JMP   0x063D
    0637: 56 03 00 MOV   [X+3],0x0
    063A: 56 02 00 MOV   [X+2],0x0
    063D: 62 D0 00 MOV   REG[0xD0],0x0
    0640: 51 04    MOV   A,[i+4]
    0642: 53 52    MOV   [__r1],A
    0644: 52 03    MOV   A,[X+3]
    0646: 92 A4    CALL  0x08EC
    0648: 40       NOP   
    0649: 53 52    MOV   [__r1],A
    064B: 52 F9    MOV   A,[X-7]
    064D: 60 D4    MOV   REG[0xD4],A
    064F: 3E 52    MVI   A,[__r1]
    0651: 53 53    MOV   [__r0],A
    0653: 3E 52    MVI   A,[__r1]
    0655: 53 52    MOV   [__r1],A
    0657: 52 01    MOV   A,[X+1]
    0659: 24 52    AND   [__r1],A
    065B: 52 00    MOV   A,[X+0]
    065D: 24 53    AND   [__r0],A
    065F: 92 5B    CALL  <created procedures>
    0661: 40       NOP   
    0662: 01 02    ADD   A,0x2
    0664: 53 52    MOV   [__r1],A
    0666: 52 F9    MOV   A,[X-7]
    0668: 09 00    ADC   A,0x0
    066A: 60 D4    MOV   REG[0xD4],A
    066C: 3E 52    MVI   A,[__r1]
    066E: 53 53    MOV   [__r0],A
    0670: 3E 52    MVI   A,[__r1]
    0672: 53 52    MOV   [__r1],A
    0674: 52 01    MOV   A,[X+1]
    0676: 24 52    AND   [__r1],A
    0678: 52 00    MOV   A,[X+0]
    067A: 24 53    AND   [__r0],A
    067C: B0 06    JNZ   0x0683
    067E: 3C 52 00 CMP   [__r1],0x0
    0681: A0 09    JZ    0x068B
    0683: 56 07 04 MOV   [X+7],0x4
    0686: 56 06 00 MOV   [X+6],0x0
    0689: 80 07    JMP   0x0691
    068B: 56 07 00 MOV   [X+7],0x0
    068E: 56 06 00 MOV   [X+6],0x0
    0691: 62 D0 00 MOV   REG[0xD0],0x0
    0694: 51 04    MOV   A,[i+4]
    0696: 53 52    MOV   [__r1],A
    0698: 52 07    MOV   A,[X+7]
    069A: 2C 52    OR    [__r1],A
    069C: 51 52    MOV   A,[__r1]
    069E: 53 04    MOV   [i+4],A
(0076) 		CLK_Data_ADDR = CLK_DataShadow;
(0077) 		
(0078) 		CLK_DataShadow |= (*row & i) ? S_row_MASK : 0;
(0079) 		CLK_DataShadow |= (((WORD *)col)[0] & i) ? S_colA_MASK : 0;
(0080) 		CLK_DataShadow |= (((WORD *)col)[1] & i) ? S_colB_MASK : 0;
(0081) 		CLK_Data_ADDR = CLK_DataShadow;
    06A0: 51 04    MOV   A,[i+4]
    06A2: 60 00    MOV   REG[0x0],A
(0082) 		
(0083) 		CLK_DataShadow |= CLK_MASK;
    06A4: 2E 04 08 OR    [i+4],0x8
(0084) 		CLK_Data_ADDR = CLK_DataShadow;
    06A7: 51 04    MOV   A,[i+4]
    06A9: 60 00    MOV   REG[0x0],A
(0085) 	}
    06AB: 66 01    ASL   [X+1]
    06AD: 6C 00    RLC   [X+0]
    06AF: 3D 00 00 CMP   [X+0],0x0
    06B2: BF 5C    JNZ   0x060F
    06B4: 3D 01 00 CMP   [X+1],0x0
    06B7: BF 57    JNZ   0x060F
(0086) 	
(0087) 	LATCH_DataShadow |= LATCH_MASK;
    06B9: 62 D0 00 MOV   REG[0xD0],0x0
    06BC: 2E 04 10 OR    [i+4],0x10
(0088) 	LATCH_Data_ADDR = LATCH_DataShadow;
    06BF: 51 04    MOV   A,[i+4]
    06C1: 60 00    MOV   REG[0x0],A
    06C3: 38 F8    ADD   SP,0xF8
    06C5: 20       POP   X
    06C6: 7F       RET   
(0089) }
(0090) 
(0091) // Draw Vector data : Vector *
(0092) void Matrix_DrawVector2(CONST Vector *data)
(0093) {
_Matrix_DrawVector2:
  i                    --> X+0
  data                 --> X-5
    06C7: 10       PUSH  X
    06C8: 4F       MOV   X,SP
    06C9: 38 08    ADD   SP,0x8
(0094) 	WORD i;
(0095) 	for (i = 1; i != 0; i <<= 1)
    06CB: 56 01 01 MOV   [X+1],0x1
    06CE: 56 00 00 MOV   [X+0],0x0
    06D1: 80 CD    JMP   0x079F
(0096) 	{
(0097) 		CLK_DataShadow &= ~Matrix_MASK;
    06D3: 92 26    CALL  0x08FB
    06D5: 40       NOP   
    06D6: 53 52    MOV   [__r1],A
    06D8: 52 FB    MOV   A,[X-5]
    06DA: 60 D4    MOV   REG[0xD4],A
    06DC: 3E 52    MVI   A,[__r1]
    06DE: 53 53    MOV   [__r0],A
    06E0: 3E 52    MVI   A,[__r1]
    06E2: 53 52    MOV   [__r1],A
    06E4: 52 01    MOV   A,[X+1]
    06E6: 24 52    AND   [__r1],A
    06E8: 52 00    MOV   A,[X+0]
    06EA: 24 53    AND   [__r0],A
    06EC: B0 06    JNZ   0x06F3
    06EE: 3C 52 00 CMP   [__r1],0x0
    06F1: A0 09    JZ    0x06FB
    06F3: 56 03 01 MOV   [X+3],0x1
    06F6: 56 02 00 MOV   [X+2],0x0
    06F9: 80 07    JMP   0x0701
    06FB: 56 03 00 MOV   [X+3],0x0
    06FE: 56 02 00 MOV   [X+2],0x0
    0701: 62 D0 00 MOV   REG[0xD0],0x0
    0704: 51 04    MOV   A,[i+4]
    0706: 53 52    MOV   [__r1],A
    0708: 52 03    MOV   A,[X+3]
    070A: 2C 52    OR    [__r1],A
    070C: 51 52    MOV   A,[__r1]
    070E: 53 04    MOV   [i+4],A
    0710: 52 FC    MOV   A,[X-4]
    0712: 01 02    ADD   A,0x2
    0714: 53 52    MOV   [__r1],A
    0716: 52 FB    MOV   A,[X-5]
    0718: 09 00    ADC   A,0x0
    071A: 60 D4    MOV   REG[0xD4],A
    071C: 3E 52    MVI   A,[__r1]
    071E: 53 53    MOV   [__r0],A
    0720: 3E 52    MVI   A,[__r1]
    0722: 53 52    MOV   [__r1],A
    0724: 52 01    MOV   A,[X+1]
    0726: 24 52    AND   [__r1],A
    0728: 52 00    MOV   A,[X+0]
    072A: 24 53    AND   [__r0],A
    072C: B0 06    JNZ   0x0733
    072E: 3C 52 00 CMP   [__r1],0x0
    0731: A0 09    JZ    0x073B
    0733: 56 05 02 MOV   [X+5],0x2
    0736: 56 04 00 MOV   [X+4],0x0
    0739: 80 07    JMP   0x0741
    073B: 56 05 00 MOV   [X+5],0x0
    073E: 56 04 00 MOV   [X+4],0x0
    0741: 62 D0 00 MOV   REG[0xD0],0x0
    0744: 51 04    MOV   A,[i+4]
    0746: 53 52    MOV   [__r1],A
    0748: 52 05    MOV   A,[X+5]
    074A: 2C 52    OR    [__r1],A
    074C: 51 52    MOV   A,[__r1]
    074E: 53 04    MOV   [i+4],A
    0750: 52 FC    MOV   A,[X-4]
    0752: 01 04    ADD   A,0x4
    0754: 53 52    MOV   [__r1],A
    0756: 52 FB    MOV   A,[X-5]
    0758: 09 00    ADC   A,0x0
    075A: 60 D4    MOV   REG[0xD4],A
    075C: 3E 52    MVI   A,[__r1]
    075E: 53 53    MOV   [__r0],A
    0760: 3E 52    MVI   A,[__r1]
    0762: 53 52    MOV   [__r1],A
    0764: 52 01    MOV   A,[X+1]
    0766: 24 52    AND   [__r1],A
    0768: 52 00    MOV   A,[X+0]
    076A: 24 53    AND   [__r0],A
    076C: B0 06    JNZ   0x0773
    076E: 3C 52 00 CMP   [__r1],0x0
    0771: A0 09    JZ    0x077B
    0773: 56 07 04 MOV   [X+7],0x4
    0776: 56 06 00 MOV   [X+6],0x0
    0779: 80 07    JMP   0x0781
    077B: 56 07 00 MOV   [X+7],0x0
    077E: 56 06 00 MOV   [X+6],0x0
    0781: 62 D0 00 MOV   REG[0xD0],0x0
    0784: 51 04    MOV   A,[i+4]
    0786: 53 52    MOV   [__r1],A
    0788: 52 07    MOV   A,[X+7]
    078A: 2C 52    OR    [__r1],A
    078C: 51 52    MOV   A,[__r1]
    078E: 53 04    MOV   [i+4],A
(0098) 		CLK_Data_ADDR = CLK_DataShadow;
(0099) 		
(0100) 		CLK_DataShadow |= (data->row & i) ? S_row_MASK : 0;
(0101) 		CLK_DataShadow |= (((WORD *)&(data->col))[0] & i) ? S_colA_MASK : 0;
(0102) 		CLK_DataShadow |= (((WORD *)&(data->col))[1] & i) ? S_colB_MASK : 0;
(0103) 		CLK_Data_ADDR = CLK_DataShadow;
    0790: 51 04    MOV   A,[i+4]
    0792: 60 00    MOV   REG[0x0],A
(0104) 		
(0105) 		CLK_DataShadow |= CLK_MASK;
    0794: 2E 04 08 OR    [i+4],0x8
(0106) 		CLK_Data_ADDR = CLK_DataShadow;
    0797: 51 04    MOV   A,[i+4]
    0799: 60 00    MOV   REG[0x0],A
(0107) 	}
    079B: 66 01    ASL   [X+1]
    079D: 6C 00    RLC   [X+0]
    079F: 3D 00 00 CMP   [X+0],0x0
    07A2: BF 30    JNZ   0x06D3
    07A4: 3D 01 00 CMP   [X+1],0x0
    07A7: BF 2B    JNZ   0x06D3
(0108) 	
(0109) 	LATCH_DataShadow |= LATCH_MASK;
    07A9: 62 D0 00 MOV   REG[0xD0],0x0
    07AC: 2E 04 10 OR    [i+4],0x10
(0110) 	LATCH_Data_ADDR = LATCH_DataShadow;
    07AF: 51 04    MOV   A,[i+4]
    07B1: 60 00    MOV   REG[0x0],A
    07B3: 38 F8    ADD   SP,0xF8
    07B5: 20       POP   X
    07B6: 7F       RET   
(0111) }
(0112) 
(0113) 
(0114) 
(0115) Raster *timer;
(0116) 
(0117) // raster data 表示
(0118) void Matrix_DrawRaster(Raster *data)
(0119) {
_Matrix_DrawRaster:
  data                 --> X-5
    07B7: 10       PUSH  X
    07B8: 4F       MOV   X,SP
(0120) 	timer = data;
    07B9: 62 D0 00 MOV   REG[0xD0],0x0
    07BC: 52 FC    MOV   A,[X-4]
    07BE: 53 55    MOV   [timer+1],A
    07C0: 52 FB    MOV   A,[X-5]
    07C2: 53 54    MOV   [timer],A
(0121) 	Timer8_1_EnableInt();
    07C4: 10       PUSH  X
    07C5: 7C 03 90 LCALL _Timer8_1_EnableInt
    07C8: 20       POP   X
    07C9: 20       POP   X
    07CA: 7F       RET   
(0122) }
(0123) 
(0124) // raster data 表示用 timer 停止
(0125) void Matrix_UnSetRaster(void)
(0126) {
(0127) 	timer = 0;
_Matrix_UnSetRaster:
    07CB: 62 D0 00 MOV   REG[0xD0],0x0
    07CE: 55 55 00 MOV   [timer+1],0x0
    07D1: 55 54 00 MOV   [timer],0x0
(0128) 	Timer8_1_DisableInt();
    07D4: 10       PUSH  X
    07D5: 7C 03 94 LCALL _Timer8_1_DisableInt
    07D8: 20       POP   X
    07D9: 7F       RET   
(0129) }
(0130) 
(0131) 
(0132) 
(0133) // raster data 表示用 timer
(0134) #pragma interrupt_handler _Timer8_1_ISR
(0135) void _Timer8_1_ISR(void)
(0136) {
__Timer8_1_ISR:
    07DA: 71 C0    OR    F,0xC0
    07DC: 08       PUSH  A
    07DD: 5D D0    MOV   A,REG[0xD0]
    07DF: 08       PUSH  A
    07E0: 5D D3    MOV   A,REG[0xD3]
    07E2: 08       PUSH  A
    07E3: 5D D4    MOV   A,REG[0xD4]
    07E5: 08       PUSH  A
    07E6: 5D D5    MOV   A,REG[0xD5]
    07E8: 08       PUSH  A
    07E9: 62 D0 00 MOV   REG[0xD0],0x0
    07EC: 51 53    MOV   A,[__r0]
    07EE: 08       PUSH  A
    07EF: 51 52    MOV   A,[__r1]
    07F1: 08       PUSH  A
    07F2: 51 51    MOV   A,[__r2]
    07F4: 08       PUSH  A
    07F5: 51 50    MOV   A,[__r3]
    07F7: 08       PUSH  A
    07F8: 51 4F    MOV   A,[__r4]
    07FA: 08       PUSH  A
    07FB: 51 4E    MOV   A,[__r5]
    07FD: 08       PUSH  A
    07FE: 51 4D    MOV   A,[__r6]
    0800: 08       PUSH  A
    0801: 51 4C    MOV   A,[__r7]
    0803: 08       PUSH  A
    0804: 51 4B    MOV   A,[__r8]
    0806: 08       PUSH  A
    0807: 51 4A    MOV   A,[__r9]
    0809: 08       PUSH  A
    080A: 51 49    MOV   A,[__r10]
    080C: 08       PUSH  A
    080D: 51 48    MOV   A,[__r11]
    080F: 08       PUSH  A
    0810: 51 47    MOV   A,[__rX]
    0812: 08       PUSH  A
    0813: 51 46    MOV   A,[__rY]
    0815: 08       PUSH  A
    0816: 51 45    MOV   A,[__rZ]
    0818: 08       PUSH  A
    0819: 3C 54 00 CMP   [timer],0x0
    081C: B0 0D    JNZ   0x082A
    081E: 3C 55 00 CMP   [timer+1],0x0
    0821: B0 08    JNZ   0x082A
(0137) 	static BYTE i = 0;
(0138) 	
(0139) 	if (timer == 0)
(0140) 	{
(0141) 		Timer8_1_DisableInt();
    0823: 10       PUSH  X
    0824: 7C 03 94 LCALL _Timer8_1_DisableInt
    0827: 20       POP   X
(0142) 		return;
    0828: 80 54    JMP   0x087D
(0143) 	}
(0144) 
(0145) 	Matrix_pDrawVector(1 << i, timer->data + i);
    082A: 62 D0 00 MOV   REG[0xD0],0x0
    082D: 51 56    MOV   A,[timer+2]
    082F: 53 52    MOV   [__r1],A
    0831: 55 53 00 MOV   [__r0],0x0
    0834: 65 52    ASL   [__r1]
    0836: 6B 53    RLC   [__r0]
    0838: 65 52    ASL   [__r1]
    083A: 6B 53    RLC   [__r0]
    083C: 51 55    MOV   A,[timer+1]
    083E: 04 52    ADD   [__r1],A
    0840: 51 54    MOV   A,[timer]
    0842: 0C 53    ADC   [__r0],A
    0844: 51 53    MOV   A,[__r0]
    0846: 08       PUSH  A
    0847: 51 52    MOV   A,[__r1]
    0849: 08       PUSH  A
    084A: 51 56    MOV   A,[timer+2]
    084C: 55 50 01 MOV   [__r3],0x1
    084F: 55 51 00 MOV   [__r2],0x0
    0852: 21 0F    AND   A,0xF
    0854: A0 0B    JZ    0x0860
    0856: 62 D0 00 MOV   REG[0xD0],0x0
    0859: 65 50    ASL   [__r3]
    085B: 6B 51    RLC   [__r2]
    085D: 78       DEC   A
    085E: BF F7    JNZ   0x0856
    0860: 62 D0 00 MOV   REG[0xD0],0x0
    0863: 51 51    MOV   A,[__r2]
    0865: 08       PUSH  A
    0866: 51 50    MOV   A,[__r3]
    0868: 08       PUSH  A
    0869: 9C E0    CALL  _Matrix_pDrawVector
    086B: 38 FC    ADD   SP,0xFC
(0146) 	
(0147) 	if (++i >= 16)
    086D: 62 D0 00 MOV   REG[0xD0],0x0
(0148) 		i = 0;
(0149) }
    0870: 51 56    MOV   A,[timer+2]
    0872: 01 01    ADD   A,0x1
    0874: 53 56    MOV   [timer+2],A
    0876: 39 10    CMP   A,0x10
    0878: C0 04    JC    0x087D
    087A: 55 56 00 MOV   [timer+2],0x0
    087D: 62 D0 00 MOV   REG[0xD0],0x0
    0880: 18       POP   A
    0881: 53 45    MOV   [__rZ],A
    0883: 18       POP   A
    0884: 53 46    MOV   [__rY],A
    0886: 18       POP   A
    0887: 53 47    MOV   [__rX],A
    0889: 18       POP   A
    088A: 53 48    MOV   [__r11],A
    088C: 18       POP   A
    088D: 53 49    MOV   [__r10],A
    088F: 18       POP   A
    0890: 53 4A    MOV   [__r9],A
    0892: 18       POP   A
    0893: 53 4B    MOV   [__r8],A
    0895: 18       POP   A
    0896: 53 4C    MOV   [__r7],A
    0898: 18       POP   A
    0899: 53 4D    MOV   [__r6],A
    089B: 18       POP   A
    089C: 53 4E    MOV   [__r5],A
    089E: 18       POP   A
    089F: 53 4F    MOV   [__r4],A
    08A1: 18       POP   A
    08A2: 53 50    MOV   [__r3],A
    08A4: 18       POP   A
    08A5: 53 51    MOV   [__r2],A
    08A7: 18       POP   A
    08A8: 53 52    MOV   [__r1],A
    08AA: 18       POP   A
    08AB: 53 53    MOV   [__r0],A
    08AD: 18       POP   A
    08AE: 60 D5    MOV   REG[0xD5],A
    08B0: 18       POP   A
    08B1: 60 D4    MOV   REG[0xD4],A
    08B3: 18       POP   A
    08B4: 60 D3    MOV   REG[0xD3],A
    08B6: 18       POP   A
    08B7: 60 D0    MOV   REG[0xD0],A
    08B9: 18       POP   A
    08BA: 7E       RETI  
    08BB: 30       HALT  
<created procedures>:
    08BC: B0 06    JNZ   0x08C3
    08BE: 3C 52 00 CMP   [__r1],0x0
    08C1: A0 09    JZ    0x08CB
    08C3: 56 05 02 MOV   [X+5],0x2
    08C6: 56 04 00 MOV   [X+4],0x0
    08C9: 80 07    JMP   0x08D1
    08CB: 56 05 00 MOV   [X+5],0x0
    08CE: 56 04 00 MOV   [X+4],0x0
    08D1: 62 D0 00 MOV   REG[0xD0],0x0
    08D4: 51 04    MOV   A,[i+4]
    08D6: 62 D0 00 MOV   REG[0xD0],0x0
    08D9: 53 52    MOV   [__r1],A
    08DB: 52 05    MOV   A,[X+5]
    08DD: 2C 52    OR    [__r1],A
    08DF: 51 52    MOV   A,[__r1]
    08E1: 62 D0 00 MOV   REG[0xD0],0x0
    08E4: 53 04    MOV   [i+4],A
    08E6: 62 D0 00 MOV   REG[0xD0],0x0
    08E9: 52 FA    MOV   A,[X-6]
    08EB: 7F       RET   
    08EC: 2C 52    OR    [__r1],A
    08EE: 51 52    MOV   A,[__r1]
    08F0: 62 D0 00 MOV   REG[0xD0],0x0
    08F3: 53 04    MOV   [i+4],A
    08F5: 62 D0 00 MOV   REG[0xD0],0x0
    08F8: 52 FA    MOV   A,[X-6]
    08FA: 7F       RET   
    08FB: 62 D0 00 MOV   REG[0xD0],0x0
    08FE: 26 04 E0 AND   [i+4],0xE0
    0901: 51 04    MOV   A,[i+4]
    0903: 60 00    MOV   REG[0x0],A
    0905: 62 D0 00 MOV   REG[0xD0],0x0
    0908: 52 FC    MOV   A,[X-4]
    090A: 7F       RET   
