 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _mamesiba::
 0000 00000000          .word 0,0
 0004 00FE0000          .word 254,0
 0008 0101E000          .word 257,57344
 000C 02001C00          .word 512,7168
 0010 04620300          .word 1122,768
 0014 04B50080          .word 1205,128
 0018 08F48040          .word 2292,32832
 001C 0C648040          .word 3172,32832
 0020 0C030040          .word 3075,64
 0024 0A000040          .word 2560,64
 0028 08000040          .word 2048,64
 002C 04000080          .word 1024,128
 0030 03000100          .word 768,256
 0034 00FE0600          .word 254,1536
 0038 0001F800          .word 1,63488
 003C 00000000          .word 0,0
 0040                   .dbfile C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\MATRIX~2\MATRIX~1\MATRIX~1\main.c
 0040                   .dbstruct 0 64 .2
 0040                   .dbfield 0 data A[64:16]l
 0040                   .dbend
 0040                   .dbsym e mamesiba _mamesiba S[.2]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\MATRIX~2\MATRIX~1\MATRIX~1\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\MATRIX~2\MATRIX~1\MATRIX~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;              i -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 29
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "stdlib.h"
 0004           ; #include "Matrix_LED.h"
 0004           ; 
 0004           ; Raster mamesiba = {
 0004           ;       0x00000000,
 0004           ;       0x00fe0000,
 0004           ;       0x0101e000,
 0004           ;       0x02001c00,
 0004           ;       0x04620300,
 0004           ;       0x04b50080,
 0004           ;       0x08f48040,
 0004           ;       0x0c648040,
 0004           ;       0x0c030040,
 0004           ;       0x0a000040,
 0004           ;       0x08000040,
 0004           ;       0x04000080,
 0004           ;       0x03000100,
 0004           ;       0x00fe0600,
 0004           ;       0x0001f800,
 0004           ;       0x00000000};
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 30
 0004           ;       BYTE i = 0;
 0004 560000            mov [X+0],0
 0007                   .dbline 31
 0007           ;       M8C_EnableGInt; // Uncomment this line to enable Global Interrupts
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 34
 0009           ;       // Insert your main routine code here.
 0009           ;       
 0009           ;       Timer8_1_DisableInt();
 0009 10                push X
 000A 7C0000            xcall _Timer8_1_DisableInt
 000D                   .dbline 35
 000D           ;       Timer8_1_Start();
 000D 7C0000            xcall _Timer8_1_Start
 0010                   .dbline 37
 0010           ;       
 0010           ;       SleepTimer_1_EnableInt();
 0010 7C0000            xcall _SleepTimer_1_EnableInt
 0013                   .dbline 38
 0013           ;       SleepTimer_1_Start();
 0013 7C0000            xcall _SleepTimer_1_Start
 0016 20                pop X
 0017 80A4              xjmp L7
 0019           L6:
 0019                   .dbline 41
 0019           ;       
 0019           ;       while (TRUE)
 0019           ;       {
 0019                   .dbline 42
 0019           ;               switch (i)
 0019 5200              mov A,[X+0]
 001B 5402              mov [X+2],A
 001D 560100            mov [X+1],0
 0020 3D0100            cmp [X+1],0
 0023 B006              jnz X1
 0025 3D0200            cmp [X+2],0
 0028 A02B              jz L12
 002A           X1:
 002A 3D0100            cmp [X+1],0
 002D B006              jnz X2
 002F 3D0201            cmp [X+2],1
 0032 A035              jz L13
 0034           X2:
 0034 3D0100            cmp [X+1],0
 0037 B006              jnz X3
 0039 3D0202            cmp [X+2],2
 003C A03C              jz L14
 003E           X3:
 003E 3D0100            cmp [X+1],0
 0041 B006              jnz X4
 0043 3D0203            cmp [X+2],3
 0046 A041              jz L15
 0048           X4:
 0048 3D0100            cmp [X+1],0
 004B B006              jnz X5
 004D 3D0204            cmp [X+2],4
 0050 A048              jz L16
 0052           X5:
 0052 8053              xjmp L9
 0054           L12:
 0054                   .dbline 45
 0054           ;               {
 0054           ;                       case 0:
 0054           ;                               Matrix_UnSetRaster();
 0054 7C0000            xcall _Matrix_UnSetRaster
 0057                   .dbline 46
 0057           ;                               Matrix_DrawVector(0xf0f0, 0xf0f0f0f0);
 0057 50F0              mov A,-16
 0059 08                push A
 005A 08                push A
 005B 08                push A
 005C 08                push A
 005D 50F0              mov A,-16
 005F 08                push A
 0060 08                push A
 0061 7C0000            xcall _Matrix_DrawVector
 0064 38FA              add SP,-6
 0066                   .dbline 47
 0066           ;                               break;
 0066 8042              xjmp L10
 0068           L13:
 0068                   .dbline 50
 0068           ;                               
 0068           ;                       case 1:
 0068           ;                               Matrix_DrawVector(0xf0f0, 0x0f0f0f0f);
 0068 500F              mov A,15
 006A 08                push A
 006B 08                push A
 006C 08                push A
 006D 08                push A
 006E 50F0              mov A,-16
 0070 08                push A
 0071 08                push A
 0072 7C0000            xcall _Matrix_DrawVector
 0075 38FA              add SP,-6
 0077                   .dbline 51
 0077           ;                               break;
 0077 8031              xjmp L10
 0079           L14:
 0079                   .dbline 54
 0079           ;                               
 0079           ;                       case 2:
 0079           ;                               Matrix_DrawVector(0x0f0f, 0x0f0f0f0f);
 0079 500F              mov A,15
 007B 08                push A
 007C 08                push A
 007D 08                push A
 007E 08                push A
 007F 08                push A
 0080 08                push A
 0081 7C0000            xcall _Matrix_DrawVector
 0084 38FA              add SP,-6
 0086                   .dbline 55
 0086           ;                               break;
 0086 8022              xjmp L10
 0088           L15:
 0088                   .dbline 58
 0088           ;                               
 0088           ;                       case 3:
 0088           ;                               Matrix_DrawVector(0x0f0f, 0xf0f0f0f0);
 0088 50F0              mov A,-16
 008A 08                push A
 008B 08                push A
 008C 08                push A
 008D 08                push A
 008E 500F              mov A,15
 0090 08                push A
 0091 08                push A
 0092 7C0000            xcall _Matrix_DrawVector
 0095 38FA              add SP,-6
 0097                   .dbline 59
 0097           ;                               break;
 0097 8011              xjmp L10
 0099           L16:
 0099                   .dbline 62
 0099           ;                               
 0099           ;                       case 4:
 0099           ;                               Matrix_DrawRaster(&mamesiba);
 0099 5000              mov A,>_mamesiba
 009B 08                push A
 009C 5000              mov A,<_mamesiba
 009E 08                push A
 009F 7C0000            xcall _Matrix_DrawRaster
 00A2 38FE              add SP,-2
 00A4                   .dbline 63
 00A4           ;                               break;
 00A4 8004              xjmp L10
 00A6           L9:
 00A6                   .dbline 66
 00A6           ;                               
 00A6           ;                       default :
 00A6           ;                               i = 0;
 00A6 560000            mov [X+0],0
 00A9                   .dbline 67
 00A9           ;                               break;
 00A9           L10:
 00A9                   .dbline 70
 00A9           ;               }
 00A9           ;                       
 00A9           ;               i < 4 ? (i++) : (i = 0);
 00A9 3D0004            cmp [X+0],4
 00AC D005              jnc L18
 00AE           X6:
 00AE 7700              inc [X+0]
 00B0 8004              xjmp L19
 00B2           L18:
 00B2 560000            mov [X+0],0
 00B5           L19:
 00B5                   .dbline 71
 00B5           ;               SleepTimer_1_TickWait(64);
 00B5 10                push X
 00B6 5040              mov A,64
 00B8 7C0000            xcall _SleepTimer_1_TickWait
 00BB 20                pop X
 00BC                   .dbline 72
 00BC           ;       }
 00BC           L7:
 00BC                   .dbline 40
 00BC 8F5C              xjmp L6
 00BE           X0:
 00BE                   .dbline -2
 00BE           L5:
 00BE 38FD              add SP,-3
 00C0 20                pop X
 00C1                   .dbline 0 ; func end
 00C1 8FFF              jmp .
 00C3                   .dbsym l i 0 c
 00C3                   .dbend
