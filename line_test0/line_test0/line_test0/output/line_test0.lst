FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 9D LJMP  _TX8_1_ISR         (0157)     ljmp	_TX8_1_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 03 9E LJMP  _SleepTimer_1_ISR  (0217)     ljmp	_SleepTimer_1_ISR
0067: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
0087: 5D D0    MOV   A,REG[0xD0]        
0089: 08       PUSH  A                  
008A: 62 D0 00 MOV   REG[0xD0],0x0      
008D: 55 FA 01 MOV   [0xFA],0x1         
0090: 4F       MOV   X,SP               
0091: 5B       MOV   A,X                
0092: 01 03    ADD   A,0x3              
0094: 53 F9    MOV   [0xF9],A           
0096: 55 F8 3A MOV   [0xF8],0x3A        
0099: 50 06    MOV   A,0x6              
009B: 00       SWI                      
009C: 71 10    OR    F,0x10             
009E: 51 FC    MOV   A,[0xFC]           
00A0: 29 40    OR    A,0x40             
00A2: 60 EA    MOV   REG[0xEA],A        
00A4: 70 EF    AND   F,0xEF             
00A6: 18       POP   A                  
00A7: 60 D0    MOV   REG[0xD0],A        
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
00A9: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00AC: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
00AF: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
00B1: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00B4: 70 EF    AND   F,0xEF             
00B6: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00B9: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00BC: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00BF: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00C2: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00C5: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00C8: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00CA: 4E       SWAP  SP,A               (0410)     swap  A, SP
00CB: 62 D3 07 MOV   REG[0xD3],0x7      
00CE: 62 D0 00 MOV   REG[0xD0],0x0      
00D1: 62 D5 00 MOV   REG[0xD5],0x0      
00D4: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D7: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00D9: 7C 03 2F LCALL 0x032F             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DC: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00DF: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00E1: 57 28    MOV   X,0x28             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00E3: 08       PUSH  A                  (0486)     push  A
00E4: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00E5: 53 0E    MOV   [__r0],A           (0488)     mov   [__r0], A
00E7: 18       POP   A                  (0489)     pop   A
00E8: 75       INC   X                  (0490)     inc   X
00E9: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00EB: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00EC: 4B       SWAP  A,X                (0493)     swap  A, X
00ED: 51 0E    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00EF: 80 04    JMP   0x00F4             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00F1: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00F2: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00F4: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00F7: 08       PUSH  A                  (0521)     push  A
00F8: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00F9: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00FB: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00FC: A0 4B    JZ    0x0148             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00FE: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00FF: 75       INC   X                  (0527)     inc   X                            ; pXIData++
0100: 09 00    ADC   A,0x0              (0528)     adc   A, 0
0102: 08       PUSH  A                  (0529)     push  A
0103: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
0104: 53 0E    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
0106: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
0107: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
0108: 09 00    ADC   A,0x0              (0534)     adc   A, 0
010A: 08       PUSH  A                  (0535)     push  A
010B: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
010C: A0 1C    JZ    0x0129             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
010E: 53 0D    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
0110: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
0111: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0112: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0114: 08       PUSH  A                  (0549)     push  A
0115: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
0116: 3F 0E    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
0118: 47 0E FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
011B: B0 06    JNZ   0x0122             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
011D: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011F: 74       INC   A                  (0555)     inc   A
0120: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0122: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0123: 7A 0D    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0125: BF EB    JNZ   0x0111             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0127: 8F C9    JMP   0x00F1             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0129: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
012A: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
012B: 09 00    ADC   A,0x0              (0566)     adc   A, 0
012D: 08       PUSH  A                  (0567)     push  A
012E: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
012F: 53 0D    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
0131: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0133: 3F 0E    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0135: 47 0E FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0138: B0 08    JNZ   0x0141             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
013A: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
013C: 74       INC   A                  (0580)     inc   A
013D: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
013F: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
0141: 7A 0D    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0143: BF EF    JNZ   0x0133             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0145: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0146: 8F AA    JMP   0x00F1             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0148: 18       POP   A                  (0590)     pop   A                            ; balance stack
0149: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
014B: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
014E: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
0150: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0153: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0155: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0158: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
015B: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
015D: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0160: 7C 06 39 LCALL CLK_Invert|CLK_GetState|__UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0163: 8F FF    JMP   0x0163             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0165: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0167: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
022A: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_line_test0_Bank1
                                        (0019) export LoadConfigTBL_line_test0_Bank0
                                        (0020) export LoadConfigTBL_line_test0_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_line_test0_Bank0:
                                        (0023) ;  Instance name CLK, User Module LED
                                        (0024) ;  Instance name LCD_1, User Module LCD
                                        (0025) ;  Instance name SAR6_1, User Module SAR6
                                        (0026) ;       Instance name SAR6_1, Block Name SA(ASC10)
                                        (0027) 	db		80h, 00h		;SAR6_1_CR0(ASC10CR0)
                                        (0028) 	db		81h, 5fh		;SAR6_1_CR1(ASC10CR1)
                                        (0029) 	db		82h, 60h		;SAR6_1_CR2(ASC10CR2)
                                        (0030) 	db		83h, 08h		;SAR6_1_CR3(ASC10CR3)
                                        (0031) ;  Instance name SI, User Module LED
                                        (0032) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0033) ;  Instance name TX8_1, User Module TX8
                                        (0034) ;       Instance name TX8_1, Block Name TX8(DCB02)
                                        (0035) 	db		2bh, 00h		;TX8_1_CONTROL_REG  (DCB02CR0)
                                        (0036) 	db		29h, 00h		;TX8_1_TX_BUFFER_REG(DCB02DR1)
                                        (0037) 	db		2ah, 00h		;TX8_1_(DCB02DR2)
                                        (0038) ;  Global Register values Bank 0
                                        (0039) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0040) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0041) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0042) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0043) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0044) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0045) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0046) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0047) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0048) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0049) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0050) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0051) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0052) 	db		b6h, 40h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0053) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0054) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0055) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0056) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0057) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0058) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0059) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0060) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0061) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0062) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0063) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0064) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0065) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0066) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0067) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0068) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0069) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0070) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0071) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0072) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0073) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0074) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0075) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0076) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0077) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0078) 	db		ffh
                                        (0079) LoadConfigTBL_line_test0_Bank1:
                                        (0080) ;  Instance name CLK, User Module LED
                                        (0081) ;  Instance name LCD_1, User Module LCD
                                        (0082) ;  Instance name SAR6_1, User Module SAR6
                                        (0083) ;       Instance name SAR6_1, Block Name SA(ASC10)
                                        (0084) ;  Instance name SI, User Module LED
                                        (0085) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0086) ;  Instance name TX8_1, User Module TX8
                                        (0087) ;       Instance name TX8_1, Block Name TX8(DCB02)
                                        (0088) 	db		28h, 0dh		;TX8_1_FUNC_REG     (DCB02FN)
                                        (0089) 	db		29h, 01h		;TX8_1_INPUT_REG    (DCB02IN)
                                        (0090) 	db		2ah, 47h		;TX8_1_OUTPUT_REG   (DCB02OU)
                                        (0091) ;  Global Register values Bank 1
                                        (0092) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0093) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0094) 	db		60h, 01h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0095) 	db		62h, 01h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0096) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0097) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0098) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0099) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0100) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0101) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0102) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0103) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0104) 	db		e1h, 44h		; OscillatorControl_1 register (OSC_CR1)
                                        (0105) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0106) 	db		dfh, 3eh		; OscillatorControl_3 register (OSC_CR3)
                                        (0107) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0108) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0109) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0110) 	db		ffh
                                        (0111) AREA psoc_config(rom, rel)
                                        (0112) LoadConfigTBL_line_test0_Ordered:
                                        (0113) ;  Ordered Global Register values
                                        (0114) 	M8C_SetBank0
022C: 62 00 00 MOV   REG[0x0],0x0       (0115) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
022F: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
0231: 62 00 7F MOV   REG[0x0],0x7F      (0117) 	mov	reg[00h], 7fh		; Port_0_DriveMode_0 register (PRT0DM0)
0234: 62 01 80 MOV   REG[0x1],0x80      (0118) 	mov	reg[01h], 80h		; Port_0_DriveMode_1 register (PRT0DM1)
0237: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
0239: 62 03 80 MOV   REG[0x3],0x80      (0120) 	mov	reg[03h], 80h		; Port_0_DriveMode_2 register (PRT0DM2)
023C: 62 02 00 MOV   REG[0x2],0x0       (0121) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
023F: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
0241: 62 02 00 MOV   REG[0x2],0x0       (0123) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0244: 62 03 00 MOV   REG[0x3],0x0       (0124) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0247: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
0249: 62 01 00 MOV   REG[0x1],0x0       (0126) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
024C: 62 04 00 MOV   REG[0x4],0x0       (0127) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
024F: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
0251: 62 04 A8 MOV   REG[0x4],0xA8      (0129) 	mov	reg[04h], a8h		; Port_1_DriveMode_0 register (PRT1DM0)
0254: 62 05 57 MOV   REG[0x5],0x57      (0130) 	mov	reg[05h], 57h		; Port_1_DriveMode_1 register (PRT1DM1)
0257: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
0259: 62 07 54 MOV   REG[0x7],0x54      (0132) 	mov	reg[07h], 54h		; Port_1_DriveMode_2 register (PRT1DM2)
025C: 62 06 08 MOV   REG[0x6],0x8       (0133) 	mov	reg[06h], 08h		; Port_1_GlobalSelect register (PRT1GS)
025F: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
0261: 62 06 00 MOV   REG[0x6],0x0       (0135) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0264: 62 07 00 MOV   REG[0x7],0x0       (0136) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0267: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
0269: 62 05 00 MOV   REG[0x5],0x0       (0138) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
026C: 62 08 00 MOV   REG[0x8],0x0       (0139) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
026F: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0271: 62 08 00 MOV   REG[0x8],0x0       (0141) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0274: 62 09 FF MOV   REG[0x9],0xFF      (0142) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0277: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
0279: 62 0B FF MOV   REG[0xB],0xFF      (0144) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
027C: 62 0A 00 MOV   REG[0xA],0x0       (0145) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
027F: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0281: 62 0A 00 MOV   REG[0xA],0x0       (0147) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0284: 62 0B 00 MOV   REG[0xB],0x0       (0148) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0287: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
0289: 62 09 00 MOV   REG[0x9],0x0       (0150) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
028C: 62 0C 00 MOV   REG[0xC],0x0       (0151) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
028F: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
0291: 62 0C 00 MOV   REG[0xC],0x0       (0153) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0294: 62 0D 00 MOV   REG[0xD],0x0       (0154) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0297: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
0299: 62 0F 00 MOV   REG[0xF],0x0       (0156) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
029C: 62 0E 00 MOV   REG[0xE],0x0       (0157) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
029F: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
02A1: 62 0E 00 MOV   REG[0xE],0x0       (0159) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02A4: 62 0F 00 MOV   REG[0xF],0x0       (0160) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02A7: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
02A9: 62 0D 00 MOV   REG[0xD],0x0       (0162) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02AC: 62 10 00 MOV   REG[0x10],0x0      (0163) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02AF: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
02B1: 62 10 00 MOV   REG[0x10],0x0      (0165) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02B4: 62 11 00 MOV   REG[0x11],0x0      (0166) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02B7: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
02B9: 62 13 00 MOV   REG[0x13],0x0      (0168) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02BC: 62 12 00 MOV   REG[0x12],0x0      (0169) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02BF: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
02C1: 62 12 00 MOV   REG[0x12],0x0      (0171) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02C4: 62 13 00 MOV   REG[0x13],0x0      (0172) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02C7: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
02C9: 62 11 00 MOV   REG[0x11],0x0      (0174) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02CC: 62 14 00 MOV   REG[0x14],0x0      (0175) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02CF: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
02D1: 62 14 00 MOV   REG[0x14],0x0      (0177) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02D4: 62 15 00 MOV   REG[0x15],0x0      (0178) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02D7: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02D9: 62 17 00 MOV   REG[0x17],0x0      (0180) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02DC: 62 16 00 MOV   REG[0x16],0x0      (0181) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02DF: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02E1: 62 16 00 MOV   REG[0x16],0x0      (0183) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02E4: 62 17 00 MOV   REG[0x17],0x0      (0184) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02E7: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
02E9: 62 15 00 MOV   REG[0x15],0x0      (0186) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02EC: 62 18 00 MOV   REG[0x18],0x0      (0187) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02EF: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
02F1: 62 18 00 MOV   REG[0x18],0x0      (0189) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02F4: 62 19 00 MOV   REG[0x19],0x0      (0190) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02F7: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
02F9: 62 1B 00 MOV   REG[0x1B],0x0      (0192) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02FC: 62 1A 00 MOV   REG[0x1A],0x0      (0193) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
02FF: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0301: 62 1A 00 MOV   REG[0x1A],0x0      (0195) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0304: 62 1B 00 MOV   REG[0x1B],0x0      (0196) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0307: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
0309: 62 19 00 MOV   REG[0x19],0x0      (0198) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
030C: 62 1C 00 MOV   REG[0x1C],0x0      (0199) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
030F: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
0311: 62 1C 00 MOV   REG[0x1C],0x0      (0201) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0314: 62 1D 00 MOV   REG[0x1D],0x0      (0202) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0317: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
0319: 62 1F 00 MOV   REG[0x1F],0x0      (0204) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
031C: 62 1E 00 MOV   REG[0x1E],0x0      (0205) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
031F: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
0321: 62 1E 00 MOV   REG[0x1E],0x0      (0207) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0324: 62 1F 00 MOV   REG[0x1F],0x0      (0208) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0327: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
0329: 62 1D 00 MOV   REG[0x1D],0x0      (0210) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
032C: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
032E: 7F       RET                      (0212) 	ret
                                        (0213) 
                                        (0214) 
                                        (0215) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_line_test0
                                        (0026) export _LoadConfig_line_test0
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_1_Data_SHADE
                                        (0034) export _Port_1_Data_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
032F: 55 04 00 MOV   [0x4],0x0          (0067) 	mov		[Port_0_Data_SHADE], 0h
0332: 55 06 7F MOV   [0x6],0x7F         (0068) 	mov		[Port_0_DriveMode_0_SHADE], 7fh
0335: 55 07 80 MOV   [0x7],0x80         (0069) 	mov		[Port_0_DriveMode_1_SHADE], 80h
0338: 55 05 00 MOV   [0x5],0x0          (0070) 	mov		[Port_1_Data_SHADE], 0h
                                        (0071) 
033B: 7C 03 42 LCALL 0x0342             (0072) 	lcall	LoadConfig_line_test0
033E: 7C 02 2A LCALL 0x022A             (0073) 	lcall	LoadConfigTBL_line_test0_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0341: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration line_test0
                                        (0081) ;
                                        (0082) ;    Load configuration registers for line_test0.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_line_test0:
                                        (0099)  LoadConfig_line_test0:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0342: 10       PUSH  X                  (0102) 	push	x
0343: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0345: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0347: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0348: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_line_test0_Bank0
034A: 57 A0    MOV   X,0xA0             (0108)     mov     X, <LoadConfigTBL_line_test0_Bank0
034C: 7C 03 5D LCALL 0x035D             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
034F: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0351: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0352: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_line_test0_Bank1
0354: 57 FD    MOV   X,0xFD             (0115)     mov     X, <LoadConfigTBL_line_test0_Bank1
0356: 7C 03 5D LCALL 0x035D             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0359: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
035B: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
035C: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
035D: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
035F: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0360: 08       PUSH  A                  (0146)     push    A
0361: 4F       MOV   X,SP               (0147)     mov     X, SP
0362: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0365: D0 04    JNC   0x036A             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0367: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
036A: 18       POP   A                  (0152)     pop     A
036B: 20       POP   X                  (0153)     pop     X
036C: 70 EF    AND   F,0xEF             
036E: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0371: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
0372: 08       PUSH  A                  (0159)     push    A
0373: 28       ROMX                     (0160)     romx                            ; Load register address from table
0374: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0376: A0 1F    JZ    0x0396             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0378: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0379: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
037C: A0 03    JZ    0x0380             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
037E: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0380: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
0382: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
0383: 20       POP   X                  (0170)     pop     X
0384: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
0385: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0387: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0388: 08       PUSH  A                  (0174)     push    A
0389: 28       ROMX                     (0175)     romx                            ; load config data from the table
038A: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
038B: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
038D: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
038F: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0390: 20       POP   X                  (0180)     pop     X
0391: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
0392: 09 00    ADC   A,0x0              (0182)     adc     A, 0
0394: 8F D7    JMP   0x036C             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
0396: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
0398: 70 3F    AND   F,0x3F             
039A: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
039C: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_0_Data_SHADE:
                                        (0195) Port_0_Data_SHADE:	BLK	1
                                        (0196) _Port_1_Data_SHADE:
                                        (0197) Port_1_Data_SHADE:	BLK	1
                                        (0198) _Port_0_DriveMode_0_SHADE:
                                        (0199) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_0_DriveMode_1_SHADE:
                                        (0201) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\tx8_1int.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TX8_1INT.asm
                                        (0004) ;;   Version: 3.50, Updated on 2013/5/19 at 10:44:45
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  TX8 Interrupt Service Rountine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "TX8_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _TX8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _TX8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _TX8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
039D: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file TX8_1INT.asm
FILE: lib\sleeptimer_1int.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimer_1INT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2013/5/19 at 10:44:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer_1.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_1_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_1_fTick
                                        (0024) export _SleepTimer_1_fTick
                                        (0025) export  SleepTimer_1_bTimerValue
                                        (0026) export _SleepTimer_1_bTimerValue
                                        (0027) export  SleepTimer_1_bCountDown
                                        (0028) export _SleepTimer_1_bCountDown
                                        (0029) export  SleepTimer_1_TickCount
                                        (0030) export _SleepTimer_1_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_1_fTick:
                                        (0038) _SleepTimer_1_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_1_bTimerValue:
                                        (0041) _SleepTimer_1_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_1_bCountDown:
                                        (0044) _SleepTimer_1_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_1_TickCount:
                                        (0047) _SleepTimer_1_TickCount:    BLK  SleepTimer_1_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_1_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_1_ISR:
                                        (0090) 
039E: 2E 00 01 OR    [0x0],0x1          (0091)    or   [SleepTimer_1_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
03A1: 47 02 FF TST   [0x2],0xFF         (0094)    tst  [SleepTimer_1_bCountDown],0xFF
03A4: A0 03    JZ    0x03A8             (0095)    jz   .DoTimer
03A6: 7A 02    DEC   [0x2]              (0096)    dec  [SleepTimer_1_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
03A8: 47 01 FF TST   [0x1],0xFF         (0099)    tst  [SleepTimer_1_bTimerValue],0xFF
03AB: A0 03    JZ    0x03AF             (0100)    jz   .IncBigCounter
03AD: 7A 01    DEC   [0x1]              (0101)    dec  [SleepTimer_1_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_1_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_1_TickCount+3]
                                        (0106)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_1_TickCount+2]
                                        (0109)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_1_TICK_CNTR_SIZE & (0x04|0x02))
                                        (0113)    inc  [SleepTimer_1_TickCount+1]
                                        (0114)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
03AF: 76 03    INC   [0x3]              (0117)    inc  [SleepTimer_1_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_1_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
03B1: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimer_1INT.asm
                                        (0150) 
FILE: lib\si.asm                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SI.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "SI.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _SI_Start
                                        (0027) export  SI_Start
                                        (0028) 
                                        (0029) export _SI_Stop
                                        (0030) export  SI_Stop
                                        (0031) 
                                        (0032) export _SI_On
                                        (0033) export  SI_On
                                        (0034) 
                                        (0035) export _SI_Off
                                        (0036) export  SI_Off
                                        (0037) 
                                        (0038) export _SI_Switch
                                        (0039) export  SI_Switch
                                        (0040) 
                                        (0041) export _SI_Invert
                                        (0042) export  SI_Invert
                                        (0043) 
                                        (0044) export _SI_GetState
                                        (0045) export  SI_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: SI_Start(void)
                                        (0054) ;  FUNCTION NAME: SI_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: SI_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _SI_On:
                                        (0079)  SI_On:
03B2: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
03B4: 80 03    JMP   _SI_Switch         (0081)    jmp  SI_Switch 
                                        (0082) 
                                        (0083) _SI_Start:
                                        (0084)  SI_Start:
                                        (0085) _SI_Stop:
                                        (0086)  SI_Stop:
                                        (0087) _SI_Off:
                                        (0088)  SI_Off:
03B6: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
03B8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _SI_Switch:
                                        (0092)  SI_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
03BB: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
03BD: A0 06    JZ    0x03C4             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
03BF: 2E 05 20 OR    [0x5],0x20         (0102)    or   [Port_1_Data_SHADE],SI_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~SI_PinMask
                                        (0105) ENDIF
03C2: 80 04    JMP   0x03C7             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
03C4: 26 05 DF AND   [0x5],0xDF         (0110)    and  [Port_1_Data_SHADE],~SI_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],SI_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
03C7: 51 05    MOV   A,[0x5]            (0116)    mov  A,[Port_1_Data_SHADE]
03C9: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[SI_PortDR],A
03CB: 70 3F    AND   F,0x3F             
03CD: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
03CF: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: SI_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _SI_Invert:
                                        (0144)  SI_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
                                        (0149)    xor  [Port_1_Data_SHADE],SI_PinMask
                                        (0150)    mov  A,[Port_1_Data_SHADE]
                                        (0151)    mov  reg[SI_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: SI_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _SI_GetState:
                                        (0177)  SI_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
                                        (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
                                        (0188)    and   A,SI_PinMask                  ; Mask off the trash
                                        (0189)    jz    .End_LED_GS                   ; If zero, we're done
                                        (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0195)    ret
                                        (0196) .ENDSECTION
FILE: lib\sar6_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SAR6_1.asm
                                        (0004) ;;  Version: 1.5, Updated on 2013/5/19 at 10:44:11
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SAR6 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SAR6_1.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  SAR6_1_Start
                                        (0021) export _SAR6_1_Start
                                        (0022) export  SAR6_1_SetPower
                                        (0023) export _SAR6_1_SetPower
                                        (0024) export  SAR6_1_cGetSample
                                        (0025) export _SAR6_1_cGetSample
                                        (0026) export  SAR6_1_Stop
                                        (0027) export _SAR6_1_Stop
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ; WARNING! These exports will be removed in
                                        (0032) ; a future release.
                                        (0033) ;-----------------------------------------------
                                        (0034) export  SAR6_1_GetSample
                                        (0035) export _SAR6_1_GetSample
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;-----------------------------------------------
                                        (0040) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0041) 
                                        (0042) AREA UserModules (ROM, REL)
                                        (0043) 
                                        (0044) .SECTION
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: SAR6_1_Start
                                        (0047) ;  FUNCTION NAME: SAR6_1_SetPower
                                        (0048) ;
                                        (0049) ;  DESCRIPTION:
                                        (0050) ;     Applies power setting to the module's SoCblocs
                                        (0051) ;
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;
                                        (0054) ;  ARGUMENTS:
                                        (0055) ;    A   contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0056) ;
                                        (0057) ;  RETURNS:  NA
                                        (0058) ;
                                        (0059) ;  SIDE EFFECTS:
                                        (0060) ;    The A and X registers may be modified by this or future implementations
                                        (0061) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0062) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0063) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0064) ;    functions.
                                        (0065) ;
                                        (0066)  SAR6_1_Start:
                                        (0067) _SAR6_1_Start:
                                        (0068)     ;; Initialization-time only code goes here.
                                        (0069) 
                                        (0070)  SAR6_1_SetPower:
                                        (0071) _SAR6_1_SetPower:
                                        (0072)     RAM_PROLOGUE RAM_USE_CLASS_2
03D0: 21 03    AND   A,0x3              (0073)     and   A, bPWRMASK       ; trim to bits of interest
03D2: 4F       MOV   X,SP               (0074)     mov   X, SP             ; Set stack frame pointer
03D3: 08       PUSH  A                  (0075)     push  A
                                        (0076) 
                                        (0077)     ;; read CR3 register, modify power bits & write back
03D4: 5D 83    MOV   A,REG[0x83]        (0078)     mov   A, reg[SAR6_1_CR3]
03D6: 21 FC    AND   A,0xFC             (0079)     and   A, ~bPWRMASK      ; clear old setting
03D8: 2B 00    OR    A,[X+0]            (0080)     or    A, [X]            ; set power in register image
03DA: 60 83    MOV   REG[0x83],A        (0081)     mov   reg[SAR6_1_CR3], A
03DC: 18       POP   A                  (0082)     pop   A
03DD: 70 3F    AND   F,0x3F             
03DF: 71 C0    OR    F,0xC0             
                                        (0083)     RAM_EPILOGUE RAM_USE_CLASS_2
03E1: 7F       RET                      (0084)     ret
                                        (0085) .ENDSECTION
                                        (0086) 
                                        (0087) .SECTION
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;  FUNCTION NAME: SAR6_1_cGetSample
                                        (0090) ;
                                        (0091) ;  DESCRIPTION:
                                        (0092) ;    Utilize SAR acceleration hardware to guide a binary search
                                        (0093) ;    until the output of the 6-bit DAC output is within 1 bit of the
                                        (0094) ;    input voltage.
                                        (0095) ;
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;
                                        (0100) ;  RETURNS:
                                        (0101) ;    A   2's Complement Value in [-32..+31]
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110) PSOC_ANALOG_COL_MASK:  equ 0Ch ; mask for column bits in analog reg address
                                        (0111) PSOC_SAR_CTRL:         equ 68h ;
                                        (0112) PSOC_SAR_MAGNITUDE:    equ 1Fh ;
                                        (0113) PSOC_SAR_SIGN:         equ 20h ;
                                        (0114) 
                                        (0115)  SAR6_1_cGetSample:
                                        (0116) _SAR6_1_cGetSample:
                                        (0117)  SAR6_1_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0118) _SAR6_1_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0119)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0120) 
                                        (0121)     ; These three lines of code are VERY important to ensure proper SAR6 operation.
                                        (0122)     ; 1) The first line will make sure the CPU is stalled when a value is written
                                        (0123)     ;    to the analog switch cap register.
                                        (0124)     ; 2) Write the inital value to CR0
                                        (0125)     ; 3) Setup the Analog Synchronization Control Register so that the next
                                        (0126)     ;    six "or" commands work with the SAR hardware to perform a conversion.
                                        (0127) 
03E2: 62 65 01 MOV   REG[0x65],0x1      (0128)     mov  reg[ASY_CR],ASY_CR_SYNCEN
03E5: 62 80 A0 MOV   REG[0x80],0xA0     (0129)     mov  reg[SAR6_1_CR0], SAR6_1_CR0_INIT
03E8: 62 65 68 MOV   REG[0x65],0x68     (0130)     mov  reg[ASY_CR], PSOC_SAR_CTRL | SAR6_1_SCCOL_MASK
                                        (0131) 
                                        (0132) 
                                        (0133)     ;; Drive the binary search engine with read/modify/write instructions.
                                        (0134)     ;; NOTE: each of the next 6 instructions stalls the CPU consuming one
                                        (0135)     ;; complete analog column clock cycle (input clock divided by 4).
03EB: 43 80 00 OR    REG[0x80],0x0      (0136)     or   reg[SAR6_1_CR0], 0   ; set sign & try MSB of magnitude
03EE: 43 80 00 OR    REG[0x80],0x0      (0137)     or   reg[SAR6_1_CR0], 0   ; set MSB of magnitude and try next lower
03F1: 43 80 00 OR    REG[0x80],0x0      (0138)     or   reg[SAR6_1_CR0], 0   ;                      ... and next ...
03F4: 43 80 00 OR    REG[0x80],0x0      (0139)     or   reg[SAR6_1_CR0], 0   ;                      ... and next ...
03F7: 43 80 00 OR    REG[0x80],0x0      (0140)     or   reg[SAR6_1_CR0], 0   ;                      ... and try LSB
03FA: 43 80 00 OR    REG[0x80],0x0      (0141)     or   reg[SAR6_1_CR0], 0   ; and, finally, set LSB of magnitude.
                                        (0142) 
                                        (0143)     ;; Conversion is done, translate the result to 1-byte 2's complement form.
                                        (0144)     ;; Negative and positive values are handled differently. To minimize
                                        (0145)     ;; aperature jitter, the execution cycles consumed in each case have been
                                        (0146)     ;; equalized. The cost of this is 13 cycles for positive values; 5 cycles
                                        (0147)     ;; for negative values.
03FD: 5D 80    MOV   A,REG[0x80]        (0148)     mov  A, reg[SAR6_1_CR0]
03FF: 21 1F    AND   A,0x1F             (0149)     and  A, PSOC_SAR_MAGNITUDE
0401: 49 80 20 TST   REG[0x80],0x20     (0150)     tst  reg[SAR6_1_CR0], PSOC_SAR_SIGN
0404: B0 03    JNZ   0x0408             (0151)     jnz  GSNegative  ; Result is zero => sign was 1 (negative).
0406: 40       NOP                      (0152)     nop              ; Delay to equalize number of required cycles.
                                        (0153)     RAM_EPILOGUE RAM_USE_CLASS_1
0407: 7F       RET                      (0154)     ret
                                        (0155) GSNegative:
0408: 73       CPL   A                  (0156)     cpl  A           ; Take 1's complement of the magnitude
                                        (0157)     RAM_EPILOGUE RAM_USE_CLASS_1
0409: 7F       RET                      (0158)     ret
                                        (0159) .ENDSECTION
                                        (0160) 
                                        (0161) .SECTION
                                        (0162) ;-----------------------------------------------------------------------------
                                        (0163) ;  FUNCTION NAME: SAR6_1_Stop
                                        (0164) ;
                                        (0165) ;  DESCRIPTION:
                                        (0166) ;    Removes power from the switch cap block
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:  None
                                        (0171) ;
                                        (0172) ;  RETURNS: NA
                                        (0173) ;
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  SAR6_1_Stop:
                                        (0182) _SAR6_1_Stop:
                                        (0183)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)     and reg[SAR6_1_CR3], ~bPWRMASK
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0186)     ret
                                        (0187) .ENDSECTION
                                        (0188) 
                                        (0189) ; End of File SAR6_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT0DR
                                        (0135) LCD_1_PortMode0:      equ    PRT0DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT0DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
040A: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
040B: 10       PUSH  X                  (0209)     push  X
040C: 28       ROMX                     (0210)     romx                               ; Get character from ROM
040D: B0 04    JNZ   0x0412             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
040F: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0410: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0411: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0412: 90 2B    CALL  LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_PrHexInt|_LCD_1_PrString|_LCD_1_Write_Data|LCD_1_WriteData(0218)     call  LCD_1_WriteData              ; Write data to LCD
0414: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0415: 18       POP   A                  (0220)     pop   A
0416: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0417: DF F2    JNC   _LCD_1_PrCString|_SAR6_1_Stop|LCD_1_PrCString(0222)     jnc   .Loop_PrCString
0419: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
041A: 8F EF    JMP   _LCD_1_PrCString|_SAR6_1_Stop|LCD_1_PrCString(0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
042C: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
042D: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
042E: 67       ASR   A                  (0262)     asr   A
042F: 67       ASR   A                  (0263)     asr   A
0430: 67       ASR   A                  (0264)     asr   A
0431: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0433: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
0435: 90 08    CALL  LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_PrHexInt|_LCD_1_PrString|_LCD_1_Write_Data|LCD_1_WriteData(0267)     call  LCD_1_WriteData              ; Write data to screen
0437: 18       POP   A                  (0268)     pop   A                            ; Restore value
0438: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
043A: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
043C: 90 01    CALL  LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_PrHexInt|_LCD_1_PrString|_LCD_1_Write_Data|LCD_1_WriteData(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
043E: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0305)     swap  A,X
                                        (0306)     call  LCD_1_PrHexByte              ; Print MSB
                                        (0307)     mov   A,X                          ; Move LSB into position
                                        (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
                                        (0346)     mov   A,[X]                        ; Get value pointed to by X
                                        (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
                                        (0349)     call  LCD_1_WriteData              ; Write data to screen
                                        (0350)     inc   X                            ; Advance pointer to next character
                                        (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
043F: 90 65    CALL  0x04A6             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
0441: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0442: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0443: 67       ASR   A                  (0390)     asr   A
0444: 67       ASR   A                  (0391)     asr   A
0445: 67       ASR   A                  (0392)     asr   A
0446: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0448: 90 3B    CALL  0x0485             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
044A: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
044B: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
044D: 40       NOP                      (0397)     nop
044E: 40       NOP                      (0398)     nop
044F: 40       NOP                      (0399)     nop
0450: 90 33    CALL  0x0485             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0452: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0453: 90 51    CALL  0x04A6             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0455: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0456: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0457: 67       ASR   A                  (0436)     asr   A
0458: 67       ASR   A                  (0437)     asr   A
0459: 67       ASR   A                  (0438)     asr   A
045A: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
045C: 90 09    CALL  0x0467             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
045E: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
045F: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0461: 40       NOP                      (0443)     nop
0462: 40       NOP                      (0444)     nop
0463: 40       NOP                      (0445)     nop
0464: 90 01    CALL  0x0467             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0466: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0467: 08       PUSH  A                  (0477)     push  A
0468: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_0_Data_SHADE           ; Set CUR_PP to LCD variable address
046B: 26 04 80 AND   [0x4],0x80         (0479)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
046E: 51 04    MOV   A,[0x4]            (0480)     mov   A,[Port_0_Data_SHADE]
0470: 60 00    MOV   REG[0x0],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
0472: 18       POP   A                  (0483)     pop   A
0473: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0475: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0477: 2A 04    OR    A,[0x4]            (0486)     or    A,[Port_0_Data_SHADE]                  ; OR in bit 7 just
0479: 60 00    MOV   REG[0x0],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
047B: 53 04    MOV   [0x4],A            (0488)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
047D: 40       NOP                      (0489)     nop
047E: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
0480: 53 04    MOV   [0x4],A            (0491)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
0482: 60 00    MOV   REG[0x0],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0484: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0485: 08       PUSH  A                  (0523)     push  A
0486: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_0_Data_SHADE          ; Set CUR_PP to LCD variable address
0489: 26 04 80 AND   [0x4],0x80         (0525)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
048C: 2E 04 20 OR    [0x4],0x20         (0526)     or    [Port_0_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
048F: 51 04    MOV   A,[0x4]            (0527)     mov   A,[Port_0_Data_SHADE]
0491: 60 00    MOV   REG[0x0],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
0493: 18       POP   A                  (0530)     pop   A
0494: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
0496: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
0498: 2A 04    OR    A,[0x4]            (0533)     or    A,[Port_0_Data_SHADE]                       ; Keep shadow in sync
049A: 60 00    MOV   REG[0x0],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
049C: 53 04    MOV   [0x4],A            (0535)     mov   [Port_0_Data_SHADE],A                       ; Keep shadow in sync
049E: 40       NOP                      (0536)     NOP
049F: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
04A1: 53 04    MOV   [0x4],A            (0538)     mov   [Port_0_Data_SHADE],A                       ; keep shadow in sync
04A3: 60 00    MOV   REG[0x0],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04A5: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04A6: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
04A7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                ; Set CUR_PP to LCD variable address
04AA: 26 04 80 AND   [0x4],0x80         (0573)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
04AD: 51 04    MOV   A,[0x4]            (0574)     mov   A,[Port_0_Data_SHADE]
04AF: 60 00    MOV   REG[0x0],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
04B1: 26 06 F0 AND   [0x6],0xF0         (0577)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
04B4: 51 06    MOV   A,[0x6]            (0578)     mov   A,[Port_0_DriveMode_0_SHADE]
04B6: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
04B8: 60 00    MOV   REG[0x0],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
04BA: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
04BC: 2E 04 40 OR    [0x4],0x40         (0583)     or    [Port_0_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
04BF: 51 04    MOV   A,[0x4]            (0584)     mov   A,[Port_0_Data_SHADE]
04C1: 60 00    MOV   REG[0x0],A         (0585)     mov   reg[LCD_1_Port],A
04C3: 40       NOP                      (0586)     NOP
                                        (0587) 
04C4: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
04C5: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
04C7: 2E 04 50 OR    [0x4],0x50         (0592)     or    [Port_0_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
04CA: 51 04    MOV   A,[0x4]            (0593)     mov   A,[Port_0_Data_SHADE]
04CC: 60 00    MOV   REG[0x0],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
04CE: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
04CF: 40       NOP                      (0597)     nop
04D0: 5D 00    MOV   A,REG[0x0]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
04D2: 08       PUSH  A                  (0610)     push  A
04D3: 26 04 C0 AND   [0x4],0xC0         (0611)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
04D6: 51 04    MOV   A,[0x4]            (0612)     mov   A,[Port_0_Data_SHADE]
04D8: 60 00    MOV   REG[0x0],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
04DA: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
04DB: 40       NOP                      (0616)     nop                                    ; fastest PSoC
04DC: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
04DD: 2E 04 50 OR    [0x4],0x50         (0619)     or    [Port_0_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
04E0: 51 04    MOV   A,[0x4]            (0620)     mov   A,[Port_0_Data_SHADE]
04E2: 60 00    MOV   REG[0x0],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
04E4: 40       NOP                      (0623)     nop
04E5: 40       NOP                      (0624)     nop
                                        (0625) 
04E6: 26 04 C0 AND   [0x4],0xC0         (0626)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
04E9: 51 04    MOV   A,[0x4]            (0627)     mov   A,[Port_0_Data_SHADE]
04EB: 60 00    MOV   REG[0x0],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
04ED: 18       POP   A                  (0630)     pop   A
04EE: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
04F0: A0 04    JZ    0x04F5             (0633)     jz    .UNLOCK
04F2: 79       DEC   X                  (0634)     dec   X
04F3: BF D3    JNZ   0x04C7             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
04F5: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
04F6: 2E 06 7F OR    [0x6],0x7F         (0639)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
04F9: 51 06    MOV   A,[0x6]            (0640)     mov   A,[Port_0_DriveMode_0_SHADE]
04FB: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
04FD: 60 00    MOV   REG[0x0],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
04FF: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0501: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0502: 7F       RET                      (0646)     ret
0503: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0506: 26 06 80 AND   [0x6],0x80         (0685)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
0509: 2E 06 7F OR    [0x6],0x7F         (0686)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
050C: 26 07 80 AND   [0x7],0x80         (0687)     and   [Port_0_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
050F: 51 06    MOV   A,[0x6]            (0689)     mov   A,[Port_0_DriveMode_0_SHADE]
0511: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0513: 60 00    MOV   REG[0x0],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0515: 51 07    MOV   A,[0x7]            (0692)     mov   A,[Port_0_DriveMode_1_SHADE]
0517: 60 01    MOV   REG[0x1],A         (0693)     mov   reg[LCD_1_PortMode1],A
0519: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
051B: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
051D: 90 67    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
051F: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0521: 90 63    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0523: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0525: 9F 40    CALL  0x0467             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
0527: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0529: 90 5B    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
052B: 50 03    MOV   A,0x3              (0707)     mov   A,03h
052D: 9F 38    CALL  0x0467             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
052F: 90 63    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
0531: 90 61    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0533: 90 5F    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
0535: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0537: 9F 2E    CALL  0x0467             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
0539: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
053B: 90 49    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
053D: 50 02    MOV   A,0x2              (0720)     mov   A,02h
053F: 9F 26    CALL  0x0467             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
0541: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0543: 90 41    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
0545: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0547: 9F 0A    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
0549: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
054B: 90 39    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
054D: 50 01    MOV   A,0x1              (0731)     mov   A,01h
054F: 9F 02    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
0551: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0553: 90 31    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
0555: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0557: 9E FA    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
0559: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
055B: 9E F6    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
055D: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
055F: 9E F2    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0561: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0563: 9E EE    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0565: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
0567: 9E EA    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
0569: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
056B: 9E E6    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
056D: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
056F: 90 15    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0571: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0576: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0578: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0579: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
057B: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
057C: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
057E: 20       POP   X                  (0795)     pop   X
                                        (0796) 
057F: 9E D2    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
0581: 70 3F    AND   F,0x3F             
0583: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0585: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0586: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0588: 78       DEC   A                  (0828)     dec   A
0589: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
058B: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0594: 08       PUSH  A                  (0871)     push  A
0595: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0597: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0599: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
059B: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
059D: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
059F: D0 06    JNC   0x05A6             (0877)     jnc   .Delay50u_End
05A1: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05A3: 78       DEC   A                  (0880)     dec   A                              ; [4]
05A4: BF FE    JNZ   0x05A3             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05A6: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05A7: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
05A8: 4F       MOV   X,SP               (1168)     mov   X, SP
05A9: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
05AB: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
05AD: 08       PUSH  A                  (1172)     push  A
05AE: FF C2    INDEX LCD_1_ROW_OFFSET   (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
05B0: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
05B2: 9E 9F    CALL  _LCD_1_Control     (1175)     call  LCD_1_Control                ; Position Cursor
05B4: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
05B7: B0 05    JNZ   0x05BD             (1177)     jnz   .VBG_NZ_SEG
05B9: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
05BB: 80 13    JMP   0x05CF             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
05BD: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
05C0: D0 09    JNC   0x05CA             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
05C2: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
05C4: 78       DEC   A                  (1185)     dec   A
05C5: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
05C8: 80 06    JMP   0x05CF             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
05CA: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
05CD: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
05CF: 9E 6E    CALL  LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_PrHexInt|_LCD_1_PrString|_LCD_1_Write_Data|LCD_1_WriteData(1194)     call  LCD_1_WriteData              ; Write value
05D1: 18       POP   A                  (1195)     pop   A
05D2: 78       DEC   A                  (1196)     dec   A
05D3: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
05D5: BF D7    JNZ   0x05AD             (1198)     jnz   .VBG_LOOP
05D7: 70 3F    AND   F,0x3F             
05D9: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
05DB: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
05DC: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
05DD: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
05DE: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
05DF: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
05E1: 9E 70    CALL  _LCD_1_Control     (1243)     call  LCD_1_Control                ; Position the CG pointer
05E3: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
05E6: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
05E9: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
05EB: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
05ED: D0 05    JNC   0x05F3             (1251)     jnc   .VBG_SOLID
05EF: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
05F1: 80 03    JMP   0x05F5             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
05F3: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
05F5: 9E 48    CALL  LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_PrHexInt|_LCD_1_PrString|_LCD_1_Write_Data|LCD_1_WriteData(1257)     call  LCD_1_WriteData              ; character data
05F7: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
05F9: BF EF    JNZ   0x05E9             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
05FB: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
05FD: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0600: BF E5    JNZ   0x05E6             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0602: 18       POP   A                  (1264)     pop  A
0603: 18       POP   A                  (1265)     pop  A
0604: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
0606: 9E 4B    CALL  _LCD_1_Control     (1267)     call LCD_1_Control                 ; need this.
0608: 70 3F    AND   F,0x3F             
060A: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
060C: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_1_Control                ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_1_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_1_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_1_DISP_ON
                                        (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\clk.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   CLK.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "CLK.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _CLK_Start
                                        (0027) export  CLK_Start
                                        (0028) 
                                        (0029) export _CLK_Stop
                                        (0030) export  CLK_Stop
                                        (0031) 
                                        (0032) export _CLK_On
                                        (0033) export  CLK_On
                                        (0034) 
                                        (0035) export _CLK_Off
                                        (0036) export  CLK_Off
                                        (0037) 
                                        (0038) export _CLK_Switch
                                        (0039) export  CLK_Switch
                                        (0040) 
                                        (0041) export _CLK_Invert
                                        (0042) export  CLK_Invert
                                        (0043) 
                                        (0044) export _CLK_GetState
                                        (0045) export  CLK_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: CLK_Start(void)
                                        (0054) ;  FUNCTION NAME: CLK_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: CLK_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _CLK_On:
                                        (0079)  CLK_On:
061B: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
061D: 80 03    JMP   _CLK_Switch        (0081)    jmp  CLK_Switch 
                                        (0082) 
                                        (0083) _CLK_Start:
                                        (0084)  CLK_Start:
                                        (0085) _CLK_Stop:
                                        (0086)  CLK_Stop:
                                        (0087) _CLK_Off:
                                        (0088)  CLK_Off:
061F: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0621: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _CLK_Switch:
                                        (0092)  CLK_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0624: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0626: A0 06    JZ    0x062D             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0628: 2E 05 80 OR    [0x5],0x80         (0102)    or   [Port_1_Data_SHADE],CLK_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~CLK_PinMask
                                        (0105) ENDIF
062B: 80 04    JMP   0x0630             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
062D: 26 05 7F AND   [0x5],0x7F         (0110)    and  [Port_1_Data_SHADE],~CLK_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],CLK_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0630: 51 05    MOV   A,[0x5]            (0116)    mov  A,[Port_1_Data_SHADE]
0632: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[CLK_PortDR],A
0634: 70 3F    AND   F,0x3F             
0636: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0638: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: CLK_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _CLK_Invert:
                                        (0144)  CLK_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
                                        (0149)    xor  [Port_1_Data_SHADE],CLK_PinMask
                                        (0150)    mov  A,[Port_1_Data_SHADE]
                                        (0151)    mov  reg[CLK_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: CLK_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _CLK_GetState:
                                        (0177)  CLK_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
                                        (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
                                        (0188)    and   A,CLK_PinMask                 ; Mask off the trash
                                        (0189)    jz    .End_LED_GS                   ; If zero, we're done
                                        (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0195)    ret
                                        (0196) .ENDSECTION
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\LINE_T~1\LINE_T~1\LINE_T~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
CLK_Invert|CLK_GetState|__UserModules_end|__text_start|_main|_main:
  add                  --> X+131
  ad                   --> X+2
  i                    --> X+1
  k                    --> X+0
    0639: 10       PUSH  X
    063A: 4F       MOV   X,SP
    063B: 38 85    ADD   SP,0x85
(0011) 	BYTE k;
(0012) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    063D: 71 01    OR    F,0x1
(0013) 	// Insert your main routine code here.
(0014) 	
(0015) 	LCD_1_Start();
    063F: 10       PUSH  X
    0640: 7C 05 03 LCALL _LCD_1_Init|_LCD_1_Start|LCD_1_Start
(0016) 	LCD_1_InitVBG();
    0643: 7C 05 DC LCALL _LCD_1_InitVBG
(0017) 	
(0018) 	//TX8_1_EnableInt();
(0019) 	//TX8_1_Start(TX8_1_PARITY_NONE);
(0020) 	
(0021) 	//SleepTimer_1_Start();
(0022) 	//SleepTimer_1_EnableInt();
(0023) 	
(0024) 	SI_Start();
    0646: 7C 03 B6 LCALL SI_Stop|_SI_Start|SI_Start|_SI_Stop|SI_Off|_SI_Off
(0025) 	CLK_Start();
    0649: 7C 06 1F LCALL _CLK_Off|_CLK_Start|_CLK_Stop|CLK_Stop|CLK_Start
(0026) 	
(0027) 	SAR6_1_Start(SAR6_1_HIGHPOWER);
    064C: 50 03    MOV   A,0x3
    064E: 7C 03 D0 LCALL _SAR6_1_Start|SI_GetState|_SAR6_1_SetPower|SI_Invert|SAR6_1_SetPower|SAR6_1_Start
    0651: 20       POP   X
(0028) 	
(0029) 	for (k = 0; k < 11; k++)
    0652: 56 00 00 MOV   [X+0],0x0
    0655: 80 1B    JMP   0x0671
(0030) 		LCD_1_DrawVBG(1, k, 2, k + 6);
    0657: 62 D0 00 MOV   REG[0xD0],0x0
    065A: 52 00    MOV   A,[X+0]
    065C: 01 06    ADD   A,0x6
    065E: 10       PUSH  X
    065F: 08       PUSH  A
    0660: 50 02    MOV   A,0x2
    0662: 08       PUSH  A
    0663: 52 00    MOV   A,[X+0]
    0665: 08       PUSH  A
    0666: 50 01    MOV   A,0x1
    0668: 08       PUSH  A
    0669: 7C 05 A8 LCALL _LCD_1_DrawVBG
    066C: 38 FC    ADD   SP,0xFC
    066E: 20       POP   X
    066F: 77 00    INC   [X+0]
    0671: 3D 00 0B CMP   [X+0],0xB
    0674: CF E2    JC    0x0657
(0031) 	for (k = 0; k < 11; k++)
    0676: 56 00 00 MOV   [X+0],0x0
    0679: 80 1D    JMP   0x0697
(0032) 		LCD_1_DrawVBG(1, k + 11, 2, k + 6);
    067B: 62 D0 00 MOV   REG[0xD0],0x0
    067E: 52 00    MOV   A,[X+0]
    0680: 01 06    ADD   A,0x6
    0682: 10       PUSH  X
    0683: 08       PUSH  A
    0684: 50 02    MOV   A,0x2
    0686: 08       PUSH  A
    0687: 52 00    MOV   A,[X+0]
    0689: 01 0B    ADD   A,0xB
    068B: 08       PUSH  A
    068C: 50 01    MOV   A,0x1
    068E: 08       PUSH  A
    068F: 7C 05 A8 LCALL _LCD_1_DrawVBG
    0692: 38 FC    ADD   SP,0xFC
    0694: 20       POP   X
    0695: 77 00    INC   [X+0]
    0697: 3D 00 0B CMP   [X+0],0xB
    069A: CF E0    JC    0x067B
(0033) 	for (k = 0; k < 11; k++)
    069C: 56 00 00 MOV   [X+0],0x0
    069F: 80 1D    JMP   0x06BD
(0034) 		LCD_1_DrawVBG(1, k + 22, 2, k + 6);
    06A1: 62 D0 00 MOV   REG[0xD0],0x0
    06A4: 52 00    MOV   A,[X+0]
    06A6: 01 06    ADD   A,0x6
    06A8: 10       PUSH  X
    06A9: 08       PUSH  A
    06AA: 50 02    MOV   A,0x2
    06AC: 08       PUSH  A
    06AD: 52 00    MOV   A,[X+0]
    06AF: 01 16    ADD   A,0x16
    06B1: 08       PUSH  A
    06B2: 50 01    MOV   A,0x1
    06B4: 08       PUSH  A
    06B5: 7C 05 A8 LCALL _LCD_1_DrawVBG
    06B8: 38 FC    ADD   SP,0xFC
    06BA: 20       POP   X
    06BB: 77 00    INC   [X+0]
    06BD: 3D 00 0B CMP   [X+0],0xB
    06C0: CF E0    JC    0x06A1
    06C2: 83 68    JMP   0x0A2B
(0035) 	//*
(0036) 	while (1)
(0037) 	{
(0038) 		BYTE i;
(0039) 		CHAR ad[129];
(0040) 		SI_On();
    06C4: 10       PUSH  X
    06C5: 7C 03 B2 LCALL _SI_On
    06C8: 20       POP   X
(0041) 		for (i = 0; i < 129; i++)
    06C9: 56 01 00 MOV   [X+1],0x0
    06CC: 80 61    JMP   0x072E
(0042) 		{
(0043) 			CLK_On();
    06CE: 10       PUSH  X
    06CF: 7C 06 1B LCALL CLK_On|_LCD_1_InitBG|_CLK_On
(0044) 			ad[i] = SAR6_1_cGetSample();
    06D2: 7C 03 E2 LCALL _SAR6_1_cGetSample|_SAR6_1_GetSample|SAR6_1_cGetSample|SAR6_1_GetSample
    06D5: 20       POP   X
    06D6: 62 D0 00 MOV   REG[0xD0],0x0
    06D9: 53 0E    MOV   [__r0],A
    06DB: 55 0C 07 MOV   [__r2],0x7
    06DE: 5A 0B    MOV   [__r3],X
    06E0: 06 0B 02 ADD   [__r3],0x2
    06E3: 52 01    MOV   A,[X+1]
    06E5: 02 0B    ADD   A,[__r3]
    06E7: 53 0B    MOV   [__r3],A
    06E9: 50 00    MOV   A,0x0
    06EB: 0A 0C    ADC   A,[__r2]
    06ED: 60 D5    MOV   REG[0xD5],A
    06EF: 51 0E    MOV   A,[__r0]
    06F1: 3F 0B    MVI   [__r3],A
(0045) 			CLK_Off();
    06F3: 10       PUSH  X
    06F4: 7C 06 1F LCALL _CLK_Off|_CLK_Start|_CLK_Stop|CLK_Stop|CLK_Start
    06F7: 20       POP   X
(0046) 			ad[i] += 31;
    06F8: 62 D0 00 MOV   REG[0xD0],0x0
    06FB: 55 0E 07 MOV   [__r0],0x7
    06FE: 5A 0D    MOV   [__r1],X
    0700: 06 0D 02 ADD   [__r1],0x2
    0703: 52 01    MOV   A,[X+1]
    0705: 02 0D    ADD   A,[__r1]
    0707: 53 0D    MOV   [__r1],A
    0709: 50 00    MOV   A,0x0
    070B: 0A 0E    ADC   A,[__r0]
    070D: 53 0E    MOV   [__r0],A
    070F: 60 D4    MOV   REG[0xD4],A
    0711: 3E 0D    MVI   A,[__r1]
    0713: 7A 0D    DEC   [__r1]
    0715: 53 0C    MOV   [__r2],A
    0717: 06 0C 1F ADD   [__r2],0x1F
    071A: 51 0E    MOV   A,[__r0]
    071C: 60 D5    MOV   REG[0xD5],A
    071E: 51 0C    MOV   A,[__r2]
    0720: 3F 0D    MVI   [__r1],A
(0047) 			if (i == 0)
    0722: 3D 01 00 CMP   [X+1],0x0
    0725: B0 06    JNZ   0x072C
(0048) 				SI_Off();
    0727: 10       PUSH  X
    0728: 7C 03 B6 LCALL SI_Stop|_SI_Start|SI_Start|_SI_Stop|SI_Off|_SI_Off
    072B: 20       POP   X
(0049) 			
(0050) 		}
    072C: 77 01    INC   [X+1]
    072E: 3D 01 81 CMP   [X+1],0x81
    0731: CF 9C    JC    0x06CE
(0051) 		
(0052) 		for (i = 0; i < 8; i++)
    0733: 56 01 00 MOV   [X+1],0x0
    0736: 82 EF    JMP   0x0A26
(0053) 		{
(0054) 			INT add = 0;
    0738: 56 84 00 MOV   [X-124],0x0
    073B: 56 83 00 MOV   [X-125],0x0
(0055) 			for (k = 0; k < 3; k++)
    073E: 56 00 00 MOV   [X+0],0x0
    0741: 80 51    JMP   0x0793
(0056) 				add += ad[(i * 16) + k];
    0743: 62 D0 00 MOV   REG[0xD0],0x0
    0746: 52 00    MOV   A,[X+0]
    0748: 53 0D    MOV   [__r1],A
    074A: 55 0E 00 MOV   [__r0],0x0
    074D: 52 01    MOV   A,[X+1]
    074F: 53 0B    MOV   [__r3],A
    0751: 55 0C 00 MOV   [__r2],0x0
    0754: 93 64    CALL  <created procedures>
    0756: 40       NOP   
    0757: 65 0B    ASL   [__r3]
    0759: 6B 0C    RLC   [__r2]
    075B: 51 0B    MOV   A,[__r3]
    075D: 02 0D    ADD   A,[__r1]
    075F: 53 0D    MOV   [__r1],A
    0761: 51 0C    MOV   A,[__r2]
    0763: 0A 0E    ADC   A,[__r0]
    0765: 53 0E    MOV   [__r0],A
    0767: 5A 0B    MOV   [__r3],X
    0769: 06 0B 02 ADD   [__r3],0x2
    076C: 51 0B    MOV   A,[__r3]
    076E: 04 0D    ADD   [__r1],A
    0770: 0E 0E 07 ADC   [__r0],0x7
    0773: 51 0E    MOV   A,[__r0]
    0775: 60 D4    MOV   REG[0xD4],A
    0777: 3E 0D    MVI   A,[__r1]
    0779: 53 0D    MOV   [__r1],A
    077B: 55 0E 00 MOV   [__r0],0x0
    077E: 47 0D 80 TST   [__r1],0x80
    0781: A0 04    JZ    0x0786
    0783: 55 0E FF MOV   [__r0],0xFF
    0786: 62 D0 00 MOV   REG[0xD0],0x0
    0789: 51 0D    MOV   A,[__r1]
    078B: 05 84    ADD   [X-124],A
    078D: 51 0E    MOV   A,[__r0]
    078F: 0D 83    ADC   [X-125],A
    0791: 77 00    INC   [X+0]
    0793: 3D 00 03 CMP   [X+0],0x3
    0796: CF AC    JC    0x0743
(0057) 			add /= (3 * 11);
    0798: 50 00    MOV   A,0x0
    079A: 08       PUSH  A
    079B: 50 21    MOV   A,0x21
    079D: 08       PUSH  A
    079E: 52 83    MOV   A,[X-125]
    07A0: 08       PUSH  A
    07A1: 52 84    MOV   A,[X-124]
    07A3: 08       PUSH  A
    07A4: 62 D0 00 MOV   REG[0xD0],0x0
    07A7: 7C 0A 32 LCALL 0x0A32
    07AA: 18       POP   A
    07AB: 54 84    MOV   [X-124],A
    07AD: 18       POP   A
    07AE: 54 83    MOV   [X-125],A
    07B0: 38 FE    ADD   SP,0xFE
(0058) 			LCD_1_DrawVBG(1, i * 5, 2, add + 6);
    07B2: 52 84    MOV   A,[X-124]
    07B4: 01 06    ADD   A,0x6
    07B6: 10       PUSH  X
    07B7: 08       PUSH  A
    07B8: 50 02    MOV   A,0x2
    07BA: 08       PUSH  A
    07BB: 93 0A    CALL  0x0AC7
    07BD: 40       NOP   
    07BE: 08       PUSH  A
    07BF: 50 01    MOV   A,0x1
    07C1: 08       PUSH  A
    07C2: 7C 05 A8 LCALL _LCD_1_DrawVBG
    07C5: 38 FC    ADD   SP,0xFC
    07C7: 20       POP   X
(0059) 			
(0060) 			add = 0;
    07C8: 56 84 00 MOV   [X-124],0x0
    07CB: 56 83 00 MOV   [X-125],0x0
(0061) 			for (k = 3; k < 6; k++)
    07CE: 56 00 03 MOV   [X+0],0x3
    07D1: 80 51    JMP   0x0823
(0062) 				add += ad[(i * 16) + k];
    07D3: 62 D0 00 MOV   REG[0xD0],0x0
    07D6: 52 00    MOV   A,[X+0]
    07D8: 53 0D    MOV   [__r1],A
    07DA: 55 0E 00 MOV   [__r0],0x0
    07DD: 52 01    MOV   A,[X+1]
    07DF: 53 0B    MOV   [__r3],A
    07E1: 55 0C 00 MOV   [__r2],0x0
    07E4: 65 0B    ASL   [__r3]
    07E6: 6B 0C    RLC   [__r2]
    07E8: 92 D0    CALL  <created procedures>
    07EA: 40       NOP   
    07EB: 51 0B    MOV   A,[__r3]
    07ED: 02 0D    ADD   A,[__r1]
    07EF: 53 0D    MOV   [__r1],A
    07F1: 51 0C    MOV   A,[__r2]
    07F3: 0A 0E    ADC   A,[__r0]
    07F5: 53 0E    MOV   [__r0],A
    07F7: 5A 0B    MOV   [__r3],X
    07F9: 06 0B 02 ADD   [__r3],0x2
    07FC: 51 0B    MOV   A,[__r3]
    07FE: 04 0D    ADD   [__r1],A
    0800: 0E 0E 07 ADC   [__r0],0x7
    0803: 51 0E    MOV   A,[__r0]
    0805: 60 D4    MOV   REG[0xD4],A
    0807: 3E 0D    MVI   A,[__r1]
    0809: 53 0D    MOV   [__r1],A
    080B: 55 0E 00 MOV   [__r0],0x0
    080E: 47 0D 80 TST   [__r1],0x80
    0811: A0 04    JZ    0x0816
    0813: 55 0E FF MOV   [__r0],0xFF
    0816: 62 D0 00 MOV   REG[0xD0],0x0
    0819: 51 0D    MOV   A,[__r1]
    081B: 05 84    ADD   [X-124],A
    081D: 51 0E    MOV   A,[__r0]
    081F: 0D 83    ADC   [X-125],A
    0821: 77 00    INC   [X+0]
    0823: 3D 00 06 CMP   [X+0],0x6
    0826: CF AC    JC    0x07D3
(0063) 			add /= (3 * 11);
    0828: 50 00    MOV   A,0x0
    082A: 08       PUSH  A
    082B: 50 21    MOV   A,0x21
    082D: 08       PUSH  A
    082E: 52 83    MOV   A,[X-125]
    0830: 08       PUSH  A
    0831: 52 84    MOV   A,[X-124]
    0833: 08       PUSH  A
    0834: 62 D0 00 MOV   REG[0xD0],0x0
    0837: 7C 0A 32 LCALL 0x0A32
    083A: 18       POP   A
    083B: 54 84    MOV   [X-124],A
    083D: 18       POP   A
    083E: 54 83    MOV   [X-125],A
    0840: 38 FE    ADD   SP,0xFE
(0064) 			LCD_1_DrawVBG(1, i * 5 + 1, 2, add + 6);
    0842: 52 84    MOV   A,[X-124]
    0844: 01 06    ADD   A,0x6
    0846: 10       PUSH  X
    0847: 08       PUSH  A
    0848: 50 02    MOV   A,0x2
    084A: 08       PUSH  A
    084B: 92 7A    CALL  0x0AC7
    084D: 40       NOP   
    084E: 53 0E    MOV   [__r0],A
    0850: 06 0E 01 ADD   [__r0],0x1
    0853: 51 0E    MOV   A,[__r0]
    0855: 08       PUSH  A
    0856: 50 01    MOV   A,0x1
    0858: 08       PUSH  A
    0859: 7C 05 A8 LCALL _LCD_1_DrawVBG
    085C: 38 FC    ADD   SP,0xFC
    085E: 20       POP   X
(0065) 			
(0066) 			add = 0;
    085F: 56 84 00 MOV   [X-124],0x0
    0862: 56 83 00 MOV   [X-125],0x0
(0067) 			for (k = 6; k < 10; k++)
    0865: 56 00 06 MOV   [X+0],0x6
    0868: 80 51    JMP   0x08BA
(0068) 				add += ad[(i * 16) + k];
    086A: 62 D0 00 MOV   REG[0xD0],0x0
    086D: 52 00    MOV   A,[X+0]
    086F: 53 0D    MOV   [__r1],A
    0871: 55 0E 00 MOV   [__r0],0x0
    0874: 52 01    MOV   A,[X+1]
    0876: 53 0B    MOV   [__r3],A
    0878: 55 0C 00 MOV   [__r2],0x0
    087B: 65 0B    ASL   [__r3]
    087D: 6B 0C    RLC   [__r2]
    087F: 92 39    CALL  <created procedures>
    0881: 40       NOP   
    0882: 51 0B    MOV   A,[__r3]
    0884: 02 0D    ADD   A,[__r1]
    0886: 53 0D    MOV   [__r1],A
    0888: 51 0C    MOV   A,[__r2]
    088A: 0A 0E    ADC   A,[__r0]
    088C: 53 0E    MOV   [__r0],A
    088E: 5A 0B    MOV   [__r3],X
    0890: 06 0B 02 ADD   [__r3],0x2
    0893: 51 0B    MOV   A,[__r3]
    0895: 04 0D    ADD   [__r1],A
    0897: 0E 0E 07 ADC   [__r0],0x7
    089A: 51 0E    MOV   A,[__r0]
    089C: 60 D4    MOV   REG[0xD4],A
    089E: 3E 0D    MVI   A,[__r1]
    08A0: 53 0D    MOV   [__r1],A
    08A2: 55 0E 00 MOV   [__r0],0x0
    08A5: 47 0D 80 TST   [__r1],0x80
    08A8: A0 04    JZ    0x08AD
    08AA: 55 0E FF MOV   [__r0],0xFF
    08AD: 62 D0 00 MOV   REG[0xD0],0x0
    08B0: 51 0D    MOV   A,[__r1]
    08B2: 05 84    ADD   [X-124],A
    08B4: 51 0E    MOV   A,[__r0]
    08B6: 0D 83    ADC   [X-125],A
    08B8: 77 00    INC   [X+0]
    08BA: 3D 00 0A CMP   [X+0],0xA
    08BD: CF AC    JC    0x086A
(0069) 			add /= (4 * 11);
    08BF: 50 00    MOV   A,0x0
    08C1: 08       PUSH  A
    08C2: 50 2C    MOV   A,0x2C
    08C4: 08       PUSH  A
    08C5: 52 83    MOV   A,[X-125]
    08C7: 08       PUSH  A
    08C8: 52 84    MOV   A,[X-124]
    08CA: 08       PUSH  A
    08CB: 62 D0 00 MOV   REG[0xD0],0x0
    08CE: 7C 0A 32 LCALL 0x0A32
    08D1: 18       POP   A
    08D2: 54 84    MOV   [X-124],A
    08D4: 18       POP   A
    08D5: 54 83    MOV   [X-125],A
    08D7: 38 FE    ADD   SP,0xFE
(0070) 			LCD_1_DrawVBG(1, i * 5 + 2, 2, add + 6);
    08D9: 52 84    MOV   A,[X-124]
    08DB: 01 06    ADD   A,0x6
    08DD: 10       PUSH  X
    08DE: 08       PUSH  A
    08DF: 50 02    MOV   A,0x2
    08E1: 08       PUSH  A
    08E2: 91 E3    CALL  0x0AC7
    08E4: 40       NOP   
    08E5: 53 0E    MOV   [__r0],A
    08E7: 06 0E 02 ADD   [__r0],0x2
    08EA: 51 0E    MOV   A,[__r0]
    08EC: 08       PUSH  A
    08ED: 50 01    MOV   A,0x1
    08EF: 08       PUSH  A
    08F0: 7C 05 A8 LCALL _LCD_1_DrawVBG
    08F3: 38 FC    ADD   SP,0xFC
    08F5: 20       POP   X
(0071) 			
(0072) 			add = 0;
    08F6: 56 84 00 MOV   [X-124],0x0
    08F9: 56 83 00 MOV   [X-125],0x0
(0073) 			for (k = 10; k < 13; k++)
    08FC: 56 00 0A MOV   [X+0],0xA
    08FF: 80 51    JMP   0x0951
(0074) 				add += ad[(i * 16) + k];
    0901: 62 D0 00 MOV   REG[0xD0],0x0
    0904: 52 00    MOV   A,[X+0]
    0906: 53 0D    MOV   [__r1],A
    0908: 55 0E 00 MOV   [__r0],0x0
    090B: 52 01    MOV   A,[X+1]
    090D: 53 0B    MOV   [__r3],A
    090F: 55 0C 00 MOV   [__r2],0x0
    0912: 65 0B    ASL   [__r3]
    0914: 6B 0C    RLC   [__r2]
    0916: 91 A2    CALL  <created procedures>
    0918: 40       NOP   
    0919: 51 0B    MOV   A,[__r3]
    091B: 02 0D    ADD   A,[__r1]
    091D: 53 0D    MOV   [__r1],A
    091F: 51 0C    MOV   A,[__r2]
    0921: 0A 0E    ADC   A,[__r0]
    0923: 53 0E    MOV   [__r0],A
    0925: 5A 0B    MOV   [__r3],X
    0927: 06 0B 02 ADD   [__r3],0x2
    092A: 51 0B    MOV   A,[__r3]
    092C: 04 0D    ADD   [__r1],A
    092E: 0E 0E 07 ADC   [__r0],0x7
    0931: 51 0E    MOV   A,[__r0]
    0933: 60 D4    MOV   REG[0xD4],A
    0935: 3E 0D    MVI   A,[__r1]
    0937: 53 0D    MOV   [__r1],A
    0939: 55 0E 00 MOV   [__r0],0x0
    093C: 47 0D 80 TST   [__r1],0x80
    093F: A0 04    JZ    0x0944
    0941: 55 0E FF MOV   [__r0],0xFF
    0944: 62 D0 00 MOV   REG[0xD0],0x0
    0947: 51 0D    MOV   A,[__r1]
    0949: 05 84    ADD   [X-124],A
    094B: 51 0E    MOV   A,[__r0]
    094D: 0D 83    ADC   [X-125],A
    094F: 77 00    INC   [X+0]
    0951: 3D 00 0D CMP   [X+0],0xD
    0954: CF AC    JC    0x0901
(0075) 			add /= (3 * 11);
    0956: 50 00    MOV   A,0x0
    0958: 08       PUSH  A
    0959: 50 21    MOV   A,0x21
    095B: 08       PUSH  A
    095C: 52 83    MOV   A,[X-125]
    095E: 08       PUSH  A
    095F: 52 84    MOV   A,[X-124]
    0961: 08       PUSH  A
    0962: 62 D0 00 MOV   REG[0xD0],0x0
    0965: 7C 0A 32 LCALL 0x0A32
    0968: 18       POP   A
    0969: 54 84    MOV   [X-124],A
    096B: 18       POP   A
    096C: 54 83    MOV   [X-125],A
    096E: 38 FE    ADD   SP,0xFE
(0076) 			LCD_1_DrawVBG(1, i * 5 + 3, 2, add + 6);
    0970: 52 84    MOV   A,[X-124]
    0972: 01 06    ADD   A,0x6
    0974: 10       PUSH  X
    0975: 08       PUSH  A
    0976: 50 02    MOV   A,0x2
    0978: 08       PUSH  A
    0979: 91 4C    CALL  0x0AC7
    097B: 40       NOP   
    097C: 53 0E    MOV   [__r0],A
    097E: 06 0E 03 ADD   [__r0],0x3
    0981: 51 0E    MOV   A,[__r0]
    0983: 08       PUSH  A
    0984: 50 01    MOV   A,0x1
    0986: 08       PUSH  A
    0987: 7C 05 A8 LCALL _LCD_1_DrawVBG
    098A: 38 FC    ADD   SP,0xFC
    098C: 20       POP   X
(0077) 			
(0078) 			add = 0;
    098D: 56 84 00 MOV   [X-124],0x0
    0990: 56 83 00 MOV   [X-125],0x0
(0079) 			for (k = 13; k < 16; k++)
    0993: 56 00 0D MOV   [X+0],0xD
    0996: 80 51    JMP   0x09E8
(0080) 				add += ad[(i * 16) + k];
    0998: 62 D0 00 MOV   REG[0xD0],0x0
    099B: 52 00    MOV   A,[X+0]
    099D: 53 0D    MOV   [__r1],A
    099F: 55 0E 00 MOV   [__r0],0x0
    09A2: 52 01    MOV   A,[X+1]
    09A4: 53 0B    MOV   [__r3],A
    09A6: 55 0C 00 MOV   [__r2],0x0
    09A9: 65 0B    ASL   [__r3]
    09AB: 6B 0C    RLC   [__r2]
    09AD: 91 0B    CALL  <created procedures>
    09AF: 40       NOP   
    09B0: 51 0B    MOV   A,[__r3]
    09B2: 02 0D    ADD   A,[__r1]
    09B4: 53 0D    MOV   [__r1],A
    09B6: 51 0C    MOV   A,[__r2]
    09B8: 0A 0E    ADC   A,[__r0]
    09BA: 53 0E    MOV   [__r0],A
    09BC: 5A 0B    MOV   [__r3],X
    09BE: 06 0B 02 ADD   [__r3],0x2
    09C1: 51 0B    MOV   A,[__r3]
    09C3: 04 0D    ADD   [__r1],A
    09C5: 0E 0E 07 ADC   [__r0],0x7
    09C8: 51 0E    MOV   A,[__r0]
    09CA: 60 D4    MOV   REG[0xD4],A
    09CC: 3E 0D    MVI   A,[__r1]
    09CE: 53 0D    MOV   [__r1],A
    09D0: 55 0E 00 MOV   [__r0],0x0
    09D3: 47 0D 80 TST   [__r1],0x80
    09D6: A0 04    JZ    0x09DB
    09D8: 55 0E FF MOV   [__r0],0xFF
    09DB: 62 D0 00 MOV   REG[0xD0],0x0
    09DE: 51 0D    MOV   A,[__r1]
    09E0: 05 84    ADD   [X-124],A
    09E2: 51 0E    MOV   A,[__r0]
    09E4: 0D 83    ADC   [X-125],A
    09E6: 77 00    INC   [X+0]
    09E8: 3D 00 10 CMP   [X+0],0x10
    09EB: CF AC    JC    0x0998
(0081) 			add /= (3 * 11);
    09ED: 50 00    MOV   A,0x0
    09EF: 08       PUSH  A
    09F0: 50 21    MOV   A,0x21
    09F2: 08       PUSH  A
    09F3: 52 83    MOV   A,[X-125]
    09F5: 08       PUSH  A
    09F6: 52 84    MOV   A,[X-124]
    09F8: 08       PUSH  A
    09F9: 62 D0 00 MOV   REG[0xD0],0x0
    09FC: 7C 0A 32 LCALL 0x0A32
    09FF: 18       POP   A
    0A00: 54 84    MOV   [X-124],A
    0A02: 18       POP   A
    0A03: 54 83    MOV   [X-125],A
    0A05: 38 FE    ADD   SP,0xFE
(0082) 			LCD_1_DrawVBG(1, i * 5 + 4, 2, add + 6);
    0A07: 52 84    MOV   A,[X-124]
    0A09: 01 06    ADD   A,0x6
    0A0B: 10       PUSH  X
    0A0C: 08       PUSH  A
    0A0D: 50 02    MOV   A,0x2
    0A0F: 08       PUSH  A
    0A10: 90 B5    CALL  0x0AC7
    0A12: 40       NOP   
    0A13: 53 0E    MOV   [__r0],A
    0A15: 06 0E 04 ADD   [__r0],0x4
    0A18: 51 0E    MOV   A,[__r0]
    0A1A: 08       PUSH  A
    0A1B: 50 01    MOV   A,0x1
    0A1D: 08       PUSH  A
    0A1E: 7C 05 A8 LCALL _LCD_1_DrawVBG
    0A21: 38 FC    ADD   SP,0xFC
    0A23: 20       POP   X
(0083) 		}
    0A24: 77 01    INC   [X+1]
    0A26: 3D 01 08 CMP   [X+1],0x8
    0A29: CD 0E    JC    0x0738
(0084) 	}
    0A2B: 8C 98    JMP   0x06C4
(0085) 	//*/
(0086) 	/*
(0087) 	while (1)
(0088) 	{
(0089) 		CHAR ad = 0;
(0090) 		//for (k = 0; k < 100; k++)
(0091) 			ad = SAR6_1_cGetSample();
(0092) 		LCD_1_Position(1, 0);
(0093) 		ad += 31;
(0094) 		LCD_1_PrHexByte(*((BYTE *)&ad));
(0095) 	}
(0096) 	*/
(0097) 	
(0098) 	//LCD_1_Control(LCD_1_DISP_CLEAR_HOME);
(0099) 	
(0100) 	/*
(0101) 	
(0102) 	*/
(0103) 	/*while (1)
(0104) 	{
(0105) 		BYTE i;
(0106) 		
(0107) 		for (i = 0; i < 10; i++)
(0108) 			TX8_1_CPutString("tx8_test\n");
(0109) 		
(0110) 		TX8_1_CPutString("\x1b D");
(0111) 	}
(0112) 	*/
(0113) }
    0A2D: 38 7B    ADD   SP,0x7B
    0A2F: 20       POP   X
    0A30: 8F FF    JMP   0x0A30
<created procedures>:
    0ABA: 65 0B    ASL   [__r3]
    0ABC: 6B 0C    RLC   [__r2]
    0ABE: 65 0B    ASL   [__r3]
    0AC0: 6B 0C    RLC   [__r2]
    0AC2: 65 0B    ASL   [__r3]
    0AC4: 6B 0C    RLC   [__r2]
    0AC6: 7F       RET   
    0AC7: 52 01    MOV   A,[X+1]
    0AC9: 60 E8    MOV   REG[0xE8],A
    0ACB: 62 E9 05 MOV   REG[0xE9],0x5
    0ACE: 40       NOP   
    0ACF: 5D EB    MOV   A,REG[0xEB]
    0AD1: 7F       RET   
